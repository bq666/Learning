
Debouncing1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d3  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015b  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ae  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fa  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e8 e0       	ldi	r30, 0x08	; 8
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9a:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  a2:	28 2f       	mov	r18, r24
  a4:	2f 77       	andi	r18, 0x7F	; 127
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	2b 30       	cpi	r18, 0x0B	; 11
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <ShowOnLED+0x16>
  ae:	f9 01       	movw	r30, r18
  b0:	e8 59       	subi	r30, 0x98	; 152
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	94 91       	lpm	r25, Z
  b6:	01 c0       	rjmp	.+2      	; 0xba <ShowOnLED+0x18>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  b8:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  ba:	87 fd       	sbrc	r24, 7
  bc:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	08 95       	ret

000000c2 <main>:
}

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a b9       	out	0x0a, r24	; 10
	PORTB|=_BV(PB7);	//W³¹cz pull up na pinie PB7
  c6:	2f 9a       	sbi	0x05, 7	; 5
	uint8_t oldkey=PINB & _BV(PB7);
  c8:	c3 b1       	in	r28, 0x03	; 3
  ca:	c0 78       	andi	r28, 0x80	; 128
	uint8_t key;
	uint8_t x=0;
	uint8_t counter=0;
  cc:	10 e0       	ldi	r17, 0x00	; 0
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
	PORTB|=_BV(PB7);	//W³¹cz pull up na pinie PB7
	uint8_t oldkey=PINB & _BV(PB7);
	uint8_t key;
	uint8_t x=0;
  ce:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t counter=0;
	while(1)
	{
		ShowOnLED(x);
  d0:	8d 2f       	mov	r24, r29
  d2:	0e 94 51 00 	call	0xa2	; 0xa2 <ShowOnLED>
		if(counter==0)
  d6:	11 11       	cpse	r17, r1
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <main+0x30>
		{
			key=PINB & _BV(PB7);		//Odczytaj stan klawisza
  da:	93 b1       	in	r25, 0x03	; 3
  dc:	90 78       	andi	r25, 0x80	; 128
			if((key^oldkey) && (key==0))
  de:	9c 13       	cpse	r25, r28
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x24>
			{
				x=(x+1)%2;		//Jeœli siê zmieni³ i jest wciœniêty to zmieñ x
				counter=200;	//Czas przez jaki stan przycisku bêdzie ignorowany
  e2:	c9 2f       	mov	r28, r25
  e4:	f5 cf       	rjmp	.-22     	; 0xd0 <main+0xe>
	{
		ShowOnLED(x);
		if(counter==0)
		{
			key=PINB & _BV(PB7);		//Odczytaj stan klawisza
			if((key^oldkey) && (key==0))
  e6:	91 11       	cpse	r25, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <main+0x20>
			{
				x=(x+1)%2;		//Jeœli siê zmieni³ i jest wciœniêty to zmieñ x
  ea:	df 5f       	subi	r29, 0xFF	; 255
  ec:	d1 70       	andi	r29, 0x01	; 1
				counter=200;	//Czas przez jaki stan przycisku bêdzie ignorowany
  ee:	18 ec       	ldi	r17, 0xC8	; 200
  f0:	f8 cf       	rjmp	.-16     	; 0xe2 <main+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x34>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x3a>
  fc:	00 00       	nop
			}
			oldkey=key;
		} else
		{
			_delay_ms(1);
			counter--;
  fe:	11 50       	subi	r17, 0x01	; 1
 100:	9c 2f       	mov	r25, r28
 102:	ef cf       	rjmp	.-34     	; 0xe2 <main+0x20>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
