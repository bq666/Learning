
LED-hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c4  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000b1  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000074  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c8  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014e  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer_init>:

#include <avr/io.h>

void timer_init()
{
	TCCR1A|=(_BV(COM1A0) | _BV(COM1B0));
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 65       	ori	r24, 0x50	; 80
  88:	80 83       	st	Z, r24
	OCR1A=32678;
  8a:	86 ea       	ldi	r24, 0xA6	; 166
  8c:	9f e7       	ldi	r25, 0x7F	; 127
  8e:	90 93 89 00 	sts	0x0089, r25
  92:	80 93 88 00 	sts	0x0088, r24
	OCR1B=32768;
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e8       	ldi	r25, 0x80	; 128
  9a:	90 93 8b 00 	sts	0x008B, r25
  9e:	80 93 8a 00 	sts	0x008A, r24
	TCCR1B=_BV(CS12);  //Preskaler 256
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	80 93 81 00 	sts	0x0081, r24
	TCCR1C=_BV(FOC1A);
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	80 93 82 00 	sts	0x0082, r24
	DDRB|=(_BV(PB1) | _BV(PB2));
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	84 b9       	out	0x04, r24	; 4
  b4:	08 95       	ret

000000b6 <main>:
}


int main(void)
{
    timer_init();
  b6:	0e 94 40 00 	call	0x80	; 0x80 <timer_init>
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
