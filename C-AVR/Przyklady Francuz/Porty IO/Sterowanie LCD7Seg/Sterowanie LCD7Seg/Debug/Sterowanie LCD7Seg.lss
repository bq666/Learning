
Sterowanie LCD7Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a8  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014c  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000164  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b4  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000057  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000008ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e8 e4       	ldi	r30, 0x48	; 72
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  9a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  a2:	28 2f       	mov	r18, r24
  a4:	2f 77       	andi	r18, 0x7F	; 127
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	2b 30       	cpi	r18, 0x0B	; 11
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <ShowOnLED+0x16>
  ae:	f9 01       	movw	r30, r18
  b0:	e8 59       	subi	r30, 0x98	; 152
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	94 91       	lpm	r25, Z
  b6:	01 c0       	rjmp	.+2      	; 0xba <ShowOnLED+0x18>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  b8:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  ba:	87 fd       	sbrc	r24, 7
  bc:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	08 95       	ret

000000c2 <main>:
}

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a b9       	out	0x0a, r24	; 10
	uint8_t x=0;
  c6:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		ShowOnLED(x);
		x=(x+1)%12;
  c8:	cc e0       	ldi	r28, 0x0C	; 12
  ca:	d0 e0       	ldi	r29, 0x00	; 0
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
	uint8_t x=0;
	while(1)
	{
		ShowOnLED(x);
  cc:	81 2f       	mov	r24, r17
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <ShowOnLED>
		x=(x+1)%12;
  d2:	81 2f       	mov	r24, r17
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	be 01       	movw	r22, r28
  da:	0e 94 7a 00 	call	0xf4	; 0xf4 <__divmodhi4>
  de:	18 2f       	mov	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x24>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x2e>
  f0:	00 00       	nop
  f2:	ec cf       	rjmp	.-40     	; 0xcc <main+0xa>

000000f4 <__divmodhi4>:
  f4:	97 fb       	bst	r25, 7
  f6:	07 2e       	mov	r0, r23
  f8:	16 f4       	brtc	.+4      	; 0xfe <__divmodhi4+0xa>
  fa:	00 94       	com	r0
  fc:	07 d0       	rcall	.+14     	; 0x10c <__divmodhi4_neg1>
  fe:	77 fd       	sbrc	r23, 7
 100:	09 d0       	rcall	.+18     	; 0x114 <__divmodhi4_neg2>
 102:	0e 94 8e 00 	call	0x11c	; 0x11c <__udivmodhi4>
 106:	07 fc       	sbrc	r0, 7
 108:	05 d0       	rcall	.+10     	; 0x114 <__divmodhi4_neg2>
 10a:	3e f4       	brtc	.+14     	; 0x11a <__divmodhi4_exit>

0000010c <__divmodhi4_neg1>:
 10c:	90 95       	com	r25
 10e:	81 95       	neg	r24
 110:	9f 4f       	sbci	r25, 0xFF	; 255
 112:	08 95       	ret

00000114 <__divmodhi4_neg2>:
 114:	70 95       	com	r23
 116:	61 95       	neg	r22
 118:	7f 4f       	sbci	r23, 0xFF	; 255

0000011a <__divmodhi4_exit>:
 11a:	08 95       	ret

0000011c <__udivmodhi4>:
 11c:	aa 1b       	sub	r26, r26
 11e:	bb 1b       	sub	r27, r27
 120:	51 e1       	ldi	r21, 0x11	; 17
 122:	07 c0       	rjmp	.+14     	; 0x132 <__udivmodhi4_ep>

00000124 <__udivmodhi4_loop>:
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	a6 17       	cp	r26, r22
 12a:	b7 07       	cpc	r27, r23
 12c:	10 f0       	brcs	.+4      	; 0x132 <__udivmodhi4_ep>
 12e:	a6 1b       	sub	r26, r22
 130:	b7 0b       	sbc	r27, r23

00000132 <__udivmodhi4_ep>:
 132:	88 1f       	adc	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	5a 95       	dec	r21
 138:	a9 f7       	brne	.-22     	; 0x124 <__udivmodhi4_loop>
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
