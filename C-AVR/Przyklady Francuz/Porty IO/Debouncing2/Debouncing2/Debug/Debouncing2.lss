
Debouncing2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000016e  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000020c  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000175  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000186  00000000  00000000  000005db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b7  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011d  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ee e6       	ldi	r30, 0x6E	; 110
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a2 30       	cpi	r26, 0x02	; 2
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  aa:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  b2:	28 2f       	mov	r18, r24
  b4:	2f 77       	andi	r18, 0x7F	; 127
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	2b 30       	cpi	r18, 0x0B	; 11
  ba:	31 05       	cpc	r19, r1
  bc:	2c f4       	brge	.+10     	; 0xc8 <ShowOnLED+0x16>
  be:	f9 01       	movw	r30, r18
  c0:	e8 59       	subi	r30, 0x98	; 152
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	94 91       	lpm	r25, Z
  c6:	01 c0       	rjmp	.+2      	; 0xca <ShowOnLED+0x18>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  c8:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  ca:	87 fd       	sbrc	r24, 7
  cc:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	08 95       	ret

000000d2 <main>:

uint8_t counters[2];	//Tablica zawieraj¹ca liczniki

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	8a b9       	out	0x0a, r24	; 10
	PORTB|=_BV(PB0) | _BV(PB7);	//W³¹cz pull up na pinie PB0 i PB7
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	81 68       	ori	r24, 0x81	; 129
  da:	85 b9       	out	0x05, r24	; 5
	uint8_t oldkey=PINB & (_BV(PB0) | _BV(PB7));
  dc:	c3 b1       	in	r28, 0x03	; 3
  de:	c1 78       	andi	r28, 0x81	; 129
	uint8_t key;
	uint8_t x=0;
  e0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			key=PINB & _BV(PB0);		//Odczytaj stan klawisza
			if(((key^oldkey) & _BV(PB0)) && ((key & _BV(PB0))==0))
			{
				if(x>0) x--;		//Jeœli siê zmieni³ i jest wciœniêty to zmieñ x
				counters[0]=200;	//Czas przez jaki stan przycisku bêdzie ignorowany
  e2:	18 ec       	ldi	r17, 0xC8	; 200
	uint8_t x=0;
	uint8_t przerwa;

	while(1)
	{
		ShowOnLED(x);
  e4:	8d 2f       	mov	r24, r29
  e6:	0e 94 59 00 	call	0xb2	; 0xb2 <ShowOnLED>
		if(counters[0]==0)
  ea:	80 91 00 01 	lds	r24, 0x0100
  ee:	81 11       	cpse	r24, r1
  f0:	0e c0       	rjmp	.+28     	; 0x10e <main+0x3c>
		{
			key=PINB & _BV(PB0);		//Odczytaj stan klawisza
  f2:	83 b1       	in	r24, 0x03	; 3
  f4:	81 70       	andi	r24, 0x01	; 1
			if(((key^oldkey) & _BV(PB0)) && ((key & _BV(PB0))==0))
  f6:	9c 2f       	mov	r25, r28
  f8:	91 70       	andi	r25, 0x01	; 1
  fa:	98 17       	cp	r25, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <main+0x38>
  fe:	81 11       	cpse	r24, r1
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x38>
			{
				if(x>0) x--;		//Jeœli siê zmieni³ i jest wciœniêty to zmieñ x
 102:	d1 11       	cpse	r29, r1
 104:	d1 50       	subi	r29, 0x01	; 1
				counters[0]=200;	//Czas przez jaki stan przycisku bêdzie ignorowany
 106:	10 93 00 01 	sts	0x0100, r17
			}
			oldkey&=~_BV(PB0);
			oldkey|=key;
 10a:	80 fb       	bst	r24, 0
 10c:	c0 f9       	bld	r28, 0
		}

		if(counters[1]==0)
 10e:	80 91 01 01 	lds	r24, 0x0101
 112:	81 11       	cpse	r24, r1
 114:	0f c0       	rjmp	.+30     	; 0x134 <main+0x62>
		{
			key=PINB & _BV(PB7);		//Odczytaj stan klawisza
 116:	83 b1       	in	r24, 0x03	; 3
 118:	80 78       	andi	r24, 0x80	; 128
			if(((key^oldkey) & _BV(PB7)) && ((key & _BV(PB7))==0))
 11a:	9c 2f       	mov	r25, r28
 11c:	98 27       	eor	r25, r24
 11e:	97 ff       	sbrs	r25, 7
 120:	07 c0       	rjmp	.+14     	; 0x130 <main+0x5e>
 122:	87 fd       	sbrc	r24, 7
 124:	05 c0       	rjmp	.+10     	; 0x130 <main+0x5e>
			{
				if(x<9) x++;		//Jeœli siê zmieni³ i jest wciœniêty to zmieñ x
 126:	d9 30       	cpi	r29, 0x09	; 9
 128:	08 f4       	brcc	.+2      	; 0x12c <main+0x5a>
 12a:	df 5f       	subi	r29, 0xFF	; 255
				counters[1]=200;	//Czas przez jaki stan przycisku bêdzie ignorowany
 12c:	10 93 01 01 	sts	0x0101, r17
			}
			oldkey&=~_BV(PB7);
 130:	cf 77       	andi	r28, 0x7F	; 127
			oldkey|=key;
 132:	c8 2b       	or	r28, r24
		}

		przerwa=0;
		for(uint8_t c=0;c<2;c++)
		if(counters[c])
 134:	80 91 00 01 	lds	r24, 0x0100
 138:	88 23       	and	r24, r24
 13a:	29 f0       	breq	.+10     	; 0x146 <main+0x74>
		{
			counters[c]--;
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	80 93 00 01 	sts	0x0100, r24
			przerwa=1;			//Robimy opóŸnienie tylko jeœli któryœ z liczników by³ !=0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <main+0x76>
			}
			oldkey&=~_BV(PB7);
			oldkey|=key;
		}

		przerwa=0;
 146:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t c=0;c<2;c++)
		if(counters[c])
 148:	90 91 01 01 	lds	r25, 0x0101
 14c:	99 23       	and	r25, r25
 14e:	21 f0       	breq	.+8      	; 0x158 <main+0x86>
		{
			counters[c]--;
 150:	91 50       	subi	r25, 0x01	; 1
 152:	90 93 01 01 	sts	0x0101, r25
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x8a>
			przerwa=1;			//Robimy opóŸnienie tylko jeœli któryœ z liczników by³ !=0
		}
		if(przerwa) _delay_ms(1);
 158:	88 23       	and	r24, r24
 15a:	21 f2       	breq	.-120    	; 0xe4 <main+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	8f e9       	ldi	r24, 0x9F	; 159
 15e:	9f e0       	ldi	r25, 0x0F	; 15
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x8e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x94>
 166:	00 00       	nop
 168:	bd cf       	rjmp	.-134    	; 0xe4 <main+0x12>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
