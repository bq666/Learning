
slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000214  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000342  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025b  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00000b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d0  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_16>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_18>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  58:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  5c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  60:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	64 70       	andi	r22, 0x04	; 4
  6c:	59 52       	subi	r21, 0x29	; 41
  6e:	42 f8       	bld	r4, 2
  70:	40 50       	subi	r20, 0x00	; 0
  72:	7f 00       	.word	0x007f	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a3 31       	cpi	r26, 0x13	; 19
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  94:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <__vector_16>:
}

volatile uint8_t LEDDIGITS[LEDDISPNO];

ISR(TIMER0_OVF_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	static uint8_t LEDNO;

	PORTC|=0x0F;		//Wy³¹cz wszystkie wyœwietlacze
  b0:	88 b1       	in	r24, 0x08	; 8
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	88 b9       	out	0x08, r24	; 8
	LEDNO=(LEDNO+1)%LEDDISPNO;
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	83 70       	andi	r24, 0x03	; 3
  c0:	99 27       	eor	r25, r25
  c2:	80 93 00 01 	sts	0x0100, r24
	ShowOnLED(LEDDIGITS[LEDNO]);
  c6:	fc 01       	movw	r30, r24
  c8:	ec 5f       	subi	r30, 0xFC	; 252
  ca:	fe 4f       	sbci	r31, 0xFE	; 254
  cc:	80 81       	ld	r24, Z
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0x64, 0x70, 0x59, 0x52, 0x42, 0xF8, 0x40, 0x50, 0x7F};

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];
  ce:	8f 77       	andi	r24, 0x7F	; 127
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	8b 30       	cpi	r24, 0x0B	; 11
  d4:	91 05       	cpc	r25, r1
  d6:	2c f4       	brge	.+10     	; 0xe2 <__vector_16+0x46>
  d8:	fc 01       	movw	r30, r24
  da:	e8 59       	subi	r30, 0x98	; 152
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	84 91       	lpm	r24, Z
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <__vector_16+0x48>
//Cyfry 0,1,2,3,4,5,6,7,8,9 i symbol -
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0x64, 0x70, 0x59, 0x52, 0x42, 0xF8, 0x40, 0x50, 0x7F};

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];
	LEDPORT=tmp;
  e4:	85 b9       	out	0x05, r24	; 5
	static uint8_t LEDNO;

	PORTC|=0x0F;		//Wy³¹cz wszystkie wyœwietlacze
	LEDNO=(LEDNO+1)%LEDDISPNO;
	ShowOnLED(LEDDIGITS[LEDNO]);
	PORTC=(PORTC & 0xF0) | (~(1<<LEDNO) & 0x0F);	//Wybierz kolejny wyœwietlacz
  e6:	28 b1       	in	r18, 0x08	; 8
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	00 90 00 01 	lds	r0, 0x0100
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <__vector_16+0x5a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <__vector_16+0x56>
  fa:	80 95       	com	r24
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	20 7f       	andi	r18, 0xF0	; 240
 100:	82 2b       	or	r24, r18
 102:	88 b9       	out	0x08, r24	; 8
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <Timer0Init>:

void Timer0Init()
{
    LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 b9       	out	0x04, r24	; 4
	DDRC|=0x0F;         //Piny steruj¹ce cyframi jako wyjœcie
 11c:	87 b1       	in	r24, 0x07	; 7
 11e:	8f 60       	ori	r24, 0x0F	; 15
 120:	87 b9       	out	0x07, r24	; 7
	TCCR0B=_BV(CS01);	//Preskaler CLKIO/8
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=_BV(TOIE0);	//Odblokuj przerwanie nadmiaru timera 0
 126:	ee e6       	ldi	r30, 0x6E	; 110
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <USART_slave_init>:
}

void USART_slave_init()
{
	//uart_9600();
	UCSR0C=_BV(USBS0) | _BV(UCSZ01) | _BV(UCSZ00); //8 bitów danych, 2 bity stopu, bez parzystoœci, transmisja asynchroniczna
 132:	e2 ec       	ldi	r30, 0xC2	; 194
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	8e e0       	ldi	r24, 0x0E	; 14
 138:	80 83       	st	Z, r24
	UCSR0C|=_BV(UMSEL00);
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	80 83       	st	Z, r24
	UCSR0B=_BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0); //Odblokuj przerwania odbiornika
 140:	88 e9       	ldi	r24, 0x98	; 152
 142:	80 93 c1 00 	sts	0x00C1, r24
 146:	08 95       	ret

00000148 <__vector_18>:

volatile char Bufor[BUF_MAX];
volatile uint8_t status;

ISR(USART_RX_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	static uint8_t bufpos, n, crc;

	if(status) return; //B??d - poprzednia ramka jeszcze nieobs?u?ona
 15c:	80 91 12 01 	lds	r24, 0x0112
 160:	81 11       	cpse	r24, r1
 162:	30 c0       	rjmp	.+96     	; 0x1c4 <__vector_18+0x7c>

	if(n==0)
 164:	80 91 03 01 	lds	r24, 0x0103
 168:	81 11       	cpse	r24, r1
 16a:	07 c0       	rjmp	.+14     	; 0x17a <__vector_18+0x32>
	{
		n=UDR0;
 16c:	90 91 c6 00 	lds	r25, 0x00C6
 170:	90 93 03 01 	sts	0x0103, r25
		bufpos=0;
 174:	10 92 02 01 	sts	0x0102, r1
 178:	12 c0       	rjmp	.+36     	; 0x19e <__vector_18+0x56>
		crc=_crc_ibutton_update(0, n);
		return;
	}

	if(bufpos<n)
 17a:	90 91 02 01 	lds	r25, 0x0102
 17e:	20 91 01 01 	lds	r18, 0x0101
 182:	98 17       	cp	r25, r24
 184:	b8 f4       	brcc	.+46     	; 0x1b4 <__vector_18+0x6c>
	{
		Bufor[bufpos]=UDR0;
 186:	e9 2f       	mov	r30, r25
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 91 c6 00 	lds	r24, 0x00C6
 18e:	e8 5f       	subi	r30, 0xF8	; 248
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 83       	st	Z, r24
		crc=_crc_ibutton_update(crc, Bufor[bufpos++]);
 194:	9f 5f       	subi	r25, 0xFF	; 255
 196:	90 93 02 01 	sts	0x0102, r25
 19a:	90 81       	ld	r25, Z

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
 19c:	82 2f       	mov	r24, r18
 19e:	89 27       	eor	r24, r25
 1a0:	98 e0       	ldi	r25, 0x08	; 8
 1a2:	2c e8       	ldi	r18, 0x8C	; 140
 1a4:	86 95       	lsr	r24
 1a6:	08 f4       	brcc	.+2      	; 0x1aa <__vector_18+0x62>
 1a8:	82 27       	eor	r24, r18
 1aa:	9a 95       	dec	r25
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <__vector_18+0x5c>
 1ae:	80 93 01 01 	sts	0x0101, r24
 1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <__vector_18+0x7c>
	}
	else if(crc==UDR0)
 1b4:	90 91 c6 00 	lds	r25, 0x00C6
 1b8:	29 13       	cpse	r18, r25
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <__vector_18+0x7c>
	{
		status=n;
 1bc:	80 93 12 01 	sts	0x0112, r24
		n=0;
 1c0:	10 92 03 01 	sts	0x0103, r1
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <main>:

int main()
{
	Timer0Init();
 1d8:	0e 94 8c 00 	call	0x118	; 0x118 <Timer0Init>
	USART_slave_init();
 1dc:	0e 94 99 00 	call	0x132	; 0x132 <USART_slave_init>
	sei();
 1e0:	78 94       	sei
	while(1)
	{
		if(status)
 1e2:	80 91 12 01 	lds	r24, 0x0112
 1e6:	88 23       	and	r24, r24
 1e8:	e1 f3       	breq	.-8      	; 0x1e2 <main+0xa>
		{//Odebrano pakiet
			memcpy((char*)LEDDIGITS, (char*)Bufor, LEDDISPNO);
 1ea:	80 91 08 01 	lds	r24, 0x0108
 1ee:	90 91 09 01 	lds	r25, 0x0109
 1f2:	a0 91 0a 01 	lds	r26, 0x010A
 1f6:	b0 91 0b 01 	lds	r27, 0x010B
 1fa:	80 93 04 01 	sts	0x0104, r24
 1fe:	90 93 05 01 	sts	0x0105, r25
 202:	a0 93 06 01 	sts	0x0106, r26
 206:	b0 93 07 01 	sts	0x0107, r27
			status=0; //Pakiet obs?u?ony
 20a:	10 92 12 01 	sts	0x0112, r1
 20e:	e9 cf       	rjmp	.-46     	; 0x1e2 <main+0xa>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
