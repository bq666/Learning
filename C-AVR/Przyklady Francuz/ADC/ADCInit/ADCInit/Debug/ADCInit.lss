
ADCInit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000108  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000c2  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d6  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000156  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 3c       	cpi	r26, 0xC9	; 201
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
#include <avr/interrupt.h>

uint16_t res[100];

ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	ef 93       	push	r30
  a2:	ff 93       	push	r31
	static uint8_t n;
	res[n++]=ADC;
  a4:	e0 91 00 01 	lds	r30, 0x0100
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	2e 0f       	add	r18, r30
  ac:	20 93 00 01 	sts	0x0100, r18
  b0:	80 91 78 00 	lds	r24, 0x0078
  b4:	90 91 79 00 	lds	r25, 0x0079
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	ef 5f       	subi	r30, 0xFF	; 255
  c0:	fe 4f       	sbci	r31, 0xFE	; 254
  c2:	91 83       	std	Z+1, r25	; 0x01
  c4:	80 83       	st	Z, r24
	if(n == 100)
  c6:	24 36       	cpi	r18, 0x64	; 100
  c8:	21 f4       	brne	.+8      	; 0xd2 <__vector_21+0x42>
	{
		ADCSRA=0;  //Wy³¹cz dalsze przetwarzanie
  ca:	10 92 7a 00 	sts	0x007A, r1
		n=0;
  ce:	10 92 00 01 	sts	0x0100, r1
	}
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <ADCInit>:

void ADCInit()
{
	ADMUX=_BV(REFS0) | _BV(MUX0);   //Nap. referencyjne równe Vcc, wejœcie pierwsze multipleksera
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	80 93 7c 00 	sts	0x007C, r24
	DIDR0=_BV(ADC1D);               //Wy³¹cz funkcjê cyfrow¹ pinu nr 1
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 7e 00 	sts	0x007E, r24
	ADCSRB=0;   //Tryb free running
  f2:	10 92 7b 00 	sts	0x007B, r1
	ADCSRA=_BV(ADEN) | _BV(ADIE) | _BV(ADATE) | _BV(ADPS2) | _BV(ADPS0); //Preskaler ADC - 32, w³¹cz ADC i przerwania, free running
  f6:	8d ea       	ldi	r24, 0xAD	; 173
  f8:	80 93 7a 00 	sts	0x007A, r24
  fc:	08 95       	ret

000000fe <main>:
}

int main(void)
{
	ADCInit();  //Inicjalizacja ADC
  fe:	0e 94 73 00 	call	0xe6	; 0xe6 <ADCInit>
	sei();	
 102:	78 94       	sei
	ADCSRA|=_BV(ADSC);  //Rozpocznij przetwarzanie
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	80 83       	st	Z, r24
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x10>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
