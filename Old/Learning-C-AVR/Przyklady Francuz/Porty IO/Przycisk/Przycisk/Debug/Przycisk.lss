
Przycisk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000795  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e2  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  00001083  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000aa  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__TEXT_REGION_LENGTH__+0x7e00bf>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e0 e2       	ldi	r30, 0x20	; 32
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  9a:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  a2:	e8 2f       	mov	r30, r24
  a4:	ef 77       	andi	r30, 0x7F	; 127
  a6:	eb 30       	cpi	r30, 0x0B	; 11
  a8:	28 f4       	brcc	.+10     	; 0xb4 <ShowOnLED+0x12>
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	e8 59       	subi	r30, 0x98	; 152
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	94 91       	lpm	r25, Z
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <ShowOnLED+0x14>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  b4:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  b6:	87 fd       	sbrc	r24, 7
  b8:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  ba:	9b b9       	out	0x0b, r25	; 11
  bc:	08 95       	ret

000000be <main>:
}

int main()
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a b9       	out	0x0a, r24	; 10
	PORTB|=_BV(PB0) | _BV(PB7);	//W³¹cz pull upy na pinach PB0 i PB7
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	81 68       	ori	r24, 0x81	; 129
  d0:	85 b9       	out	0x05, r24	; 5
	uint8_t x=0;
  d2:	90 e0       	ldi	r25, 0x00	; 0
	while(1)
	{
		ShowOnLED(x);
		if((PINB & _BV(PB0))==0) x--;
		if((PINB & _BV(PB7))==0) x++;
		x=x%10;
  d4:	1a e0       	ldi	r17, 0x0A	; 10
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
	PORTB|=_BV(PB0) | _BV(PB7);	//W³¹cz pull upy na pinach PB0 i PB7
	uint8_t x=0;
	while(1)
	{
		ShowOnLED(x);
  d6:	89 2f       	mov	r24, r25
  d8:	99 83       	std	Y+1, r25	; 0x01
  da:	0e 94 51 00 	call	0xa2	; 0xa2 <ShowOnLED>
		if((PINB & _BV(PB0))==0) x--;
  de:	99 81       	ldd	r25, Y+1	; 0x01
  e0:	18 9b       	sbis	0x03, 0	; 3
  e2:	91 50       	subi	r25, 0x01	; 1
		if((PINB & _BV(PB7))==0) x++;
  e4:	1f 9b       	sbis	0x03, 7	; 3
  e6:	9f 5f       	subi	r25, 0xFF	; 255
		x=x%10;
  e8:	89 2f       	mov	r24, r25
  ea:	61 2f       	mov	r22, r17
  ec:	0e 94 82 00 	call	0x104	; 0x104 <__udivmodqi4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	31 ee       	ldi	r19, 0xE1	; 225
  f4:	84 e0       	ldi	r24, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x38>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x42>
 100:	00 00       	nop
 102:	e9 cf       	rjmp	.-46     	; 0xd6 <main+0x18>

00000104 <__udivmodqi4>:
 104:	99 1b       	sub	r25, r25
 106:	79 e0       	ldi	r23, 0x09	; 9
 108:	04 c0       	rjmp	.+8      	; 0x112 <__udivmodqi4_ep>

0000010a <__udivmodqi4_loop>:
 10a:	99 1f       	adc	r25, r25
 10c:	96 17       	cp	r25, r22
 10e:	08 f0       	brcs	.+2      	; 0x112 <__udivmodqi4_ep>
 110:	96 1b       	sub	r25, r22

00000112 <__udivmodqi4_ep>:
 112:	88 1f       	adc	r24, r24
 114:	7a 95       	dec	r23
 116:	c9 f7       	brne	.-14     	; 0x10a <__udivmodqi4_loop>
 118:	80 95       	com	r24
 11a:	08 95       	ret

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
