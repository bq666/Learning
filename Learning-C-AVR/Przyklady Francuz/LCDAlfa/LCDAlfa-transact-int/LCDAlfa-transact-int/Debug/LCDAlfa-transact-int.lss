
LCDAlfa-transact-int.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800116  00800116  000009d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001416  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092e  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093c  00000000  00000000  00002844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  00003180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a08  00000000  00000000  00003868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00004270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_13>
  38:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5f 01 	call	0x2be	; 0x2be <main>
  9e:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <malloc_re>:
#include <stdlib.h>
#include <util/atomic.h>
#include "Alloc_safe.h"

void *malloc_re(size_t size)
{
  a6:	cf 93       	push	r28
	void *ptr;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  a8:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  aa:	f8 94       	cli
	{
		ptr=malloc(size);
  ac:	0e 94 2e 03 	call	0x65c	; 0x65c <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  b0:	cf bf       	out	0x3f, r28	; 63
	}
	return ptr;
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <free_re>:

void free_re(void *ptr)
{
  b6:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  b8:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  ba:	f8 94       	cli
	{
		free(ptr);
  bc:	0e 94 c6 03 	call	0x78c	; 0x78c <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  c0:	cf bf       	out	0x3f, r28	; 63
	}
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <hd44780_outnibble>:
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
  c6:	5b 98       	cbi	0x0b, 3	; 11
  if (rs)
  c8:	66 23       	and	r22, r22
  ca:	11 f0       	breq	.+4      	; 0xd0 <hd44780_outnibble+0xa>
    SET(PORT, HD44780_RS);
  cc:	5c 9a       	sbi	0x0b, 4	; 11
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <hd44780_outnibble+0xc>
  else
    CLR(PORT, HD44780_RS);
  d0:	5c 98       	cbi	0x0b, 4	; 11
  ASSIGN(PORT, HD44780_D4, n);
  d2:	98 b1       	in	r25, 0x08	; 8
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	98 b9       	out	0x08, r25	; 8
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  da:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <hd44780_outnibble+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <hd44780_outnibble+0x1e>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
  e4:	5a 98       	cbi	0x0b, 2	; 11
  e6:	08 95       	ret

000000e8 <hd44780_innibble>:
static uint8_t
hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
  e8:	5b 9a       	sbi	0x0b, 3	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
  ea:	97 b1       	in	r25, 0x07	; 7
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	97 b9       	out	0x07, r25	; 7
  if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <hd44780_innibble+0x10>
    SET(PORT, HD44780_RS);
  f4:	5c 9a       	sbi	0x0b, 4	; 11
  f6:	01 c0       	rjmp	.+2      	; 0xfa <hd44780_innibble+0x12>
  else
    CLR(PORT, HD44780_RS);
  f8:	5c 98       	cbi	0x0b, 4	; 11
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  fa:	5a 9a       	sbi	0x0b, 2	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <hd44780_innibble+0x16>
 102:	00 c0       	rjmp	.+0      	; 0x104 <hd44780_innibble+0x1c>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 104:	86 b1       	in	r24, 0x06	; 6
  else
    x = 0;
  CLR(PORT, HD44780_E);
 106:	5a 98       	cbi	0x0b, 2	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 108:	97 b1       	in	r25, 0x07	; 7
 10a:	9f 60       	ori	r25, 0x0F	; 15
 10c:	97 b9       	out	0x07, r25	; 7
  CLR(PORT, HD44780_RW);
 10e:	5b 98       	cbi	0x0b, 3	; 11

  return x;
}
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	08 95       	ret

00000114 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	c8 2f       	mov	r28, r24
 11a:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 11c:	82 95       	swap	r24
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 124:	6d 2f       	mov	r22, r29
 126:	8c 2f       	mov	r24, r28
 128:	8f 70       	andi	r24, 0x0F	; 15
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
  hd44780_outnibble(b >> 4, rs);
  hd44780_outnibble(b & 0xf, rs);
 12e:	0c 94 63 00 	jmp	0xc6	; 0xc6 <hd44780_outnibble>

00000132 <hd44780_outnibble_nowait>:
}

void hd44780_outnibble_nowait(uint8_t n, uint8_t rs)
{
	//CLR(OUT, HD44780_E);              //Wyzeruj sygna³ Enable i zatrzaœnij dane
	CLR(PORT, HD44780_RW);
 132:	5b 98       	cbi	0x0b, 3	; 11
	if (rs) SET(PORT, HD44780_RS);
 134:	66 23       	and	r22, r22
 136:	11 f0       	breq	.+4      	; 0x13c <hd44780_outnibble_nowait+0xa>
 138:	5c 9a       	sbi	0x0b, 4	; 11
 13a:	01 c0       	rjmp	.+2      	; 0x13e <hd44780_outnibble_nowait+0xc>
	else   CLR(PORT, HD44780_RS);
 13c:	5c 98       	cbi	0x0b, 4	; 11
	ASSIGN(PORT, HD44780_D4, n);
 13e:	98 b1       	in	r25, 0x08	; 8
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	98 2b       	or	r25, r24
 144:	98 b9       	out	0x08, r25	; 8
	SET(PORT, HD44780_E);         //Ustaw enable
 146:	5a 9a       	sbi	0x0b, 2	; 11
 148:	08 95       	ret

0000014a <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 150:	0e 94 74 00 	call	0xe8	; 0xe8 <hd44780_innibble>
 154:	d8 2f       	mov	r29, r24
 156:	d2 95       	swap	r29
 158:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 74 00 	call	0xe8	; 0xe8 <hd44780_innibble>

  return x;
}
 160:	8d 2b       	or	r24, r29
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <hd44780_wait_ready>:
 */
void
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 a5 00 	call	0x14a	; 0x14a <hd44780_inbyte>
 16e:	87 fd       	sbrc	r24, 7
 170:	fb cf       	rjmp	.-10     	; 0x168 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 172:	08 95       	ret

00000174 <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
 174:	54 9a       	sbi	0x0a, 4	; 10
  SET(DDR, HD44780_RW);
 176:	53 9a       	sbi	0x0a, 3	; 10
  SET(DDR, HD44780_E);
 178:	52 9a       	sbi	0x0a, 2	; 10
  ASSIGN(DDR, HD44780_D4, 0x0F);
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	8f 60       	ori	r24, 0x0F	; 15
 17e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e5       	ldi	r24, 0x5F	; 95
 182:	9a ee       	ldi	r25, 0xEA	; 234
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <hd44780_init+0x10>
 188:	00 c0       	rjmp	.+0      	; 0x18a <hd44780_init+0x16>
 18a:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	90 e4       	ldi	r25, 0x40	; 64
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <hd44780_init+0x24>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <hd44780_init+0x2a>
 19e:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <hd44780_init+0x38>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <hd44780_init+0x3e>
 1b2:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	95 ec       	ldi	r25, 0xC5	; 197
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <hd44780_init+0x4a>
 1c2:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
  hd44780_wait_ready(false);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0c 94 b4 00 	jmp	0x168	; 0x168 <hd44780_wait_ready>

000001ee <__vector_13>:
#include <avr/interrupt.h>
#include "Alloc_safe.h"
#include "LCD_trans.h"

ISR(TIMER1_OVF_vect)
{
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	26 97       	sbiw	r28, 0x06	; 6
 220:	de bf       	out	0x3e, r29	; 62
 222:	cd bf       	out	0x3d, r28	; 61
	static char int_buf[sizeof(LCD_trans) + 7];
	static uint16_t cnt;
	char bufstr[6];
	
	utoa(cnt++, bufstr, 10);
 224:	80 91 1f 01 	lds	r24, 0x011F
 228:	90 91 20 01 	lds	r25, 0x0120
 22c:	9c 01       	movw	r18, r24
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	30 93 20 01 	sts	0x0120, r19
 236:	20 93 1f 01 	sts	0x011F, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 23a:	4a e0       	ldi	r20, 0x0A	; 10
 23c:	9e 01       	movw	r18, r28
 23e:	2f 5f       	subi	r18, 0xFF	; 255
 240:	3f 4f       	sbci	r19, 0xFF	; 255
 242:	79 01       	movw	r14, r18
 244:	b9 01       	movw	r22, r18
 246:	0e 94 67 04 	call	0x8ce	; 0x8ce <__utoa_ncheck>
	while(strlen(bufstr)<5) strcat(bufstr, " ");
 24a:	f7 01       	movw	r30, r14
 24c:	01 90       	ld	r0, Z+
 24e:	00 20       	and	r0, r0
 250:	e9 f7       	brne	.-6      	; 0x24c <__vector_13+0x5e>
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	ee 19       	sub	r30, r14
 256:	ff 09       	sbc	r31, r15
 258:	35 97       	sbiw	r30, 0x05	; 5
 25a:	30 f4       	brcc	.+12     	; 0x268 <__vector_13+0x7a>
 25c:	66 e0       	ldi	r22, 0x06	; 6
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	c7 01       	movw	r24, r14
 262:	0e 94 55 04 	call	0x8aa	; 0x8aa <strcat>
 266:	f1 cf       	rjmp	.-30     	; 0x24a <__vector_13+0x5c>
	LCD_PutText_B(6,1, bufstr, (LCD_trans*)&int_buf, false);
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	26 e1       	ldi	r18, 0x16	; 22
 26c:	31 e0       	ldi	r19, 0x01	; 1
 26e:	a7 01       	movw	r20, r14
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_PutText_B>
}
 278:	26 96       	adiw	r28, 0x06	; 6
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 91       	pop	r16
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <Timer1Init>:

void Timer1Init()
{
	TCCR1B=_BV(CS12);      //Timer w trybie 0, preskaler 256 - nadmiar co ok. 1 s
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=_BV(TOIE1);     //Odblokuj przerwanie nadmiaru timera
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 6f 00 	sts	0x006F, r24
 2bc:	08 95       	ret

000002be <main>:
}

int main(void)
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <main+0x6>
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0x8>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0xa>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
 2cc:	0e 94 84 02 	call	0x508	; 0x508 <LCD_Init>
	LCD_Timer_init();
 2d0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCD_Timer_init>
	Timer1Init();         //Zainicjuj timer generuj¹cy okresowo komunikaty
 2d4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Timer1Init>
	sei();
 2d8:	78 94       	sei
	
	LCD_PutText(0,0, "Numer:");
 2da:	48 e0       	ldi	r20, 0x08	; 8
 2dc:	51 e0       	ldi	r21, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_PutText>
	LCD_PutText(0,1, "INT  :");
 2e6:	4f e0       	ldi	r20, 0x0F	; 15
 2e8:	51 e0       	ldi	r21, 0x01	; 1
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <LCD_PutText>
	uint16_t cnt=0;
	LCD_trans *buf=malloc_re(sizeof(LCD_trans) + 7);
 2f2:	89 e0       	ldi	r24, 0x09	; 9
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 53 00 	call	0xa6	; 0xa6 <malloc_re>
 2fa:	6c 01       	movw	r12, r24
	Timer1Init();         //Zainicjuj timer generuj¹cy okresowo komunikaty
	sei();
	
	LCD_PutText(0,0, "Numer:");
	LCD_PutText(0,1, "INT  :");
	uint16_t cnt=0;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	9e 01       	movw	r18, r28
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	3f 4f       	sbci	r19, 0xFF	; 255
 306:	79 01       	movw	r14, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	3f ef       	ldi	r19, 0xFF	; 255
 30a:	41 ee       	ldi	r20, 0xE1	; 225
 30c:	e4 e0       	ldi	r30, 0x04	; 4
 30e:	31 50       	subi	r19, 0x01	; 1
 310:	40 40       	sbci	r20, 0x00	; 0
 312:	e0 40       	sbci	r30, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x50>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x5a>
 318:	00 00       	nop
	char bufstr[6];
	
	while(1)
	{
		_delay_ms(100);
		utoa(cnt++, bufstr, 10);
 31a:	5c 01       	movw	r10, r24
 31c:	ff ef       	ldi	r31, 0xFF	; 255
 31e:	af 1a       	sub	r10, r31
 320:	bf 0a       	sbc	r11, r31
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	b7 01       	movw	r22, r14
 326:	0e 94 67 04 	call	0x8ce	; 0x8ce <__utoa_ncheck>
		while(strlen(bufstr)<5) strcat(bufstr, " ");
 32a:	f7 01       	movw	r30, r14
 32c:	01 90       	ld	r0, Z+
 32e:	00 20       	and	r0, r0
 330:	e9 f7       	brne	.-6      	; 0x32c <main+0x6e>
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	ee 19       	sub	r30, r14
 336:	ff 09       	sbc	r31, r15
 338:	35 97       	sbiw	r30, 0x05	; 5
 33a:	30 f4       	brcc	.+12     	; 0x348 <main+0x8a>
 33c:	66 e0       	ldi	r22, 0x06	; 6
 33e:	71 e0       	ldi	r23, 0x01	; 1
 340:	c7 01       	movw	r24, r14
 342:	0e 94 55 04 	call	0x8aa	; 0x8aa <strcat>
 346:	f1 cf       	rjmp	.-30     	; 0x32a <main+0x6c>
		LCD_PutText_B(6,0, bufstr, buf, false);
 348:	00 e0       	ldi	r16, 0x00	; 0
 34a:	96 01       	movw	r18, r12
 34c:	a7 01       	movw	r20, r14
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_PutText_B>
bool LCD_PutText(uint8_t x, uint8_t y, char *txt); //Wyœwietl napis na LCD
bool LCD_PutText_B(uint8_t x, uint8_t y, char *txt, LCD_trans *buf, bool autodel);

static inline bool LCD_IsTransCompleted(LCD_trans *trans)  //Czy transakcja zakoñczona?
{
	return trans->Ready;
 356:	f6 01       	movw	r30, r12
 358:	80 81       	ld	r24, Z
		while(!LCD_IsTransCompleted(buf));
 35a:	80 ff       	sbrs	r24, 0
 35c:	fc cf       	rjmp	.-8      	; 0x356 <main+0x98>
	char bufstr[6];
	
	while(1)
	{
		_delay_ms(100);
		utoa(cnt++, bufstr, 10);
 35e:	c5 01       	movw	r24, r10
 360:	d3 cf       	rjmp	.-90     	; 0x308 <main+0x4a>

00000362 <cbAdd>:
{
	return cb->Count == 0;
}

bool cbAdd(CircBuffer *cb, LCD_trans *elem)
{
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ec 01       	movw	r28, r24
 36a:	9b 01       	movw	r18, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 36c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 36e:	f8 94       	cli
static inline bool cbIsEmpty(CircBuffer *cb)
{
	return cb->Count == 0;
}

bool cbAdd(CircBuffer *cb, LCD_trans *elem)
 370:	4d 89       	ldd	r20, Y+21	; 0x15
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(cbIsFull(cb)) return false;         //Czy jest miejsce w kolejce?
 372:	4a 30       	cpi	r20, 0x0A	; 10
 374:	19 f4       	brne	.+6      	; 0x37c <cbAdd+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 376:	1f bf       	out	0x3f, r17	; 63
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	14 c0       	rjmp	.+40     	; 0x3a4 <cbAdd+0x42>
		uint8_t end = (cb->Beg + cb->Count) % LCD_MAXTRANS;
 37c:	5c 89       	ldd	r21, Y+20	; 0x14
 37e:	84 2f       	mov	r24, r20
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	85 0f       	add	r24, r21
 384:	91 1d       	adc	r25, r1
 386:	6a e0       	ldi	r22, 0x0A	; 10
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
		cb->elements[end] = elem;              //Dodaj transakcjê
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	8c 0f       	add	r24, r28
 394:	9d 1f       	adc	r25, r29
 396:	fc 01       	movw	r30, r24
 398:	31 83       	std	Z+1, r19	; 0x01
 39a:	20 83       	st	Z, r18
		++cb->Count;                           //Liczba elementów w buforze
 39c:	4f 5f       	subi	r20, 0xFF	; 255
 39e:	4d 8b       	std	Y+21, r20	; 0x15
 3a0:	1f bf       	out	0x3f, r17	; 63
	}
	return true;      //Wszystko ok
 3a2:	81 e0       	ldi	r24, 0x01	; 1
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <cbRead>:

LCD_trans *cbRead(CircBuffer *cb)
{
 3ac:	cf 93       	push	r28
 3ae:	fc 01       	movw	r30, r24
	LCD_trans *elem;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 3b0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3b2:	f8 94       	cli
		++cb->Count;                           //Liczba elementów w buforze
	}
	return true;      //Wszystko ok
}

LCD_trans *cbRead(CircBuffer *cb)
 3b4:	35 89       	ldd	r19, Z+21	; 0x15
{
	LCD_trans *elem;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(cbIsEmpty(cb)) return NULL;       //Bufor pusty, nie mo¿na zwróciæ elementu
 3b6:	31 11       	cpse	r19, r1
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <cbRead+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3ba:	2f bf       	out	0x3f, r18	; 63
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	15 c0       	rjmp	.+42     	; 0x3ec <cbRead+0x40>
		elem = cb->elements[cb->Beg];
 3c2:	84 89       	ldd	r24, Z+20	; 0x14
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	dc 01       	movw	r26, r24
 3c8:	aa 0f       	add	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	ae 0f       	add	r26, r30
 3ce:	bf 1f       	adc	r27, r31
 3d0:	cc 91       	ld	r28, X
 3d2:	11 96       	adiw	r26, 0x01	; 1
 3d4:	4c 91       	ld	r20, X
		cb->Beg = (cb->Beg + 1) % LCD_MAXTRANS;
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	6a e0       	ldi	r22, 0x0A	; 10
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	0e 94 06 03 	call	0x60c	; 0x60c <__divmodhi4>
 3e0:	84 8b       	std	Z+20, r24	; 0x14
		-- cb->Count;                        //Zmniejszamy liczbê elementów pozosta³ych
 3e2:	31 50       	subi	r19, 0x01	; 1
 3e4:	35 8b       	std	Z+21, r19	; 0x15
 3e6:	2f bf       	out	0x3f, r18	; 63
	}		                                 //w buforze
	return elem;
 3e8:	8c 2f       	mov	r24, r28
 3ea:	94 2f       	mov	r25, r20
}
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
		uint8_t pos    : 6;           //Pozycja w polu danych aktualnej transakcji
		uint8_t nibble : 1;           //Która tetrada jest wysy³ana
	} seq;
	static LCD_trans *trans;          //Bie¿¹co realizowana transakcja
	
	SET(PORT, HD44780_E);
 412:	5a 9a       	sbi	0x0b, 2	; 11
	
	if(trans == NULL)                 //Nic do zrobienia, sprawdŸmy czy jakaœ transakcja oczekuje
 414:	80 91 22 01 	lds	r24, 0x0122
 418:	90 91 23 01 	lds	r25, 0x0123
 41c:	89 2b       	or	r24, r25
 41e:	89 f4       	brne	.+34     	; 0x442 <__vector_14+0x52>
	{
		trans=cbRead(&LCD_TransBuffer); //Czy jest jakaœ oczekuj¹ca transakcja
 420:	84 e2       	ldi	r24, 0x24	; 36
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 d6 01 	call	0x3ac	; 0x3ac <cbRead>
 428:	90 93 23 01 	sts	0x0123, r25
 42c:	80 93 22 01 	sts	0x0122, r24
		seq.pos=0;
 430:	20 91 21 01 	lds	r18, 0x0121
		seq.nibble=0;
 434:	20 7c       	andi	r18, 0xC0	; 192
 436:	2f 7b       	andi	r18, 0xBF	; 191
 438:	20 93 21 01 	sts	0x0121, r18
		if(trans == NULL) TCCR0B=0;   //Nie ma ¿adnych transakcji - wy³¹cz timer
 43c:	89 2b       	or	r24, r25
 43e:	09 f4       	brne	.+2      	; 0x442 <__vector_14+0x52>
 440:	15 bc       	out	0x25, r1	; 37
	}

	if(trans)
 442:	80 91 22 01 	lds	r24, 0x0122
 446:	90 91 23 01 	lds	r25, 0x0123
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	09 f4       	brne	.+2      	; 0x450 <__vector_14+0x60>
 44e:	44 c0       	rjmp	.+136    	; 0x4d8 <__vector_14+0xe8>
	{                                 //Jest transakcja do zrealizowania
		uint8_t dat=trans->data[seq.pos];
 450:	30 91 21 01 	lds	r19, 0x0121
 454:	23 2f       	mov	r18, r19
 456:	2f 73       	andi	r18, 0x3F	; 63
 458:	fc 01       	movw	r30, r24
 45a:	e2 0f       	add	r30, r18
 45c:	f1 1d       	adc	r31, r1
 45e:	82 81       	ldd	r24, Z+2	; 0x02
		if(seq.nibble == 0) dat>>=4;  //To trzeba zmieniæ jeœli linie danych nie s¹ po³¹czone
 460:	36 fd       	sbrc	r19, 6
 462:	02 c0       	rjmp	.+4      	; 0x468 <__vector_14+0x78>
 464:	82 95       	swap	r24
 466:	8f 70       	andi	r24, 0x0F	; 15
		                              // z pinami 0-3 portu IO
		hd44780_outnibble_nowait(dat & 0x0F, seq.pos != 0);    //Zapisujemy rejestr steruj¹cy lub dane
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	21 11       	cpse	r18, r1
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__vector_14+0x80>
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8f 70       	andi	r24, 0x0F	; 15
 472:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outnibble_nowait>
		++seq.nibble;
 476:	80 91 21 01 	lds	r24, 0x0121
 47a:	90 e4       	ldi	r25, 0x40	; 64
 47c:	89 27       	eor	r24, r25
 47e:	80 93 21 01 	sts	0x0121, r24
		if(seq.nibble == 0) ++seq.pos; //Co drug¹ tetradê zwiêkszamy pozycjê bufora
 482:	86 fd       	sbrc	r24, 6
 484:	07 c0       	rjmp	.+14     	; 0x494 <__vector_14+0xa4>
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	98 0f       	add	r25, r24
 48a:	9f 73       	andi	r25, 0x3F	; 63
 48c:	80 7c       	andi	r24, 0xC0	; 192
 48e:	89 2b       	or	r24, r25
 490:	80 93 21 01 	sts	0x0121, r24
		if(seq.pos >= trans->len)
 494:	e0 91 22 01 	lds	r30, 0x0122
 498:	f0 91 23 01 	lds	r31, 0x0123
 49c:	20 91 21 01 	lds	r18, 0x0121
 4a0:	2f 73       	andi	r18, 0x3F	; 63
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	90 81       	ld	r25, Z
 4a6:	92 95       	swap	r25
 4a8:	9f 70       	andi	r25, 0x0F	; 15
 4aa:	81 81       	ldd	r24, Z+1	; 0x01
 4ac:	83 70       	andi	r24, 0x03	; 3
 4ae:	82 95       	swap	r24
 4b0:	80 7f       	andi	r24, 0xF0	; 240
 4b2:	89 2b       	or	r24, r25
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	28 17       	cp	r18, r24
 4b8:	39 07       	cpc	r19, r25
 4ba:	6c f0       	brlt	.+26     	; 0x4d6 <__vector_14+0xe6>
		{
			trans->Ready=true;              //Koniec transakcji
 4bc:	80 81       	ld	r24, Z
 4be:	81 60       	ori	r24, 0x01	; 1
 4c0:	80 83       	st	Z, r24
			if(trans->SelfDel) free_re(trans); //Zwolnij pamiêæ transakcji jeœli tak sobie ¿yczy³ programista
 4c2:	80 81       	ld	r24, Z
 4c4:	81 ff       	sbrs	r24, 1
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__vector_14+0xde>
 4c8:	cf 01       	movw	r24, r30
 4ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <free_re>
			trans=NULL;                     //Koniec transakcji
 4ce:	10 92 23 01 	sts	0x0123, r1
 4d2:	10 92 22 01 	sts	0x0122, r1
		}
		CLR(PORT, HD44780_E);
 4d6:	5a 98       	cbi	0x0b, 2	; 11
	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <LCD_Timer_init>:

void LCD_Timer_init()
{
	TCCR0A=_BV(WGM01);                 //Tryb CTC timera
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	84 bd       	out	0x24, r24	; 36
	OCR0A=F_CPU*LCD_ACCESSTIME/8;      //Nadmiar co 40 us
 4fe:	90 e5       	ldi	r25, 0x50	; 80
 500:	97 bd       	out	0x27, r25	; 39
	TIMSK0=_BV(OCIE0A);                //Odblokuj przerwanie porównania timera
 502:	80 93 6e 00 	sts	0x006E, r24
 506:	08 95       	ret

00000508 <LCD_Init>:
}

void LCD_Init()
{
	hd44780_init();				            //Podstawowa inicjalizacja modu³u
 508:	0e 94 ba 00 	call	0x174	; 0x174 <hd44780_init>
	hd44780_outcmd(HD44780_CLR);	            //Wyczyœæ pamiêæ DDRAM
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_ENTMODE(1, 0));	//Tryb autoinkrementacji AC
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));	//W³¹cz wyœwietlacz, wy³¹cz kursor
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	8c e0       	ldi	r24, 0x0C	; 12
 52c:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0c 94 b4 00 	jmp	0x168	; 0x168 <hd44780_wait_ready>

00000536 <LCD_PutText_B>:
    bool ret=LCD_PutText_B(x, y, txt, trans, true);
	return ret;
}

bool LCD_PutText_B(uint8_t x, uint8_t y, char *txt, LCD_trans *buf, bool autodel)
{
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	7a 01       	movw	r14, r20
 542:	e9 01       	movw	r28, r18
	buf->cmd=LCD_Text;
 544:	98 81       	ld	r25, Y
 546:	93 7f       	andi	r25, 0xF3	; 243
 548:	98 83       	st	Y, r25
	buf->Ready=false;
 54a:	98 81       	ld	r25, Y
 54c:	9e 7f       	andi	r25, 0xFE	; 254
 54e:	98 83       	st	Y, r25
	buf->SelfDel=autodel;  //Czy zwolniæ pamiêæ po zakoñczeniu transakcji
 550:	98 81       	ld	r25, Y
 552:	00 fb       	bst	r16, 0
 554:	91 f9       	bld	r25, 1
 556:	98 83       	st	Y, r25
	buf->data[0]=HD44780_DDADDR(x+y*0x40);   //Ustaw adres w DDRAM
 558:	90 e4       	ldi	r25, 0x40	; 64
 55a:	69 9f       	mul	r22, r25
 55c:	80 0d       	add	r24, r0
 55e:	11 24       	eor	r1, r1
 560:	80 68       	ori	r24, 0x80	; 128
 562:	8a 83       	std	Y+2, r24	; 0x02
	strcpy((char*)&buf->data[1], txt);  //Skopiuj dane tekstowe + NULL
 564:	ba 01       	movw	r22, r20
 566:	c9 01       	movw	r24, r18
 568:	03 96       	adiw	r24, 0x03	; 3
 56a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <strcpy>
	buf->len=strlen(txt) + 1;    //D³ugoœæ tekstu + pozycji + NULL - 1
 56e:	f7 01       	movw	r30, r14
 570:	01 90       	ld	r0, Z+
 572:	00 20       	and	r0, r0
 574:	e9 f7       	brne	.-6      	; 0x570 <LCD_PutText_B+0x3a>
 576:	ee 19       	sub	r30, r14
 578:	9e 2f       	mov	r25, r30
 57a:	92 95       	swap	r25
 57c:	90 7f       	andi	r25, 0xF0	; 240
 57e:	88 81       	ld	r24, Y
 580:	8f 70       	andi	r24, 0x0F	; 15
 582:	89 2b       	or	r24, r25
 584:	88 83       	st	Y, r24
 586:	e2 95       	swap	r30
 588:	e3 70       	andi	r30, 0x03	; 3
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	8c 7f       	andi	r24, 0xFC	; 252
 58e:	8e 2b       	or	r24, r30
 590:	89 83       	std	Y+1, r24	; 0x01
	bool ret=cbAdd(&LCD_TransBuffer, buf);
 592:	be 01       	movw	r22, r28
 594:	84 e2       	ldi	r24, 0x24	; 36
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 b1 01 	call	0x362	; 0x362 <cbAdd>
 59c:	f8 2e       	mov	r15, r24
	if((ret==false) && (autodel)) free_re(buf);    //Brak miejsca w kolejce
 59e:	81 11       	cpse	r24, r1
 5a0:	06 c0       	rjmp	.+12     	; 0x5ae <LCD_PutText_B+0x78>
 5a2:	00 23       	and	r16, r16
 5a4:	21 f0       	breq	.+8      	; 0x5ae <LCD_PutText_B+0x78>
 5a6:	ce 01       	movw	r24, r28
 5a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <free_re>
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <LCD_PutText_B+0x7c>
	        else TCCR0B=_BV(CS01);     //Preskaler /8 - odblokuj timer
 5ae:	82 e0       	ldi	r24, 0x02	; 2
 5b0:	85 bd       	out	0x25, r24	; 37
	return ret;
}
 5b2:	8f 2d       	mov	r24, r15
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	0f 91       	pop	r16
 5ba:	ff 90       	pop	r15
 5bc:	ef 90       	pop	r14
 5be:	08 95       	ret

000005c0 <LCD_PutText>:
	hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));	//W³¹cz wyœwietlacz, wy³¹cz kursor
	hd44780_wait_ready(1000);
}

bool LCD_PutText(uint8_t x, uint8_t y, char *txt)
{
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	00 d0       	rcall	.+0      	; 0x5ca <LCD_PutText+0xa>
 5ca:	1f 92       	push	r1
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	18 2f       	mov	r17, r24
	LCD_trans *trans=malloc_re(sizeof(LCD_trans) + strlen(txt) + 2);
 5d2:	fa 01       	movw	r30, r20
 5d4:	01 90       	ld	r0, Z+
 5d6:	00 20       	and	r0, r0
 5d8:	e9 f7       	brne	.-6      	; 0x5d4 <LCD_PutText+0x14>
 5da:	e4 1b       	sub	r30, r20
 5dc:	f5 0b       	sbc	r31, r21
 5de:	cf 01       	movw	r24, r30
 5e0:	03 96       	adiw	r24, 0x03	; 3
 5e2:	4a 83       	std	Y+2, r20	; 0x02
 5e4:	5b 83       	std	Y+3, r21	; 0x03
 5e6:	69 83       	std	Y+1, r22	; 0x01
 5e8:	0e 94 53 00 	call	0xa6	; 0xa6 <malloc_re>
 5ec:	9c 01       	movw	r18, r24
    bool ret=LCD_PutText_B(x, y, txt, trans, true);
 5ee:	01 e0       	ldi	r16, 0x01	; 1
 5f0:	4a 81       	ldd	r20, Y+2	; 0x02
 5f2:	5b 81       	ldd	r21, Y+3	; 0x03
 5f4:	69 81       	ldd	r22, Y+1	; 0x01
 5f6:	81 2f       	mov	r24, r17
 5f8:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_PutText_B>
	return ret;
}
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	08 95       	ret

0000060c <__divmodhi4>:
 60c:	97 fb       	bst	r25, 7
 60e:	07 2e       	mov	r0, r23
 610:	16 f4       	brtc	.+4      	; 0x616 <__divmodhi4+0xa>
 612:	00 94       	com	r0
 614:	07 d0       	rcall	.+14     	; 0x624 <__divmodhi4_neg1>
 616:	77 fd       	sbrc	r23, 7
 618:	09 d0       	rcall	.+18     	; 0x62c <__divmodhi4_neg2>
 61a:	0e 94 1a 03 	call	0x634	; 0x634 <__udivmodhi4>
 61e:	07 fc       	sbrc	r0, 7
 620:	05 d0       	rcall	.+10     	; 0x62c <__divmodhi4_neg2>
 622:	3e f4       	brtc	.+14     	; 0x632 <__divmodhi4_exit>

00000624 <__divmodhi4_neg1>:
 624:	90 95       	com	r25
 626:	81 95       	neg	r24
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__divmodhi4_neg2>:
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255

00000632 <__divmodhi4_exit>:
 632:	08 95       	ret

00000634 <__udivmodhi4>:
 634:	aa 1b       	sub	r26, r26
 636:	bb 1b       	sub	r27, r27
 638:	51 e1       	ldi	r21, 0x11	; 17
 63a:	07 c0       	rjmp	.+14     	; 0x64a <__udivmodhi4_ep>

0000063c <__udivmodhi4_loop>:
 63c:	aa 1f       	adc	r26, r26
 63e:	bb 1f       	adc	r27, r27
 640:	a6 17       	cp	r26, r22
 642:	b7 07       	cpc	r27, r23
 644:	10 f0       	brcs	.+4      	; 0x64a <__udivmodhi4_ep>
 646:	a6 1b       	sub	r26, r22
 648:	b7 0b       	sbc	r27, r23

0000064a <__udivmodhi4_ep>:
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	5a 95       	dec	r21
 650:	a9 f7       	brne	.-22     	; 0x63c <__udivmodhi4_loop>
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	08 95       	ret

0000065c <malloc>:
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	91 05       	cpc	r25, r1
 664:	10 f4       	brcc	.+4      	; 0x66a <malloc+0xe>
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	e0 91 3c 01 	lds	r30, 0x013C
 66e:	f0 91 3d 01 	lds	r31, 0x013D
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	a0 e0       	ldi	r26, 0x00	; 0
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	30 97       	sbiw	r30, 0x00	; 0
 67c:	39 f1       	breq	.+78     	; 0x6cc <malloc+0x70>
 67e:	40 81       	ld	r20, Z
 680:	51 81       	ldd	r21, Z+1	; 0x01
 682:	48 17       	cp	r20, r24
 684:	59 07       	cpc	r21, r25
 686:	b8 f0       	brcs	.+46     	; 0x6b6 <malloc+0x5a>
 688:	48 17       	cp	r20, r24
 68a:	59 07       	cpc	r21, r25
 68c:	71 f4       	brne	.+28     	; 0x6aa <malloc+0x4e>
 68e:	82 81       	ldd	r24, Z+2	; 0x02
 690:	93 81       	ldd	r25, Z+3	; 0x03
 692:	10 97       	sbiw	r26, 0x00	; 0
 694:	29 f0       	breq	.+10     	; 0x6a0 <malloc+0x44>
 696:	13 96       	adiw	r26, 0x03	; 3
 698:	9c 93       	st	X, r25
 69a:	8e 93       	st	-X, r24
 69c:	12 97       	sbiw	r26, 0x02	; 2
 69e:	2c c0       	rjmp	.+88     	; 0x6f8 <malloc+0x9c>
 6a0:	90 93 3d 01 	sts	0x013D, r25
 6a4:	80 93 3c 01 	sts	0x013C, r24
 6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <malloc+0x9c>
 6aa:	21 15       	cp	r18, r1
 6ac:	31 05       	cpc	r19, r1
 6ae:	31 f0       	breq	.+12     	; 0x6bc <malloc+0x60>
 6b0:	42 17       	cp	r20, r18
 6b2:	53 07       	cpc	r21, r19
 6b4:	18 f0       	brcs	.+6      	; 0x6bc <malloc+0x60>
 6b6:	a9 01       	movw	r20, r18
 6b8:	db 01       	movw	r26, r22
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <malloc+0x62>
 6bc:	ef 01       	movw	r28, r30
 6be:	9a 01       	movw	r18, r20
 6c0:	bd 01       	movw	r22, r26
 6c2:	df 01       	movw	r26, r30
 6c4:	02 80       	ldd	r0, Z+2	; 0x02
 6c6:	f3 81       	ldd	r31, Z+3	; 0x03
 6c8:	e0 2d       	mov	r30, r0
 6ca:	d7 cf       	rjmp	.-82     	; 0x67a <malloc+0x1e>
 6cc:	21 15       	cp	r18, r1
 6ce:	31 05       	cpc	r19, r1
 6d0:	f9 f0       	breq	.+62     	; 0x710 <malloc+0xb4>
 6d2:	28 1b       	sub	r18, r24
 6d4:	39 0b       	sbc	r19, r25
 6d6:	24 30       	cpi	r18, 0x04	; 4
 6d8:	31 05       	cpc	r19, r1
 6da:	80 f4       	brcc	.+32     	; 0x6fc <malloc+0xa0>
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	9b 81       	ldd	r25, Y+3	; 0x03
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	21 f0       	breq	.+8      	; 0x6ee <malloc+0x92>
 6e6:	fb 01       	movw	r30, r22
 6e8:	93 83       	std	Z+3, r25	; 0x03
 6ea:	82 83       	std	Z+2, r24	; 0x02
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <malloc+0x9a>
 6ee:	90 93 3d 01 	sts	0x013D, r25
 6f2:	80 93 3c 01 	sts	0x013C, r24
 6f6:	fe 01       	movw	r30, r28
 6f8:	32 96       	adiw	r30, 0x02	; 2
 6fa:	44 c0       	rjmp	.+136    	; 0x784 <malloc+0x128>
 6fc:	fe 01       	movw	r30, r28
 6fe:	e2 0f       	add	r30, r18
 700:	f3 1f       	adc	r31, r19
 702:	81 93       	st	Z+, r24
 704:	91 93       	st	Z+, r25
 706:	22 50       	subi	r18, 0x02	; 2
 708:	31 09       	sbc	r19, r1
 70a:	39 83       	std	Y+1, r19	; 0x01
 70c:	28 83       	st	Y, r18
 70e:	3a c0       	rjmp	.+116    	; 0x784 <malloc+0x128>
 710:	20 91 3a 01 	lds	r18, 0x013A
 714:	30 91 3b 01 	lds	r19, 0x013B
 718:	23 2b       	or	r18, r19
 71a:	41 f4       	brne	.+16     	; 0x72c <malloc+0xd0>
 71c:	20 91 02 01 	lds	r18, 0x0102
 720:	30 91 03 01 	lds	r19, 0x0103
 724:	30 93 3b 01 	sts	0x013B, r19
 728:	20 93 3a 01 	sts	0x013A, r18
 72c:	20 91 00 01 	lds	r18, 0x0100
 730:	30 91 01 01 	lds	r19, 0x0101
 734:	21 15       	cp	r18, r1
 736:	31 05       	cpc	r19, r1
 738:	41 f4       	brne	.+16     	; 0x74a <malloc+0xee>
 73a:	2d b7       	in	r18, 0x3d	; 61
 73c:	3e b7       	in	r19, 0x3e	; 62
 73e:	40 91 04 01 	lds	r20, 0x0104
 742:	50 91 05 01 	lds	r21, 0x0105
 746:	24 1b       	sub	r18, r20
 748:	35 0b       	sbc	r19, r21
 74a:	e0 91 3a 01 	lds	r30, 0x013A
 74e:	f0 91 3b 01 	lds	r31, 0x013B
 752:	e2 17       	cp	r30, r18
 754:	f3 07       	cpc	r31, r19
 756:	a0 f4       	brcc	.+40     	; 0x780 <malloc+0x124>
 758:	2e 1b       	sub	r18, r30
 75a:	3f 0b       	sbc	r19, r31
 75c:	28 17       	cp	r18, r24
 75e:	39 07       	cpc	r19, r25
 760:	78 f0       	brcs	.+30     	; 0x780 <malloc+0x124>
 762:	ac 01       	movw	r20, r24
 764:	4e 5f       	subi	r20, 0xFE	; 254
 766:	5f 4f       	sbci	r21, 0xFF	; 255
 768:	24 17       	cp	r18, r20
 76a:	35 07       	cpc	r19, r21
 76c:	48 f0       	brcs	.+18     	; 0x780 <malloc+0x124>
 76e:	4e 0f       	add	r20, r30
 770:	5f 1f       	adc	r21, r31
 772:	50 93 3b 01 	sts	0x013B, r21
 776:	40 93 3a 01 	sts	0x013A, r20
 77a:	81 93       	st	Z+, r24
 77c:	91 93       	st	Z+, r25
 77e:	02 c0       	rjmp	.+4      	; 0x784 <malloc+0x128>
 780:	e0 e0       	ldi	r30, 0x00	; 0
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	cf 01       	movw	r24, r30
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	08 95       	ret

0000078c <free>:
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	09 f4       	brne	.+2      	; 0x796 <free+0xa>
 794:	87 c0       	rjmp	.+270    	; 0x8a4 <free+0x118>
 796:	fc 01       	movw	r30, r24
 798:	32 97       	sbiw	r30, 0x02	; 2
 79a:	13 82       	std	Z+3, r1	; 0x03
 79c:	12 82       	std	Z+2, r1	; 0x02
 79e:	c0 91 3c 01 	lds	r28, 0x013C
 7a2:	d0 91 3d 01 	lds	r29, 0x013D
 7a6:	20 97       	sbiw	r28, 0x00	; 0
 7a8:	81 f4       	brne	.+32     	; 0x7ca <free+0x3e>
 7aa:	20 81       	ld	r18, Z
 7ac:	31 81       	ldd	r19, Z+1	; 0x01
 7ae:	28 0f       	add	r18, r24
 7b0:	39 1f       	adc	r19, r25
 7b2:	80 91 3a 01 	lds	r24, 0x013A
 7b6:	90 91 3b 01 	lds	r25, 0x013B
 7ba:	82 17       	cp	r24, r18
 7bc:	93 07       	cpc	r25, r19
 7be:	79 f5       	brne	.+94     	; 0x81e <free+0x92>
 7c0:	f0 93 3b 01 	sts	0x013B, r31
 7c4:	e0 93 3a 01 	sts	0x013A, r30
 7c8:	6d c0       	rjmp	.+218    	; 0x8a4 <free+0x118>
 7ca:	de 01       	movw	r26, r28
 7cc:	20 e0       	ldi	r18, 0x00	; 0
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	ae 17       	cp	r26, r30
 7d2:	bf 07       	cpc	r27, r31
 7d4:	50 f4       	brcc	.+20     	; 0x7ea <free+0x5e>
 7d6:	12 96       	adiw	r26, 0x02	; 2
 7d8:	4d 91       	ld	r20, X+
 7da:	5c 91       	ld	r21, X
 7dc:	13 97       	sbiw	r26, 0x03	; 3
 7de:	9d 01       	movw	r18, r26
 7e0:	41 15       	cp	r20, r1
 7e2:	51 05       	cpc	r21, r1
 7e4:	09 f1       	breq	.+66     	; 0x828 <free+0x9c>
 7e6:	da 01       	movw	r26, r20
 7e8:	f3 cf       	rjmp	.-26     	; 0x7d0 <free+0x44>
 7ea:	b3 83       	std	Z+3, r27	; 0x03
 7ec:	a2 83       	std	Z+2, r26	; 0x02
 7ee:	40 81       	ld	r20, Z
 7f0:	51 81       	ldd	r21, Z+1	; 0x01
 7f2:	84 0f       	add	r24, r20
 7f4:	95 1f       	adc	r25, r21
 7f6:	8a 17       	cp	r24, r26
 7f8:	9b 07       	cpc	r25, r27
 7fa:	71 f4       	brne	.+28     	; 0x818 <free+0x8c>
 7fc:	8d 91       	ld	r24, X+
 7fe:	9c 91       	ld	r25, X
 800:	11 97       	sbiw	r26, 0x01	; 1
 802:	84 0f       	add	r24, r20
 804:	95 1f       	adc	r25, r21
 806:	02 96       	adiw	r24, 0x02	; 2
 808:	91 83       	std	Z+1, r25	; 0x01
 80a:	80 83       	st	Z, r24
 80c:	12 96       	adiw	r26, 0x02	; 2
 80e:	8d 91       	ld	r24, X+
 810:	9c 91       	ld	r25, X
 812:	13 97       	sbiw	r26, 0x03	; 3
 814:	93 83       	std	Z+3, r25	; 0x03
 816:	82 83       	std	Z+2, r24	; 0x02
 818:	21 15       	cp	r18, r1
 81a:	31 05       	cpc	r19, r1
 81c:	29 f4       	brne	.+10     	; 0x828 <free+0x9c>
 81e:	f0 93 3d 01 	sts	0x013D, r31
 822:	e0 93 3c 01 	sts	0x013C, r30
 826:	3e c0       	rjmp	.+124    	; 0x8a4 <free+0x118>
 828:	d9 01       	movw	r26, r18
 82a:	13 96       	adiw	r26, 0x03	; 3
 82c:	fc 93       	st	X, r31
 82e:	ee 93       	st	-X, r30
 830:	12 97       	sbiw	r26, 0x02	; 2
 832:	4d 91       	ld	r20, X+
 834:	5d 91       	ld	r21, X+
 836:	a4 0f       	add	r26, r20
 838:	b5 1f       	adc	r27, r21
 83a:	ea 17       	cp	r30, r26
 83c:	fb 07       	cpc	r31, r27
 83e:	79 f4       	brne	.+30     	; 0x85e <free+0xd2>
 840:	80 81       	ld	r24, Z
 842:	91 81       	ldd	r25, Z+1	; 0x01
 844:	84 0f       	add	r24, r20
 846:	95 1f       	adc	r25, r21
 848:	02 96       	adiw	r24, 0x02	; 2
 84a:	d9 01       	movw	r26, r18
 84c:	11 96       	adiw	r26, 0x01	; 1
 84e:	9c 93       	st	X, r25
 850:	8e 93       	st	-X, r24
 852:	82 81       	ldd	r24, Z+2	; 0x02
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	13 96       	adiw	r26, 0x03	; 3
 858:	9c 93       	st	X, r25
 85a:	8e 93       	st	-X, r24
 85c:	12 97       	sbiw	r26, 0x02	; 2
 85e:	e0 e0       	ldi	r30, 0x00	; 0
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	9b 81       	ldd	r25, Y+3	; 0x03
 866:	00 97       	sbiw	r24, 0x00	; 0
 868:	19 f0       	breq	.+6      	; 0x870 <free+0xe4>
 86a:	fe 01       	movw	r30, r28
 86c:	ec 01       	movw	r28, r24
 86e:	f9 cf       	rjmp	.-14     	; 0x862 <free+0xd6>
 870:	ce 01       	movw	r24, r28
 872:	02 96       	adiw	r24, 0x02	; 2
 874:	28 81       	ld	r18, Y
 876:	39 81       	ldd	r19, Y+1	; 0x01
 878:	82 0f       	add	r24, r18
 87a:	93 1f       	adc	r25, r19
 87c:	20 91 3a 01 	lds	r18, 0x013A
 880:	30 91 3b 01 	lds	r19, 0x013B
 884:	28 17       	cp	r18, r24
 886:	39 07       	cpc	r19, r25
 888:	69 f4       	brne	.+26     	; 0x8a4 <free+0x118>
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	29 f4       	brne	.+10     	; 0x898 <free+0x10c>
 88e:	10 92 3d 01 	sts	0x013D, r1
 892:	10 92 3c 01 	sts	0x013C, r1
 896:	02 c0       	rjmp	.+4      	; 0x89c <free+0x110>
 898:	13 82       	std	Z+3, r1	; 0x03
 89a:	12 82       	std	Z+2, r1	; 0x02
 89c:	d0 93 3b 01 	sts	0x013B, r29
 8a0:	c0 93 3a 01 	sts	0x013A, r28
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <strcat>:
 8aa:	fb 01       	movw	r30, r22
 8ac:	dc 01       	movw	r26, r24
 8ae:	0d 90       	ld	r0, X+
 8b0:	00 20       	and	r0, r0
 8b2:	e9 f7       	brne	.-6      	; 0x8ae <strcat+0x4>
 8b4:	11 97       	sbiw	r26, 0x01	; 1
 8b6:	01 90       	ld	r0, Z+
 8b8:	0d 92       	st	X+, r0
 8ba:	00 20       	and	r0, r0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <strcat+0xc>
 8be:	08 95       	ret

000008c0 <strcpy>:
 8c0:	fb 01       	movw	r30, r22
 8c2:	dc 01       	movw	r26, r24
 8c4:	01 90       	ld	r0, Z+
 8c6:	0d 92       	st	X+, r0
 8c8:	00 20       	and	r0, r0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <strcpy+0x4>
 8cc:	08 95       	ret

000008ce <__utoa_ncheck>:
 8ce:	bb 27       	eor	r27, r27

000008d0 <__utoa_common>:
 8d0:	fb 01       	movw	r30, r22
 8d2:	55 27       	eor	r21, r21
 8d4:	aa 27       	eor	r26, r26
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	aa 1f       	adc	r26, r26
 8dc:	a4 17       	cp	r26, r20
 8de:	10 f0       	brcs	.+4      	; 0x8e4 <__utoa_common+0x14>
 8e0:	a4 1b       	sub	r26, r20
 8e2:	83 95       	inc	r24
 8e4:	50 51       	subi	r21, 0x10	; 16
 8e6:	b9 f7       	brne	.-18     	; 0x8d6 <__utoa_common+0x6>
 8e8:	a0 5d       	subi	r26, 0xD0	; 208
 8ea:	aa 33       	cpi	r26, 0x3A	; 58
 8ec:	08 f0       	brcs	.+2      	; 0x8f0 <__utoa_common+0x20>
 8ee:	a9 5d       	subi	r26, 0xD9	; 217
 8f0:	a1 93       	st	Z+, r26
 8f2:	00 97       	sbiw	r24, 0x00	; 0
 8f4:	79 f7       	brne	.-34     	; 0x8d4 <__utoa_common+0x4>
 8f6:	b1 11       	cpse	r27, r1
 8f8:	b1 93       	st	Z+, r27
 8fa:	11 92       	st	Z+, r1
 8fc:	cb 01       	movw	r24, r22
 8fe:	0c 94 81 04 	jmp	0x902	; 0x902 <strrev>

00000902 <strrev>:
 902:	dc 01       	movw	r26, r24
 904:	fc 01       	movw	r30, r24
 906:	67 2f       	mov	r22, r23
 908:	71 91       	ld	r23, Z+
 90a:	77 23       	and	r23, r23
 90c:	e1 f7       	brne	.-8      	; 0x906 <strrev+0x4>
 90e:	32 97       	sbiw	r30, 0x02	; 2
 910:	04 c0       	rjmp	.+8      	; 0x91a <strrev+0x18>
 912:	7c 91       	ld	r23, X
 914:	6d 93       	st	X+, r22
 916:	70 83       	st	Z, r23
 918:	62 91       	ld	r22, -Z
 91a:	ae 17       	cp	r26, r30
 91c:	bf 07       	cpc	r27, r31
 91e:	c8 f3       	brcs	.-14     	; 0x912 <strrev+0x10>
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
