
SPI-595-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d7  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014e  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000103  00000000  00000000  000005a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bb  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_17>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e0 e9       	ldi	r30, 0x90	; 144
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a5 30       	cpi	r26, 0x05	; 5
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  aa:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_17>:
{
	PORTB&=~(_BV(PB2));
}

ISR(SPI_STC_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	static struct ISR_Status status;

	if(status.byte==0)
  c6:	80 91 00 01 	lds	r24, 0x0100
  ca:	84 fd       	sbrc	r24, 4
  cc:	1a c0       	rjmp	.+52     	; 0x102 <__vector_17+0x50>
	uint8_t byte : 1;
};

static inline void SPI_Set_SS()
{
	PORTB|=_BV(PB2);
  ce:	2a 9a       	sbi	0x05, 2	; 5
	static struct ISR_Status status;

	if(status.byte==0)
	{
		SPI_Set_SS();          //Przepisz zawartoœæ rejestru do zatrzasków wyjœciowych
		asm volatile ("nop");  //Konieczne ze wzglêdu na synchronizator
  d0:	00 00       	nop
	PORTB|=_BV(PB2);
}

static inline void SPI_Reset_SS()
{
	PORTB&=~(_BV(PB2));
  d2:	2a 98       	cbi	0x05, 2	; 5
	{
		SPI_Set_SS();          //Przepisz zawartoœæ rejestru do zatrzasków wyjœciowych
		asm volatile ("nop");  //Konieczne ze wzglêdu na synchronizator
		SPI_Reset_SS();        //Wsuwamy now¹ wartoœæ
		uint8_t tmp=0xFF;
		uint8_t val=LEDDIGITS[status.no];  //Cyfra do wyœwietlenia
  d4:	e0 91 00 01 	lds	r30, 0x0100
  d8:	ef 70       	andi	r30, 0x0F	; 15
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ef 5f       	subi	r30, 0xFF	; 255
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	20 81       	ld	r18, Z
		if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F]; //Jej reprezentacja na LED
  e2:	82 2f       	mov	r24, r18
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	8b 30       	cpi	r24, 0x0B	; 11
  ea:	91 05       	cpc	r25, r1
  ec:	2c f4       	brge	.+10     	; 0xf8 <__vector_17+0x46>
  ee:	fc 01       	movw	r30, r24
  f0:	e8 59       	subi	r30, 0x98	; 152
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	84 91       	lpm	r24, Z
  f6:	01 c0       	rjmp	.+2      	; 0xfa <__vector_17+0x48>
	if(status.byte==0)
	{
		SPI_Set_SS();          //Przepisz zawartoœæ rejestru do zatrzasków wyjœciowych
		asm volatile ("nop");  //Konieczne ze wzglêdu na synchronizator
		SPI_Reset_SS();        //Wsuwamy now¹ wartoœæ
		uint8_t tmp=0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
		uint8_t val=LEDDIGITS[status.no];  //Cyfra do wyœwietlenia
		if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F]; //Jej reprezentacja na LED
		if(val & DP) tmp&=~(DP); //Kropka dziesiêtna
  fa:	27 fd       	sbrc	r18, 7
  fc:	8f 77       	andi	r24, 0x7F	; 127
		SPDR=tmp;  //Wyœlij dane o wyœwietlanej cyfrze
  fe:	8e bd       	out	0x2e, r24	; 46
 100:	13 c0       	rjmp	.+38     	; 0x128 <__vector_17+0x76>
	}
	else
	{
		SPDR=~(1<<status.no);	//Wybierz wyœwietlacz
 102:	28 2f       	mov	r18, r24
 104:	2f 70       	andi	r18, 0x0F	; 15
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_17+0x5c>
 10c:	88 0f       	add	r24, r24
 10e:	2a 95       	dec	r18
 110:	ea f7       	brpl	.-6      	; 0x10c <__vector_17+0x5a>
 112:	80 95       	com	r24
 114:	8e bd       	out	0x2e, r24	; 46
		status.no=(status.no+1)%LEDDISPNO;
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	98 0f       	add	r25, r24
 11e:	93 70       	andi	r25, 0x03	; 3
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	89 2b       	or	r24, r25
 124:	80 93 00 01 	sts	0x0100, r24
	}
	status.byte^=1;
 128:	90 91 00 01 	lds	r25, 0x0100
 12c:	94 fb       	bst	r25, 4
 12e:	88 27       	eor	r24, r24
 130:	80 f9       	bld	r24, 0
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	82 27       	eor	r24, r18
 136:	80 fb       	bst	r24, 0
 138:	94 f9       	bld	r25, 4
 13a:	90 93 00 01 	sts	0x0100, r25
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <SPI_master_init>:
	uint8_t byte : 1;
};

static inline void SPI_Set_SS()
{
	PORTB|=_BV(PB2);
 152:	2a 9a       	sbi	0x05, 2	; 5
}

void SPI_master_init()
{
	SPI_Set_SS();
	DDRB|=(_BV(PB2) | _BV(PB3) | _BV(PB5));	//Piny SS, MOSI, SCK jako wyjœcie
 154:	84 b1       	in	r24, 0x04	; 4
 156:	8c 62       	ori	r24, 0x2C	; 44
 158:	84 b9       	out	0x04, r24	; 4
	SPCR=_BV(SPIE) | _BV(SPE) | _BV(MSTR); //Tryb master, CLK/128, przerwania
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	8c bd       	out	0x2c, r24	; 44
	SPCR|=_BV(SPR1) | _BV(SPR0);
 15e:	8c b5       	in	r24, 0x2c	; 44
 160:	83 60       	ori	r24, 0x03	; 3
 162:	8c bd       	out	0x2c, r24	; 44
	SPSR;
 164:	8d b5       	in	r24, 0x2d	; 45
	SPDR; //Skasuj flagê SPIF
 166:	8e b5       	in	r24, 0x2e	; 46
 168:	08 95       	ret

0000016a <main>:
}

int main()
{
	SPI_master_init();
 16a:	0e 94 a9 00 	call	0x152	; 0x152 <SPI_master_init>

	sei();
 16e:	78 94       	sei

	LEDDIGITS[0]=1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 01 01 	sts	0x0101, r24
	LEDDIGITS[1]=2;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 02 01 	sts	0x0102, r24
	LEDDIGITS[2]=3;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	80 93 03 01 	sts	0x0103, r24
	LEDDIGITS[3]=4;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 04 01 	sts	0x0104, r24

	SPDR=0; //Zainicjuj przerwania SPI
 188:	1e bc       	out	0x2e, r1	; 46
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x20>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
