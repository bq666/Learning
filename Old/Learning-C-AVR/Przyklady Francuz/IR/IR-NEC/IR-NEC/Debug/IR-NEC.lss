
IR-NEC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000472  00000506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000472  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800100  00800100  00000506  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000506  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b1  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051d  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000409  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000608  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_10>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_11>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  58:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  5c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  60:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	50 6f       	ori	r21, 0xF0	; 240
  6a:	77 74       	andi	r23, 0x47	; 71
  6c:	6f 72       	andi	r22, 0x2F	; 47
  6e:	7a 65       	ori	r23, 0x5A	; 90
  70:	6e 69       	ori	r22, 0x9E	; 158
  72:	65 00       	.word	0x0065	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a0 33       	cpi	r26, 0x30	; 48
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  94:	0c 94 37 02 	jmp	0x46e	; 0x46e <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <__vector_11>:
volatile uint8_t  IR_recpos;     //Nr aktualnie odbieranego bitu

CircBuffer IR_CMD_Buffer; //Instancja bufora ko³owego przechowuj¹cego polecenia

ISR(TIMER1_COMPA_vect)
{
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	3f 93       	push	r19
  aa:	4f 93       	push	r20
  ac:	5f 93       	push	r21
  ae:	6f 93       	push	r22
  b0:	7f 93       	push	r23
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	af 93       	push	r26
  b8:	bf 93       	push	r27
  ba:	ef 93       	push	r30
  bc:	ff 93       	push	r31
	if((IR_State==IR_NEC_Receiving) && (IR_recpos==0))
  be:	80 91 2e 01 	lds	r24, 0x012E
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	59 f4       	brne	.+22     	; 0xdc <__vector_11+0x40>
  c6:	80 91 2f 01 	lds	r24, 0x012F
  ca:	81 11       	cpse	r24, r1
  cc:	07 c0       	rjmp	.+14     	; 0xdc <__vector_11+0x40>
	cb_Add(&IR_CMD_Buffer, IR_NEC_RPTLASTCMD);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	5f ef       	ldi	r21, 0xFF	; 255
  d2:	ba 01       	movw	r22, r20
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <cb_Add>
	IR_State=IR_NEC_Nothing;      //B³¹d transmisji lub powtórzenie - restart maszyny stanów
  dc:	10 92 2e 01 	sts	0x012E, r1
}
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	bf 91       	pop	r27
  e6:	af 91       	pop	r26
  e8:	9f 91       	pop	r25
  ea:	8f 91       	pop	r24
  ec:	7f 91       	pop	r23
  ee:	6f 91       	pop	r22
  f0:	5f 91       	pop	r21
  f2:	4f 91       	pop	r20
  f4:	3f 91       	pop	r19
  f6:	2f 91       	pop	r18
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	3f 93       	push	r19
 110:	4f 93       	push	r20
 112:	5f 93       	push	r21
 114:	6f 93       	push	r22
 116:	7f 93       	push	r23
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	static uint32_t IR_RecCmd;   //Odebrana komenda z pilota
	
	TCNT1=0;             //Coœ odebraliœmy wiêc zerujemy licznik
 124:	10 92 85 00 	sts	0x0085, r1
 128:	10 92 84 00 	sts	0x0084, r1
	uint16_t cca=ICR1;   //Odczytaj marker czasowy
 12c:	20 91 86 00 	lds	r18, 0x0086
 130:	30 91 87 00 	lds	r19, 0x0087
	uint8_t flag=TCCR1B & _BV(ICES1);  //Zbocze, które wywo³a³o zdarzenie
 134:	80 91 81 00 	lds	r24, 0x0081
 138:	80 74       	andi	r24, 0x40	; 64
	TCCR1B^=_BV(ICES1);  //Zmieñ zbocze wywo³uj¹ce zdarzenie na przeciwne
 13a:	90 91 81 00 	lds	r25, 0x0081
 13e:	40 e4       	ldi	r20, 0x40	; 64
 140:	94 27       	eor	r25, r20
 142:	90 93 81 00 	sts	0x0081, r25

	switch(IR_State)
 146:	90 91 2e 01 	lds	r25, 0x012E
 14a:	91 30       	cpi	r25, 0x01	; 1
 14c:	b1 f0       	breq	.+44     	; 0x17a <__vector_10+0x78>
 14e:	28 f0       	brcs	.+10     	; 0x15a <__vector_10+0x58>
 150:	92 30       	cpi	r25, 0x02	; 2
 152:	d1 f0       	breq	.+52     	; 0x188 <__vector_10+0x86>
 154:	93 30       	cpi	r25, 0x03	; 3
 156:	e1 f0       	breq	.+56     	; 0x190 <__vector_10+0x8e>
 158:	4c c0       	rjmp	.+152    	; 0x1f2 <__vector_10+0xf0>
	{
		case IR_NEC_Nothing:
		if(flag==0)
 15a:	81 11       	cpse	r24, r1
 15c:	4a c0       	rjmp	.+148    	; 0x1f2 <__vector_10+0xf0>
		{
			IR_State=IR_NEC_Trailer;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 2e 01 	sts	0x012E, r24
			IR_recpos=0;
 164:	10 92 2f 01 	sts	0x012F, r1
			IR_RecCmd=0;
 168:	10 92 00 01 	sts	0x0100, r1
 16c:	10 92 01 01 	sts	0x0101, r1
 170:	10 92 02 01 	sts	0x0102, r1
 174:	10 92 03 01 	sts	0x0103, r1
 178:	3c c0       	rjmp	.+120    	; 0x1f2 <__vector_10+0xf0>
		}
		break;

		case IR_NEC_Trailer:
		if((cca>IR_CalcTime((IR_NEC_PULSE-IR_NEC_TOLERANCE)*IR_NEC_TRAILER))  //Koniec odbioru trailera
 17a:	21 53       	subi	r18, 0x31	; 49
 17c:	37 40       	sbci	r19, 0x07	; 7
 17e:	2f 31       	cpi	r18, 0x1F	; 31
 180:	33 40       	sbci	r19, 0x03	; 3
 182:	b8 f5       	brcc	.+110    	; 0x1f2 <__vector_10+0xf0>
		&& ((cca<IR_CalcTime((IR_NEC_PULSE+IR_NEC_TOLERANCE)*IR_NEC_TRAILER))))
		IR_State=IR_NEC_FirstBit;
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	01 c0       	rjmp	.+2      	; 0x18a <__vector_10+0x88>
		break;

		case IR_NEC_FirstBit:
		IR_State=IR_NEC_Receiving;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	80 93 2e 01 	sts	0x012E, r24
		break;
 18e:	31 c0       	rjmp	.+98     	; 0x1f2 <__vector_10+0xf0>

		case IR_NEC_Receiving:
		if(flag==0)
 190:	81 11       	cpse	r24, r1
 192:	2f c0       	rjmp	.+94     	; 0x1f2 <__vector_10+0xf0>
		{
			IR_RecCmd<<=1;
 194:	80 91 00 01 	lds	r24, 0x0100
 198:	90 91 01 01 	lds	r25, 0x0101
 19c:	a0 91 02 01 	lds	r26, 0x0102
 1a0:	b0 91 03 01 	lds	r27, 0x0103
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	aa 1f       	adc	r26, r26
 1aa:	bb 1f       	adc	r27, r27
			if(cca>IR_CalcTime((IR_NEC_PULSE+IR_NEC_TOLERANCE)*IR_NEC_ZERO)) IR_RecCmd|=1;
 1ac:	2b 34       	cpi	r18, 0x4B	; 75
 1ae:	31 40       	sbci	r19, 0x01	; 1
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <__vector_10+0xb2>
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	80 93 00 01 	sts	0x0100, r24
 1b8:	90 93 01 01 	sts	0x0101, r25
 1bc:	a0 93 02 01 	sts	0x0102, r26
 1c0:	b0 93 03 01 	sts	0x0103, r27
			++IR_recpos;
 1c4:	80 91 2f 01 	lds	r24, 0x012F
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	80 93 2f 01 	sts	0x012F, r24
			if(IR_recpos==IR_BITSNO)
 1ce:	80 91 2f 01 	lds	r24, 0x012F
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	71 f4       	brne	.+28     	; 0x1f2 <__vector_10+0xf0>
			{
				IR_State=IR_NEC_Nothing;
 1d6:	10 92 2e 01 	sts	0x012E, r1
				cb_Add(&IR_CMD_Buffer, IR_RecCmd);  //Dodaj odebrane polecenie do bufora
 1da:	40 91 00 01 	lds	r20, 0x0100
 1de:	50 91 01 01 	lds	r21, 0x0101
 1e2:	60 91 02 01 	lds	r22, 0x0102
 1e6:	70 91 03 01 	lds	r23, 0x0103
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <cb_Add>
			}
		}
		break;
	}
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <IR_init>:

void IR_init()
{
	PORTB|=_BV(PB0);   //PB0 (ICP1) jest wejœciem z podci¹ganiem do 1
 214:	28 9a       	sbi	0x05, 0	; 5
	OCR1A=IR_CalcTime((IR_NEC_PULSE+IR_NEC_TOLERANCE)*IR_NEC_TRAILER);         //Okres timera
 216:	80 e5       	ldi	r24, 0x50	; 80
 218:	9a e0       	ldi	r25, 0x0A	; 10
 21a:	90 93 89 00 	sts	0x0089, r25
 21e:	80 93 88 00 	sts	0x0088, r24
	TCCR1A=0;                  //Od³¹cz piny OCx, wybierz tryb CTC
 222:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=_BV(ICNC1) | _BV(WGM12) | _BV(CS11) | _BV(CS10);  // wybierz tryb 4, OCR1A okreœla top, preskaler 64, noise canceller, zdarzenie na opadaj¹cym zboczu
 226:	8b e8       	ldi	r24, 0x8B	; 139
 228:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=_BV(ICIE1) | _BV(OCIE1A);       //Odblokuj przerwanie compare match z OC1A oraz przerwanie przechwycenia zdarzenia	
 22c:	82 e2       	ldi	r24, 0x22	; 34
 22e:	80 93 6f 00 	sts	0x006F, r24
 232:	08 95       	ret

00000234 <main>:
}

int main(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2d 97       	sbiw	r28, 0x0d	; 13
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	char bufor[13];
	
	USART_init();
 248:	0e 94 cc 01 	call	0x398	; 0x398 <USART_init>
	IR_init();
 24c:	0e 94 0a 01 	call	0x214	; 0x214 <IR_init>
	sei();
 250:	78 94       	sei
			CB_Element cmd=cb_Read(&IR_CMD_Buffer);
			if(cmd!=IR_NEC_RPTLASTCMD)
			{
				ultoa(cmd, bufor, 16);
				USART_send(bufor);
			} else USART_send(PSTR("Powtorzenie"));
 252:	88 e6       	ldi	r24, 0x68	; 104
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	6c 01       	movw	r12, r24
 258:	e1 2c       	mov	r14, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 25a:	8e 01       	movw	r16, r28
 25c:	0f 5f       	subi	r16, 0xFF	; 255
 25e:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			CB_Element cmd=cb_Read(&IR_CMD_Buffer);
			if(cmd!=IR_NEC_RPTLASTCMD)
			{
				ultoa(cmd, bufor, 16);
				USART_send(bufor);
 260:	38 01       	movw	r6, r16
 262:	20 e8       	ldi	r18, 0x80	; 128
 264:	82 2e       	mov	r8, r18
	return cb->Count == CB_MAXTRANS;
}

static inline bool cb_IsEmpty(CircBuffer *cb)
{
	return cb->Count == 0;
 266:	80 91 2d 01 	lds	r24, 0x012D
	USART_init();
	IR_init();
	sei();
	while(1)
	{
		if(cb_IsEmpty(&IR_CMD_Buffer)==false)
 26a:	88 23       	and	r24, r24
 26c:	e1 f3       	breq	.-8      	; 0x266 <main+0x32>
		{
			CB_Element cmd=cb_Read(&IR_CMD_Buffer);
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 7d 01 	call	0x2fa	; 0x2fa <cb_Read>
			if(cmd!=IR_NEC_RPTLASTCMD)
 276:	6f 3f       	cpi	r22, 0xFF	; 255
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	72 07       	cpc	r23, r18
 27c:	82 07       	cpc	r24, r18
 27e:	92 07       	cpc	r25, r18
 280:	39 f0       	breq	.+14     	; 0x290 <main+0x5c>
 282:	20 e1       	ldi	r18, 0x10	; 16
 284:	a8 01       	movw	r20, r16
 286:	0e 94 05 02 	call	0x40a	; 0x40a <__ultoa_ncheck>
			{
				ultoa(cmd, bufor, 16);
				USART_send(bufor);
 28a:	88 2d       	mov	r24, r8
 28c:	b3 01       	movw	r22, r6
 28e:	02 c0       	rjmp	.+4      	; 0x294 <main+0x60>
			} else USART_send(PSTR("Powtorzenie"));
 290:	8e 2d       	mov	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	0e 94 b6 01 	call	0x36c	; 0x36c <USART_send>
			USART_putchar('\n');
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	0e 94 af 01 	call	0x35e	; 0x35e <USART_putchar>
			USART_putchar('\r');
 29e:	8d e0       	ldi	r24, 0x0D	; 13
 2a0:	0e 94 af 01 	call	0x35e	; 0x35e <USART_putchar>
 2a4:	e0 cf       	rjmp	.-64     	; 0x266 <main+0x32>

000002a6 <cb_Add>:

#include <util/atomic.h>
#include "RingBuffer.h"

bool cb_Add(CircBuffer *cb, CB_Element elem)
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	fc 01       	movw	r30, r24
 2ac:	8a 01       	movw	r16, r20
 2ae:	9b 01       	movw	r18, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2b0:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2b2:	f8 94       	cli
	volatile uint8_t Count;            //Liczba elementów w buforze
} CircBuffer;

static inline bool cb_IsFull(CircBuffer *cb)
{
	return cb->Count == CB_MAXTRANS;
 2b4:	81 a5       	ldd	r24, Z+41	; 0x29
	{
		if(cb_IsFull(cb)) return false;         //Czy jest miejsce w kolejce?
 2b6:	8a 30       	cpi	r24, 0x0A	; 10
 2b8:	19 f4       	brne	.+6      	; 0x2c0 <cb_Add+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2ba:	4f bf       	out	0x3f, r20	; 63
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	1a c0       	rjmp	.+52     	; 0x2f4 <cb_Add+0x4e>
		uint8_t end = (cb->Beg + cb->Count) % CB_MAXTRANS;
 2c0:	81 a5       	ldd	r24, Z+41	; 0x29
 2c2:	50 a5       	ldd	r21, Z+40	; 0x28
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	85 0f       	add	r24, r21
 2c8:	91 1d       	adc	r25, r1
 2ca:	6a e0       	ldi	r22, 0x0A	; 10
 2cc:	70 e0       	ldi	r23, 0x00	; 0
 2ce:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
		cb->elements[end] = elem;              //Dodaj transakcjê
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	8e 0f       	add	r24, r30
 2dc:	9f 1f       	adc	r25, r31
 2de:	dc 01       	movw	r26, r24
 2e0:	0d 93       	st	X+, r16
 2e2:	1d 93       	st	X+, r17
 2e4:	2d 93       	st	X+, r18
 2e6:	3c 93       	st	X, r19
 2e8:	13 97       	sbiw	r26, 0x03	; 3
		++cb->Count;                           //Liczba elementów w buforze
 2ea:	81 a5       	ldd	r24, Z+41	; 0x29
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	81 a7       	std	Z+41, r24	; 0x29
 2f0:	4f bf       	out	0x3f, r20	; 63
	}
	return true;      //Wszystko ok
 2f2:	81 e0       	ldi	r24, 0x01	; 1
}
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <cb_Read>:

CB_Element cb_Read(CircBuffer *cb)
{
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	fc 01       	movw	r30, r24
	CB_Element elem;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 302:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 304:	f8 94       	cli
}

static inline bool cb_IsEmpty(CircBuffer *cb)
{
	return cb->Count == 0;
 306:	81 a5       	ldd	r24, Z+41	; 0x29
	{
		if(cb_IsEmpty(cb)) return 0;       //Bufor pusty, nie mo¿na zwróciæ elementu
 308:	81 11       	cpse	r24, r1
 30a:	05 c0       	rjmp	.+10     	; 0x316 <cb_Read+0x1c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 30c:	3f bf       	out	0x3f, r19	; 63
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	20 c0       	rjmp	.+64     	; 0x356 <cb_Read+0x5c>
		elem = cb->elements[cb->Beg];
 316:	20 a5       	ldd	r18, Z+40	; 0x28
 318:	82 2f       	mov	r24, r18
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	df 01       	movw	r26, r30
 31e:	44 e0       	ldi	r20, 0x04	; 4
 320:	24 9f       	mul	r18, r20
 322:	a0 0d       	add	r26, r0
 324:	b1 1d       	adc	r27, r1
 326:	11 24       	eor	r1, r1
 328:	1c 91       	ld	r17, X
 32a:	11 96       	adiw	r26, 0x01	; 1
 32c:	dc 91       	ld	r29, X
 32e:	11 97       	sbiw	r26, 0x01	; 1
 330:	12 96       	adiw	r26, 0x02	; 2
 332:	cc 91       	ld	r28, X
 334:	12 97       	sbiw	r26, 0x02	; 2
 336:	13 96       	adiw	r26, 0x03	; 3
 338:	4c 91       	ld	r20, X
		cb->Beg = (cb->Beg + 1) % CB_MAXTRANS;
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	6a e0       	ldi	r22, 0x0A	; 10
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	0e 94 dd 01 	call	0x3ba	; 0x3ba <__divmodhi4>
 344:	80 a7       	std	Z+40, r24	; 0x28
		-- cb->Count;                        //Zmniejszamy liczbê elementów pozosta³ych
 346:	21 a5       	ldd	r18, Z+41	; 0x29
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	21 a7       	std	Z+41, r18	; 0x29
 34c:	3f bf       	out	0x3f, r19	; 63
	}		                                 //w buforze
	return elem;
 34e:	61 2f       	mov	r22, r17
 350:	7d 2f       	mov	r23, r29
 352:	8c 2f       	mov	r24, r28
 354:	94 2f       	mov	r25, r20
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	08 95       	ret

0000035e <USART_putchar>:
#include <avr/pgmspace.h>


void USART_putchar(char ch)
{
	while(!(UCSR0A & _BV(UDRE0)));  //Zaczekaj na miejsce w buforze nadawczym
 35e:	90 91 c0 00 	lds	r25, 0x00C0
 362:	95 ff       	sbrs	r25, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <USART_putchar>
	UDR0=ch;
 366:	80 93 c6 00 	sts	0x00C6, r24
 36a:	08 95       	ret

0000036c <USART_send>:
}

void USART_send(const char __memx *txt)
{
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	6b 01       	movw	r12, r22
 374:	e8 2e       	mov	r14, r24
	while(*txt)
 376:	f6 01       	movw	r30, r12
 378:	84 91       	lpm	r24, Z
 37a:	e7 fc       	sbrc	r14, 7
 37c:	80 81       	ld	r24, Z
 37e:	88 23       	and	r24, r24
 380:	39 f0       	breq	.+14     	; 0x390 <USART_send+0x24>
	{
		USART_putchar(*txt);
 382:	0e 94 af 01 	call	0x35e	; 0x35e <USART_putchar>
		++txt;
 386:	8f ef       	ldi	r24, 0xFF	; 255
 388:	c8 1a       	sub	r12, r24
 38a:	d8 0a       	sbc	r13, r24
 38c:	e8 0a       	sbc	r14, r24
 38e:	f3 cf       	rjmp	.-26     	; 0x376 <USART_send+0xa>
	}
}
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	08 95       	ret

00000398 <USART_init>:

static void uart_9600()
{
	#define BAUD 9600
	#include <util/setbaud.h>
	UBRR0H = UBRRH_VALUE;
 398:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
 39c:	87 e6       	ldi	r24, 0x67	; 103
 39e:	80 93 c4 00 	sts	0x00C4, r24
	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#else
	UCSR0A &= ~(1 << U2X0);
 3a2:	e0 ec       	ldi	r30, 0xC0	; 192
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	8d 7f       	andi	r24, 0xFD	; 253
 3aa:	80 83       	st	Z, r24
}

void USART_init()
{
	uart_9600();  //Ustal szybkoœæ transferu na 9600 bps
	UCSR0B=_BV(RXEN0) | _BV(TXEN0);  //Odblokuj nadajnik i odbiornik
 3ac:	88 e1       	ldi	r24, 0x18	; 24
 3ae:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=_BV(UCSZ00) | _BV(UCSZ01); //8 bitów danych + 1 bit stopu
 3b2:	86 e0       	ldi	r24, 0x06	; 6
 3b4:	80 93 c2 00 	sts	0x00C2, r24
 3b8:	08 95       	ret

000003ba <__divmodhi4>:
 3ba:	97 fb       	bst	r25, 7
 3bc:	07 2e       	mov	r0, r23
 3be:	16 f4       	brtc	.+4      	; 0x3c4 <__divmodhi4+0xa>
 3c0:	00 94       	com	r0
 3c2:	07 d0       	rcall	.+14     	; 0x3d2 <__divmodhi4_neg1>
 3c4:	77 fd       	sbrc	r23, 7
 3c6:	09 d0       	rcall	.+18     	; 0x3da <__divmodhi4_neg2>
 3c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__udivmodhi4>
 3cc:	07 fc       	sbrc	r0, 7
 3ce:	05 d0       	rcall	.+10     	; 0x3da <__divmodhi4_neg2>
 3d0:	3e f4       	brtc	.+14     	; 0x3e0 <__divmodhi4_exit>

000003d2 <__divmodhi4_neg1>:
 3d2:	90 95       	com	r25
 3d4:	81 95       	neg	r24
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	08 95       	ret

000003da <__divmodhi4_neg2>:
 3da:	70 95       	com	r23
 3dc:	61 95       	neg	r22
 3de:	7f 4f       	sbci	r23, 0xFF	; 255

000003e0 <__divmodhi4_exit>:
 3e0:	08 95       	ret

000003e2 <__udivmodhi4>:
 3e2:	aa 1b       	sub	r26, r26
 3e4:	bb 1b       	sub	r27, r27
 3e6:	51 e1       	ldi	r21, 0x11	; 17
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <__udivmodhi4_ep>

000003ea <__udivmodhi4_loop>:
 3ea:	aa 1f       	adc	r26, r26
 3ec:	bb 1f       	adc	r27, r27
 3ee:	a6 17       	cp	r26, r22
 3f0:	b7 07       	cpc	r27, r23
 3f2:	10 f0       	brcs	.+4      	; 0x3f8 <__udivmodhi4_ep>
 3f4:	a6 1b       	sub	r26, r22
 3f6:	b7 0b       	sbc	r27, r23

000003f8 <__udivmodhi4_ep>:
 3f8:	88 1f       	adc	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	5a 95       	dec	r21
 3fe:	a9 f7       	brne	.-22     	; 0x3ea <__udivmodhi4_loop>
 400:	80 95       	com	r24
 402:	90 95       	com	r25
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	08 95       	ret

0000040a <__ultoa_ncheck>:
 40a:	bb 27       	eor	r27, r27

0000040c <__ultoa_common>:
 40c:	fa 01       	movw	r30, r20
 40e:	a6 2f       	mov	r26, r22
 410:	62 17       	cp	r22, r18
 412:	71 05       	cpc	r23, r1
 414:	81 05       	cpc	r24, r1
 416:	91 05       	cpc	r25, r1
 418:	33 0b       	sbc	r19, r19
 41a:	30 fb       	bst	r19, 0
 41c:	66 f0       	brts	.+24     	; 0x436 <__ultoa_common+0x2a>
 41e:	aa 27       	eor	r26, r26
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	aa 1f       	adc	r26, r26
 42a:	a2 17       	cp	r26, r18
 42c:	10 f0       	brcs	.+4      	; 0x432 <__ultoa_common+0x26>
 42e:	a2 1b       	sub	r26, r18
 430:	63 95       	inc	r22
 432:	38 50       	subi	r19, 0x08	; 8
 434:	a9 f7       	brne	.-22     	; 0x420 <__ultoa_common+0x14>
 436:	a0 5d       	subi	r26, 0xD0	; 208
 438:	aa 33       	cpi	r26, 0x3A	; 58
 43a:	08 f0       	brcs	.+2      	; 0x43e <__ultoa_common+0x32>
 43c:	a9 5d       	subi	r26, 0xD9	; 217
 43e:	a1 93       	st	Z+, r26
 440:	36 f7       	brtc	.-52     	; 0x40e <__ultoa_common+0x2>
 442:	b1 11       	cpse	r27, r1
 444:	b1 93       	st	Z+, r27
 446:	10 82       	st	Z, r1
 448:	ca 01       	movw	r24, r20
 44a:	0c 94 27 02 	jmp	0x44e	; 0x44e <strrev>

0000044e <strrev>:
 44e:	dc 01       	movw	r26, r24
 450:	fc 01       	movw	r30, r24
 452:	67 2f       	mov	r22, r23
 454:	71 91       	ld	r23, Z+
 456:	77 23       	and	r23, r23
 458:	e1 f7       	brne	.-8      	; 0x452 <strrev+0x4>
 45a:	32 97       	sbiw	r30, 0x02	; 2
 45c:	04 c0       	rjmp	.+8      	; 0x466 <strrev+0x18>
 45e:	7c 91       	ld	r23, X
 460:	6d 93       	st	X+, r22
 462:	70 83       	st	Z, r23
 464:	62 91       	ld	r22, -Z
 466:	ae 17       	cp	r26, r30
 468:	bf 07       	cpc	r27, r31
 46a:	c8 f3       	brcs	.-14     	; 0x45e <strrev+0x10>
 46c:	08 95       	ret

0000046e <_exit>:
 46e:	f8 94       	cli

00000470 <__stop_program>:
 470:	ff cf       	rjmp	.-2      	; 0x470 <__stop_program>
