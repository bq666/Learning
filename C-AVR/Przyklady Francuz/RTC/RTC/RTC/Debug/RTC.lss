
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000e1  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a4  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e0  00000000  00000000  000003ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000141  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00000631  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
#include <avr/sleep.h>

volatile uint32_t seconds;    //Licznik sekund

ISR(TIMER2_OVF_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	TCCR2B=_BV(CS22) | _BV(CS20);
  a2:	85 e0       	ldi	r24, 0x05	; 5
  a4:	80 93 b1 00 	sts	0x00B1, r24
	seconds++;
  a8:	80 91 00 01 	lds	r24, 0x0100
  ac:	90 91 01 01 	lds	r25, 0x0101
  b0:	a0 91 02 01 	lds	r26, 0x0102
  b4:	b0 91 03 01 	lds	r27, 0x0103
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	a1 1d       	adc	r26, r1
  bc:	b1 1d       	adc	r27, r1
  be:	80 93 00 01 	sts	0x0100, r24
  c2:	90 93 01 01 	sts	0x0101, r25
  c6:	a0 93 02 01 	sts	0x0102, r26
  ca:	b0 93 03 01 	sts	0x0103, r27
}
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <initRTC>:

void initRTC()
{
	ASSR|=_BV(AS2);               //Timer/Counter2 jest taktowany asynchronicznie
  e0:	e6 eb       	ldi	r30, 0xB6	; 182
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	80 83       	st	Z, r24
	TCNT2=0x00;
  ea:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2B=_BV(CS22) | _BV(CS20); //preskaler 128, nadmiar wyst¹pi co 1s
  ee:	85 e0       	ldi	r24, 0x05	; 5
  f0:	80 93 b1 00 	sts	0x00B1, r24
	while(ASSR&0x07);             //Poczekaj na uaktualnienie T/C2
  f4:	80 81       	ld	r24, Z
  f6:	87 70       	andi	r24, 0x07	; 7
  f8:	e9 f7       	brne	.-6      	; 0xf4 <initRTC+0x14>
	TIMSK2|=_BV(TOIE2);           //odblokuj przerwanie Timer/Counter2 Overflow
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <main>:
}

int main()
{
	initRTC();
 106:	0e 94 70 00 	call	0xe0	; 0xe0 <initRTC>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 10a:	83 b7       	in	r24, 0x33	; 51
 10c:	81 7f       	andi	r24, 0xF1	; 241
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	83 bf       	out	0x33, r24	; 51
	sei();
 112:	78 94       	sei
	while(1)
	{
		while(ASSR&0x07);
 114:	e6 eb       	ldi	r30, 0xB6	; 182
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	87 70       	andi	r24, 0x07	; 7
 11c:	e9 f7       	brne	.-6      	; 0x118 <main+0x12>
		sleep_mode();
 11e:	83 b7       	in	r24, 0x33	; 51
 120:	81 60       	ori	r24, 0x01	; 1
 122:	83 bf       	out	0x33, r24	; 51
 124:	88 95       	sleep
 126:	83 b7       	in	r24, 0x33	; 51
 128:	8e 7f       	andi	r24, 0xFE	; 254
 12a:	83 bf       	out	0x33, r24	; 51
	}
 12c:	f5 cf       	rjmp	.-22     	; 0x118 <main+0x12>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
