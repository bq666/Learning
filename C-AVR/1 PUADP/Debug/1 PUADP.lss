
1 PUADP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a3  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032b  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	uint8_t powtarzanie;
	uint8_t ktoryLED;
	uint16_t losowa = 0x1234;
	
		
	LED_DDR = 0xFF;	
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
int main(void)
{
	int8_t i;
	uint8_t powtarzanie;
	uint8_t ktoryLED;
	uint16_t losowa = 0x1234;
  70:	44 e3       	ldi	r20, 0x34	; 52
  72:	52 e1       	ldi	r21, 0x12	; 18
	LED_DDR = 0xFF;	
	
	
    while (1) 
    {
		LED_PORT = 0xFF;
  74:	af ef       	ldi	r26, 0xFF	; 255
  76:	c0 e0       	ldi	r28, 0x00	; 0
  78:	b0 e0       	ldi	r27, 0x00	; 0
		
		
		for (i = 0; i < 8; i++)					// zaœwicaj¹ siê z prawej do lewej 
		{
			LED_PORT = LED_PORT & ~(1<<i);
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	17 e0       	ldi	r17, 0x07	; 7
  80:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		
		for (powtarzanie = 0; powtarzanie < 75; powtarzanie++)			// generator pseudolosowy 
		{
			losowa = 2053 * losowa + 13849;
  82:	e5 e0       	ldi	r30, 0x05	; 5
  84:	f8 e0       	ldi	r31, 0x08	; 8
	LED_DDR = 0xFF;	
	
	
    while (1) 
    {
		LED_PORT = 0xFF;
  86:	a5 bb       	out	0x15, r26	; 21
  88:	8c 2f       	mov	r24, r28
  8a:	9b 2f       	mov	r25, r27
		
		
		for (i = 0; i < 8; i++)					// zaœwicaj¹ siê z prawej do lewej 
		{
			LED_PORT = LED_PORT & ~(1<<i);
  8c:	35 b3       	in	r19, 0x15	; 21
  8e:	7b 01       	movw	r14, r22
  90:	08 2e       	mov	r0, r24
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x2c>
  94:	ee 0c       	add	r14, r14
  96:	ff 1c       	adc	r15, r15
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <main+0x28>
  9c:	2e 2d       	mov	r18, r14
  9e:	20 95       	com	r18
  a0:	23 23       	and	r18, r19
  a2:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	0f ef       	ldi	r16, 0xFF	; 255
  a6:	2f e5       	ldi	r18, 0x5F	; 95
  a8:	33 e0       	ldi	r19, 0x03	; 3
  aa:	01 50       	subi	r16, 0x01	; 1
  ac:	20 40       	sbci	r18, 0x00	; 0
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
  b6:	01 96       	adiw	r24, 0x01	; 1
    while (1) 
    {
		LED_PORT = 0xFF;
		
		
		for (i = 0; i < 8; i++)					// zaœwicaj¹ siê z prawej do lewej 
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	91 05       	cpc	r25, r1
  bc:	39 f7       	brne	.-50     	; 0x8c <main+0x20>
  be:	8c 2f       	mov	r24, r28
  c0:	9b 2f       	mov	r25, r27
		}
		
		
		for (i = 0; i < 8; i++)					// gasn¹ z prawej do lewej 
		{
			LED_PORT = LED_PORT | (1<<i);
  c2:	f5 b2       	in	r15, 0x15	; 21
  c4:	9b 01       	movw	r18, r22
  c6:	08 2e       	mov	r0, r24
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x5e>
  d2:	2f 29       	or	r18, r15
  d4:	25 bb       	out	0x15, r18	; 21
  d6:	0f ef       	ldi	r16, 0xFF	; 255
  d8:	2f e5       	ldi	r18, 0x5F	; 95
  da:	33 e0       	ldi	r19, 0x03	; 3
  dc:	01 50       	subi	r16, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x70>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x7a>
  e6:	00 00       	nop
  e8:	01 96       	adiw	r24, 0x01	; 1
			LED_PORT = LED_PORT & ~(1<<i);
			_delay_ms (szybkosc);
		}
		
		
		for (i = 0; i < 8; i++)					// gasn¹ z prawej do lewej 
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	91 05       	cpc	r25, r1
  ee:	49 f7       	brne	.-46     	; 0xc2 <main+0x56>
  f0:	81 2f       	mov	r24, r17
  f2:	9d 2f       	mov	r25, r29
		}
		
		
		for (i = 7; i >= 0; i--)				// zaœwiecaj¹ z lewej do prawej 
		{
			LED_PORT = LED_PORT & ~(1<<i);
  f4:	35 b3       	in	r19, 0x15	; 21
  f6:	7b 01       	movw	r14, r22
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x94>
  fc:	ee 0c       	add	r14, r14
  fe:	ff 1c       	adc	r15, r15
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <main+0x90>
 104:	2e 2d       	mov	r18, r14
 106:	20 95       	com	r18
 108:	23 23       	and	r18, r19
 10a:	25 bb       	out	0x15, r18	; 21
 10c:	0f ef       	ldi	r16, 0xFF	; 255
 10e:	2f e5       	ldi	r18, 0x5F	; 95
 110:	33 e0       	ldi	r19, 0x03	; 3
 112:	01 50       	subi	r16, 0x01	; 1
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0xa6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0xb0>
 11c:	00 00       	nop
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	48 f7       	brcc	.-46     	; 0xf4 <main+0x88>
 122:	81 2f       	mov	r24, r17
 124:	9d 2f       	mov	r25, r29
		}
		
		
		for (i = 7; i >= 0; i--)
		{
			LED_PORT = LED_PORT | (1<<i);
 126:	f5 b2       	in	r15, 0x15	; 21
 128:	9b 01       	movw	r18, r22
 12a:	08 2e       	mov	r0, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <main+0xc6>
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <main+0xc2>
 136:	2f 29       	or	r18, r15
 138:	25 bb       	out	0x15, r18	; 21
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	3f e5       	ldi	r19, 0x5F	; 95
 13e:	03 e0       	ldi	r16, 0x03	; 3
 140:	21 50       	subi	r18, 0x01	; 1
 142:	30 40       	sbci	r19, 0x00	; 0
 144:	00 40       	sbci	r16, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xd4>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xde>
 14a:	00 00       	nop
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	58 f7       	brcc	.-42     	; 0x126 <main+0xba>
 150:	2b e4       	ldi	r18, 0x4B	; 75
		}
		
		
		for (powtarzanie = 0; powtarzanie < 75; powtarzanie++)			// generator pseudolosowy 
		{
			losowa = 2053 * losowa + 13849;
 152:	4e 9f       	mul	r20, r30
 154:	c0 01       	movw	r24, r0
 156:	4f 9f       	mul	r20, r31
 158:	90 0d       	add	r25, r0
 15a:	5e 9f       	mul	r21, r30
 15c:	90 0d       	add	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	ac 01       	movw	r20, r24
 162:	47 5e       	subi	r20, 0xE7	; 231
 164:	59 4c       	sbci	r21, 0xC9	; 201
			ktoryLED = (losowa >> 8) & 0b00000111;
			LED_PORT ^= (1<<ktoryLED);
 166:	35 b3       	in	r19, 0x15	; 21
		
		
		for (powtarzanie = 0; powtarzanie < 75; powtarzanie++)			// generator pseudolosowy 
		{
			losowa = 2053 * losowa + 13849;
			ktoryLED = (losowa >> 8) & 0b00000111;
 168:	85 2f       	mov	r24, r21
 16a:	87 70       	andi	r24, 0x07	; 7
			LED_PORT ^= (1<<ktoryLED);
 16c:	7b 01       	movw	r14, r22
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0x108>
 170:	ee 0c       	add	r14, r14
 172:	ff 1c       	adc	r15, r15
 174:	8a 95       	dec	r24
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0x104>
 178:	c7 01       	movw	r24, r14
 17a:	83 27       	eor	r24, r19
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	0f ef       	ldi	r16, 0xFF	; 255
 180:	3f e5       	ldi	r19, 0x5F	; 95
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	01 50       	subi	r16, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x118>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x122>
 18e:	00 00       	nop
 190:	21 50       	subi	r18, 0x01	; 1
			LED_PORT = LED_PORT | (1<<i);
			_delay_ms (szybkosc);
		}
		
		
		for (powtarzanie = 0; powtarzanie < 75; powtarzanie++)			// generator pseudolosowy 
 192:	f9 f6       	brne	.-66     	; 0x152 <main+0xe6>
			losowa = 2053 * losowa + 13849;
			ktoryLED = (losowa >> 8) & 0b00000111;
			LED_PORT ^= (1<<ktoryLED);
			_delay_ms(szybkosc);
		}
		LED_PORT=0xFF;
 194:	a5 bb       	out	0x15, r26	; 21
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	0f ed       	ldi	r16, 0xDF	; 223
 19a:	20 e1       	ldi	r18, 0x10	; 16
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	00 40       	sbci	r16, 0x00	; 0
 1a0:	20 40       	sbci	r18, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x130>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x13a>
 1a6:	00 00       	nop
 1a8:	6e cf       	rjmp	.-292    	; 0x86 <main+0x1a>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
