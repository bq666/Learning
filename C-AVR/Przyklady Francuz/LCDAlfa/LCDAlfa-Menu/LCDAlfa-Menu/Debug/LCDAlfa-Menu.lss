
LCDAlfa-Menu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008ac  00000940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000942  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015fc  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086f  00000000  00000000  00002126  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000900  00000000  00000000  00002995  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b4  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051e  00000000  00000000  0000364c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a3  00000000  00000000  00003b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000430d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
   4:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   8:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
   c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  10:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  14:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  20:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  24:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  28:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  2c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  30:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  34:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  3c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_16>
  44:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  4c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  50:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  54:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  58:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  5c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  60:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>
  64:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	3e 3e       	cpi	r19, 0xEE	; 238
  6a:	3e 00       	.word	0x003e	; ????

0000006c <__c.1799>:
  6c:	20 00                                                .

0000006e <__c.1797>:
  6e:	3e 00                                               >.

00000070 <__c.1833>:
  70:	50 6f 64 6d 65 6e 75 20 42 32 00                    Podmenu B2.

0000007b <__c.1829>:
  7b:	50 6f 64 6d 65 6e 75 20 42 31 00                    Podmenu B1.

00000086 <__c.1825>:
  86:	50 6f 64 6d 65 6e 75 20 41 33 00                    Podmenu A3.

00000091 <__c.1821>:
  91:	50 6f 64 6d 65 6e 75 20 41 31 00                    Podmenu A1.

0000009c <__c.1817>:
  9c:	4d 65 6e 75 20 34 00                                Menu 4.

000000a3 <__c.1813>:
  a3:	4d 65 6e 75 20 33 00                                Menu 3.

000000aa <__c.1809>:
  aa:	4d 65 6e 75 20 31 00                                Menu 1.

000000b1 <__compound_literal.11>:
  b1:	4d 65 6e 75 31 00                                   Menu1.

000000b7 <menu1>:
  b7:	c1 00 00 00 8e 01 84 01 c7 00                       ..........

000000c1 <__compound_literal.10>:
  c1:	4d 65 6e 75 32 00                                   Menu2.

000000c7 <menu2>:
  c7:	d1 00 c6 03 8e 01 00 00 d7 00                       ..........

000000d1 <__compound_literal.9>:
  d1:	4d 65 6e 75 33 00                                   Menu3.

000000d7 <menu3>:
  d7:	e1 00 d7 03 8e 01 00 00 e7 00                       ..........

000000e1 <__compound_literal.8>:
  e1:	4d 65 6e 75 34 00                                   Menu4.

000000e7 <menu4>:
  e7:	f1 00 00 00 8e 01 00 00 00 00                       ..........

000000f1 <__compound_literal.7>:
  f1:	4d 65 6e 75 35 00                                   Menu5.

000000f7 <__compound_literal.6>:
  f7:	50 6f 64 6d 65 6e 75 20 41 31 00                    Podmenu A1.

00000102 <menuA2>:
 102:	0c 01 00 00 84 01 7a 01 17 01                       ......z...

0000010c <__compound_literal.5>:
 10c:	50 6f 64 6d 65 6e 75 20 41 32 00                    Podmenu A2.

00000117 <menuA3>:
 117:	21 01 f9 03 84 01 00 00 2c 01                       !.......,.

00000121 <__compound_literal.4>:
 121:	50 6f 64 6d 65 6e 75 20 41 33 00                    Podmenu A3.

0000012c <menuA4>:
 12c:	36 01 85 03 84 01 00 00 00 00                       6.........

00000136 <__compound_literal.3>:
 136:	3c 7a 20 70 6f 77 72 6f 74 65 6d 3e 00              <z powrotem>.

00000143 <__compound_literal.2>:
 143:	50 6f 64 6d 65 6e 75 20 42 31 00                    Podmenu B1.

0000014e <menuB2>:
 14e:	58 01 1b 04 7a 01 00 00 63 01                       X...z...c.

00000158 <__compound_literal.1>:
 158:	50 6f 64 6d 65 6e 75 20 42 32 00                    Podmenu B2.

00000163 <menuB3>:
 163:	6d 01 85 03 7a 01 00 00 00 00                       m...z.....

0000016d <__compound_literal.0>:
 16d:	3c 7a 20 70 6f 77 72 6f 74 65 6d 3e 00              <z powrotem>.

0000017a <menuB1>:
 17a:	43 01 0a 04 84 01 00 00 4e 01                       C.......N.

00000184 <menuA1>:
 184:	f7 00 e8 03 8e 01 00 00 02 01                       ..........

0000018e <menu>:
 18e:	b1 00 b5 03 00 00 00 00 b7 00                       ..........

00000198 <__ctors_end>:
 198:	11 24       	eor	r1, r1
 19a:	1f be       	out	0x3f, r1	; 63
 19c:	cf ef       	ldi	r28, 0xFF	; 255
 19e:	d8 e0       	ldi	r29, 0x08	; 8
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
 1a4:	11 e0       	ldi	r17, 0x01	; 1
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	ec ea       	ldi	r30, 0xAC	; 172
 1ac:	f8 e0       	ldi	r31, 0x08	; 8
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
 1b0:	05 90       	lpm	r0, Z+
 1b2:	0d 92       	st	X+, r0
 1b4:	a2 30       	cpi	r26, 0x02	; 2
 1b6:	b1 07       	cpc	r27, r17
 1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	a2 e0       	ldi	r26, 0x02	; 2
 1be:	b1 e0       	ldi	r27, 0x01	; 1
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
 1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
 1c4:	ac 30       	cpi	r26, 0x0C	; 12
 1c6:	b2 07       	cpc	r27, r18
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>
 1ca:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
 1ce:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <_exit>

000001d2 <__bad_interrupt>:
 1d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d6 <ReadEncoder>:
{
	static int8_t last;
	static uint8_t counters[3];	//Tablica zawieraj¹ca liczniki
	int8_t newpos, diff;
	
	uint8_t state=ENCODER_PIN;
 1d6:	89 b1       	in	r24, 0x09	; 9
	if(((state^laststate) & BITPOS(ENCODER_A)) && (counters[0]==0))
 1d8:	20 91 06 01 	lds	r18, 0x0106
 1dc:	92 2f       	mov	r25, r18
 1de:	98 27       	eor	r25, r24
 1e0:	95 ff       	sbrs	r25, 5
 1e2:	0d c0       	rjmp	.+26     	; 0x1fe <ReadEncoder+0x28>
 1e4:	90 91 03 01 	lds	r25, 0x0103
 1e8:	91 11       	cpse	r25, r1
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <ReadEncoder+0x28>
	{
		counters[0]=200;
 1ec:	98 ec       	ldi	r25, 0xC8	; 200
 1ee:	90 93 03 01 	sts	0x0103, r25
		laststate&=(~BITPOS(ENCODER_A));
		laststate|=(state & BITPOS(ENCODER_A));
 1f2:	98 2f       	mov	r25, r24
 1f4:	90 72       	andi	r25, 0x20	; 32
	
	uint8_t state=ENCODER_PIN;
	if(((state^laststate) & BITPOS(ENCODER_A)) && (counters[0]==0))
	{
		counters[0]=200;
		laststate&=(~BITPOS(ENCODER_A));
 1f6:	2f 7d       	andi	r18, 0xDF	; 223
		laststate|=(state & BITPOS(ENCODER_A));
 1f8:	92 2b       	or	r25, r18
 1fa:	90 93 06 01 	sts	0x0106, r25
	}

	if(((state^laststate) & BITPOS(ENCODER_B)) && (counters[1]==0))
 1fe:	90 91 06 01 	lds	r25, 0x0106
 202:	29 2f       	mov	r18, r25
 204:	28 27       	eor	r18, r24
 206:	26 ff       	sbrs	r18, 6
 208:	0b c0       	rjmp	.+22     	; 0x220 <ReadEncoder+0x4a>
 20a:	20 91 04 01 	lds	r18, 0x0104
 20e:	21 11       	cpse	r18, r1
 210:	07 c0       	rjmp	.+14     	; 0x220 <ReadEncoder+0x4a>
	{
		counters[1]=200;
 212:	28 ec       	ldi	r18, 0xC8	; 200
 214:	20 93 04 01 	sts	0x0104, r18
		laststate&=(BITPOS(ENCODER_B));
 218:	98 2b       	or	r25, r24
		laststate|=(state & BITPOS(ENCODER_B));
 21a:	90 74       	andi	r25, 0x40	; 64
 21c:	90 93 06 01 	sts	0x0106, r25
	}

	if(((state^laststate) & BITPOS(ENCODER_BTN)) && (counters[2]==0))
 220:	20 91 06 01 	lds	r18, 0x0106
 224:	92 2f       	mov	r25, r18
 226:	98 27       	eor	r25, r24
 228:	97 ff       	sbrs	r25, 7
 22a:	0d c0       	rjmp	.+26     	; 0x246 <ReadEncoder+0x70>
 22c:	90 91 05 01 	lds	r25, 0x0105
 230:	91 11       	cpse	r25, r1
 232:	09 c0       	rjmp	.+18     	; 0x246 <ReadEncoder+0x70>
	{
		counters[2]=200;
 234:	98 ec       	ldi	r25, 0xC8	; 200
 236:	90 93 05 01 	sts	0x0105, r25
		laststate&=(~BITPOS(ENCODER_BTN));
		laststate|=(state & BITPOS(ENCODER_BTN));
 23a:	98 2f       	mov	r25, r24
 23c:	90 78       	andi	r25, 0x80	; 128
	}

	if(((state^laststate) & BITPOS(ENCODER_BTN)) && (counters[2]==0))
	{
		counters[2]=200;
		laststate&=(~BITPOS(ENCODER_BTN));
 23e:	2f 77       	andi	r18, 0x7F	; 127
		laststate|=(state & BITPOS(ENCODER_BTN));
 240:	92 2b       	or	r25, r18
 242:	90 93 06 01 	sts	0x0106, r25
 246:	e3 e0       	ldi	r30, 0x03	; 3
 248:	f1 e0       	ldi	r31, 0x01	; 1
	}

	for(uint8_t c=0;c<sizeof(counters)/sizeof(counters[0]);c++)		
		if(counters[c])	counters[c]--;
 24a:	90 81       	ld	r25, Z
 24c:	99 23       	and	r25, r25
 24e:	11 f0       	breq	.+4      	; 0x254 <ReadEncoder+0x7e>
 250:	91 50       	subi	r25, 0x01	; 1
 252:	90 83       	st	Z, r25
 254:	31 96       	adiw	r30, 0x01	; 1
		counters[2]=200;
		laststate&=(~BITPOS(ENCODER_BTN));
		laststate|=(state & BITPOS(ENCODER_BTN));
	}

	for(uint8_t c=0;c<sizeof(counters)/sizeof(counters[0]);c++)		
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	e6 30       	cpi	r30, 0x06	; 6
 25a:	f9 07       	cpc	r31, r25
 25c:	b1 f7       	brne	.-20     	; 0x24a <ReadEncoder+0x74>
		if(counters[c])	counters[c]--;

	newpos=0;
	if((state & BITPOS(ENCODER_A))==0) newpos=3;
 25e:	85 ff       	sbrs	r24, 5
 260:	02 c0       	rjmp	.+4      	; 0x266 <ReadEncoder+0x90>
	}

	for(uint8_t c=0;c<sizeof(counters)/sizeof(counters[0]);c++)		
		if(counters[c])	counters[c]--;

	newpos=0;
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	01 c0       	rjmp	.+2      	; 0x268 <ReadEncoder+0x92>
	if((state & BITPOS(ENCODER_A))==0) newpos=3;
 266:	93 e0       	ldi	r25, 0x03	; 3
	if((state & BITPOS(ENCODER_B))==0) newpos^=1;	// konwersja kodu Graya na binarny
 268:	86 fd       	sbrc	r24, 6
 26a:	02 c0       	rjmp	.+4      	; 0x270 <ReadEncoder+0x9a>
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	98 27       	eor	r25, r24
	diff=last-newpos;
 270:	20 91 02 01 	lds	r18, 0x0102
 274:	29 1b       	sub	r18, r25
	if(diff & 1)
 276:	20 ff       	sbrs	r18, 0
 278:	09 c0       	rjmp	.+18     	; 0x28c <ReadEncoder+0xb6>
	{				// bit 0 = krok
    	last=newpos;
 27a:	90 93 02 01 	sts	0x0102, r25
		enc_delta+=(diff & 2)-1;	//bit 1 - kierunek
 27e:	80 91 07 01 	lds	r24, 0x0107
 282:	81 50       	subi	r24, 0x01	; 1
 284:	22 70       	andi	r18, 0x02	; 2
 286:	82 0f       	add	r24, r18
 288:	80 93 07 01 	sts	0x0107, r24
 28c:	08 95       	ret

0000028e <__vector_16>:
static uint8_t laststate;

static inline void ReadEncoder();

ISR(TIMER0_OVF_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	ReadEncoder();
 2b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ReadEncoder>
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <GetEncButton>:
	TIMSK0|=_BV(TOIE0);	//Odblokuj przerwanie nadmiaru timera 0
}

bool GetEncButton()
{
	if(laststate & BITPOS(ENCODER_BTN)) return false; else return true;
 2d6:	80 91 06 01 	lds	r24, 0x0106
 2da:	80 95       	com	r24
}
 2dc:	88 1f       	adc	r24, r24
 2de:	88 27       	eor	r24, r24
 2e0:	88 1f       	adc	r24, r24
 2e2:	08 95       	ret

000002e4 <Read4StepEncoder>:
	return val>>1;
}

int8_t Read4StepEncoder()
{
	ReadEncoder();
 2e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <ReadEncoder>
	int8_t val=enc_delta;
 2e8:	80 91 07 01 	lds	r24, 0x0107
	enc_delta=val & 3;
 2ec:	98 2f       	mov	r25, r24
 2ee:	93 70       	andi	r25, 0x03	; 3
 2f0:	90 93 07 01 	sts	0x0107, r25
	return val>>2;
}
 2f4:	85 95       	asr	r24
 2f6:	85 95       	asr	r24
 2f8:	08 95       	ret

000002fa <EncoderInit>:

void EncoderInit()
{	//Wyjcia A i B enkodera pod³¹czone s¹ do PD5-7
	SET(PORT, ENCODER_A);
 2fa:	5d 9a       	sbi	0x0b, 5	; 11
	SET(PORT, ENCODER_B);
 2fc:	5e 9a       	sbi	0x0b, 6	; 11
	SET(PORT, ENCODER_BTN);
 2fe:	5f 9a       	sbi	0x0b, 7	; 11
 300:	08 95       	ret

00000302 <hd44780_outnibble>:
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
 302:	5b 98       	cbi	0x0b, 3	; 11
  if (rs)
 304:	66 23       	and	r22, r22
 306:	11 f0       	breq	.+4      	; 0x30c <hd44780_outnibble+0xa>
    SET(PORT, HD44780_RS);
 308:	5c 9a       	sbi	0x0b, 4	; 11
 30a:	01 c0       	rjmp	.+2      	; 0x30e <hd44780_outnibble+0xc>
  else
    CLR(PORT, HD44780_RS);
 30c:	5c 98       	cbi	0x0b, 4	; 11
  ASSIGN(PORT, HD44780_D4, n);
 30e:	98 b1       	in	r25, 0x08	; 8
 310:	90 7f       	andi	r25, 0xF0	; 240
 312:	98 2b       	or	r25, r24
 314:	98 b9       	out	0x08, r25	; 8
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
 316:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <hd44780_outnibble+0x18>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <hd44780_outnibble+0x1e>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
 320:	5a 98       	cbi	0x0b, 2	; 11
 322:	08 95       	ret

00000324 <hd44780_innibble>:
static uint8_t
hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
 324:	5b 9a       	sbi	0x0b, 3	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
 326:	97 b1       	in	r25, 0x07	; 7
 328:	90 7f       	andi	r25, 0xF0	; 240
 32a:	97 b9       	out	0x07, r25	; 7
  if (rs)
 32c:	88 23       	and	r24, r24
 32e:	11 f0       	breq	.+4      	; 0x334 <hd44780_innibble+0x10>
    SET(PORT, HD44780_RS);
 330:	5c 9a       	sbi	0x0b, 4	; 11
 332:	01 c0       	rjmp	.+2      	; 0x336 <hd44780_innibble+0x12>
  else
    CLR(PORT, HD44780_RS);
 334:	5c 98       	cbi	0x0b, 4	; 11
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
 336:	5a 9a       	sbi	0x0b, 2	; 11
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <hd44780_innibble+0x16>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <hd44780_innibble+0x1c>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 340:	86 b1       	in	r24, 0x06	; 6
  else
    x = 0;
  CLR(PORT, HD44780_E);
 342:	5a 98       	cbi	0x0b, 2	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 344:	97 b1       	in	r25, 0x07	; 7
 346:	9f 60       	ori	r25, 0x0F	; 15
 348:	97 b9       	out	0x07, r25	; 7
  CLR(PORT, HD44780_RW);
 34a:	5b 98       	cbi	0x0b, 3	; 11

  return x;
}
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	08 95       	ret

00000350 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	c8 2f       	mov	r28, r24
 356:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 358:	82 95       	swap	r24
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	0e 94 81 01 	call	0x302	; 0x302 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 360:	6d 2f       	mov	r22, r29
 362:	8c 2f       	mov	r24, r28
 364:	8f 70       	andi	r24, 0x0F	; 15
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
  hd44780_outnibble(b >> 4, rs);
  hd44780_outnibble(b & 0xf, rs);
 36a:	0c 94 81 01 	jmp	0x302	; 0x302 <hd44780_outnibble>

0000036e <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 374:	0e 94 92 01 	call	0x324	; 0x324 <hd44780_innibble>
 378:	d8 2f       	mov	r29, r24
 37a:	d2 95       	swap	r29
 37c:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 37e:	8c 2f       	mov	r24, r28
 380:	0e 94 92 01 	call	0x324	; 0x324 <hd44780_innibble>

  return x;
}
 384:	8d 2b       	or	r24, r29
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <hd44780_wait_ready>:
 */
void
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 b7 01 	call	0x36e	; 0x36e <hd44780_inbyte>
 392:	87 fd       	sbrc	r24, 7
 394:	fb cf       	rjmp	.-10     	; 0x38c <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 396:	08 95       	ret

00000398 <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
 398:	54 9a       	sbi	0x0a, 4	; 10
  SET(DDR, HD44780_RW);
 39a:	53 9a       	sbi	0x0a, 3	; 10
  SET(DDR, HD44780_E);
 39c:	52 9a       	sbi	0x0a, 2	; 10
  ASSIGN(DDR, HD44780_D4, 0x0F);
 39e:	87 b1       	in	r24, 0x07	; 7
 3a0:	8f 60       	ori	r24, 0x0F	; 15
 3a2:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	8f e5       	ldi	r24, 0x5F	; 95
 3a6:	9a ee       	ldi	r25, 0xEA	; 234
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <hd44780_init+0x10>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <hd44780_init+0x16>
 3ae:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	0e 94 81 01 	call	0x302	; 0x302 <hd44780_outnibble>
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	90 e4       	ldi	r25, 0x40	; 64
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <hd44780_init+0x24>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <hd44780_init+0x2a>
 3c2:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	0e 94 81 01 	call	0x302	; 0x302 <hd44780_outnibble>
 3cc:	8f e8       	ldi	r24, 0x8F	; 143
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <hd44780_init+0x38>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <hd44780_init+0x3e>
 3d6:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 81 01 	call	0x302	; 0x302 <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e0:	95 ec       	ldi	r25, 0xC5	; 197
 3e2:	9a 95       	dec	r25
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <hd44780_init+0x4a>
 3e6:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 81 01 	call	0x302	; 0x302 <hd44780_outnibble>
  hd44780_wait_ready(false);
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	88 e2       	ldi	r24, 0x28	; 40
 3fa:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
  hd44780_wait_ready(false);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
  hd44780_wait_ready(false);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0c 94 c6 01 	jmp	0x38c	; 0x38c <hd44780_wait_ready>

00000412 <lcd_init>:
#include "hd44780.h"

void lcd_init()
{

  hd44780_init();				//Podstawowa inicjalizacja modu³u
 412:	0e 94 cc 01 	call	0x398	; 0x398 <hd44780_init>
  hd44780_outcmd(HD44780_CLR);	//Wyczyæ pamiêæ DDRAM
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
  hd44780_wait_ready(1000);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
  hd44780_outcmd(HD44780_ENTMODE(1, 0));	//Tryb autoinkrementacji AC
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
  hd44780_wait_ready(1000);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));	//W³¹cz wywietlacz, wy³¹cz kursor
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
  hd44780_wait_ready(1000);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <hd44780_wait_ready>

00000440 <lcd_putchar>:
} 

void lcd_putchar(char c)
{
 440:	cf 93       	push	r28
 442:	c8 2f       	mov	r28, r24
  static _Bool second_nl_seen;
  static uint8_t line=0;
 
  if ((second_nl_seen) && (c != '\n')&&(line==0))
 444:	80 91 09 01 	lds	r24, 0x0109
 448:	88 23       	and	r24, r24
 44a:	99 f0       	breq	.+38     	; 0x472 <lcd_putchar+0x32>
 44c:	ca 30       	cpi	r28, 0x0A	; 10
 44e:	99 f0       	breq	.+38     	; 0x476 <lcd_putchar+0x36>
 450:	80 91 08 01 	lds	r24, 0x0108
 454:	81 11       	cpse	r24, r1
 456:	20 c0       	rjmp	.+64     	; 0x498 <lcd_putchar+0x58>
  {//Odebrano pierwszy znak
      hd44780_wait_ready(40);
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
 45e:	60 e0       	ldi	r22, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
      hd44780_wait_ready(1600);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 c6 01 	call	0x38c	; 0x38c <hd44780_wait_ready>
      second_nl_seen=false;   
 46c:	10 92 09 01 	sts	0x0109, r1
 470:	13 c0       	rjmp	.+38     	; 0x498 <lcd_putchar+0x58>
  }
  if (c == '\n')
 472:	ca 30       	cpi	r28, 0x0A	; 10
 474:	89 f4       	brne	.+34     	; 0x498 <lcd_putchar+0x58>
  {
        if (line==0)
 476:	80 91 08 01 	lds	r24, 0x0108
 47a:	81 11       	cpse	r24, r1
 47c:	06 c0       	rjmp	.+12     	; 0x48a <lcd_putchar+0x4a>
   {
           line++;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 93 08 01 	sts	0x0108, r24
           hd44780_outcmd(HD44780_DDADDR(64));	//Adres pierwszego znaku drugiej linii
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	80 ec       	ldi	r24, 0xC0	; 192
 488:	09 c0       	rjmp	.+18     	; 0x49c <lcd_putchar+0x5c>
           hd44780_wait_ready(1000);   
   }
   else
   {
        second_nl_seen=true;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 09 01 	sts	0x0109, r24
        line=0;
 490:	10 92 08 01 	sts	0x0108, r1
  else
  {     
     hd44780_outdata(c);
     hd44780_wait_ready(40);
  }
} 
 494:	cf 91       	pop	r28
 496:	08 95       	ret
        line=0;
   }
  }
  else
  {     
     hd44780_outdata(c);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	8c 2f       	mov	r24, r28
 49c:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
     hd44780_wait_ready(40);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
  }
} 
 4a2:	cf 91       	pop	r28
   }
  }
  else
  {     
     hd44780_outdata(c);
     hd44780_wait_ready(40);
 4a4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <hd44780_wait_ready>

000004a8 <lcd_puttext>:
  }
} 

void lcd_puttext(const char __memx *txt)
{
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	6b 01       	movw	r12, r22
 4b0:	e8 2e       	mov	r14, r24
	char ch;
	while((ch=*txt))
 4b2:	f6 01       	movw	r30, r12
 4b4:	84 91       	lpm	r24, Z
 4b6:	e7 fc       	sbrc	r14, 7
 4b8:	80 81       	ld	r24, Z
 4ba:	88 23       	and	r24, r24
 4bc:	39 f0       	breq	.+14     	; 0x4cc <lcd_puttext+0x24>
	{
		lcd_putchar(ch);
 4be:	0e 94 20 02 	call	0x440	; 0x440 <lcd_putchar>
		txt++;
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	c8 1a       	sub	r12, r24
 4c6:	d8 0a       	sbc	r13, r24
 4c8:	e8 0a       	sbc	r14, r24
 4ca:	f3 cf       	rjmp	.-26     	; 0x4b2 <lcd_puttext+0xa>
	}
}
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	08 95       	ret

000004d4 <lcd_goto>:
  }
}

void lcd_goto(uint8_t x, uint8_t y)
{
	hd44780_outcmd(HD44780_DDADDR(0x40*y+x));
 4d4:	90 e4       	ldi	r25, 0x40	; 64
 4d6:	69 9f       	mul	r22, r25
 4d8:	80 0d       	add	r24, r0
 4da:	11 24       	eor	r1, r1
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0c 94 c6 01 	jmp	0x38c	; 0x38c <hd44780_wait_ready>

000004ea <lcd_cls>:
}

void lcd_cls()
{
	hd44780_outcmd(HD44780_CLR);
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 a8 01 	call	0x350	; 0x350 <hd44780_outbyte>
	hd44780_wait_ready(false);
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0c 94 c6 01 	jmp	0x38c	; 0x38c <hd44780_wait_ready>

000004f8 <main>:
#include "LCD.h"
#include "encoder.h"

int main()
{
	EncoderInit();
 4f8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <EncoderInit>
	lcd_init();
 4fc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_init>
	//Timer0Init();  //Jeli wykorzystujemy przerwania do obs³ugi enkodera
	Menu_Show();
 500:	0e 94 ba 02 	call	0x574	; 0x574 <Menu_Show>
	sei();
 504:	78 94       	sei

 int8_t enc;
 _Bool btn=false;
 506:	d0 e0       	ldi	r29, 0x00	; 0
 while(1)
 {
  enc=Read4StepEncoder();
 508:	0e 94 72 01 	call	0x2e4	; 0x2e4 <Read4StepEncoder>
 50c:	c8 2f       	mov	r28, r24
  if(enc>0)
 50e:	18 16       	cp	r1, r24
 510:	1c f4       	brge	.+6      	; 0x518 <main+0x20>
   {
    Menu_SelectPrev();
 512:	0e 94 5e 03 	call	0x6bc	; 0x6bc <Menu_SelectPrev>
	enc++;
 516:	cf 5f       	subi	r28, 0xFF	; 255
   }
  if(enc<0)
 518:	c7 fd       	sbrc	r28, 7
   {
    Menu_SelectNext();
 51a:	0e 94 34 03 	call	0x668	; 0x668 <Menu_SelectNext>
	enc--;
   }
  if(GetEncButton()^btn)
 51e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <GetEncButton>
 522:	8d 17       	cp	r24, r29
 524:	89 f3       	breq	.-30     	; 0x508 <main+0x10>
   {
    btn=GetEncButton();
 526:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <GetEncButton>
 52a:	d8 2f       	mov	r29, r24
	if(btn) Menu_Click();
 52c:	88 23       	and	r24, r24
 52e:	61 f3       	breq	.-40     	; 0x508 <main+0x10>
 530:	0e 94 95 03 	call	0x72a	; 0x72a <Menu_Click>
 534:	e9 cf       	rjmp	.-46     	; 0x508 <main+0x10>

00000536 <Menu_GetMenuItemsNo>:
static int8_t menuindex;                                    //Numer aktualnie wybrane pozycji menu
static int8_t menufirstpos;                                 //Numer pozycji menu wywietlanej w górnym rzêdzie

uint8_t Menu_GetMenuItemsNo()            //Policz ile dane menu ma pozycji
{
	const __flash struct _menuitem *tmpmenuitem=currMenuPtr;
 536:	20 91 00 01 	lds	r18, 0x0100
 53a:	30 91 01 01 	lds	r19, 0x0101
	uint8_t index=0;
 53e:	80 e0       	ldi	r24, 0x00	; 0

	while(tmpmenuitem)
 540:	21 15       	cp	r18, r1
 542:	31 05       	cpc	r19, r1
 544:	31 f0       	breq	.+12     	; 0x552 <Menu_GetMenuItemsNo+0x1c>
	{
		tmpmenuitem=tmpmenuitem->next;
 546:	f9 01       	movw	r30, r18
 548:	38 96       	adiw	r30, 0x08	; 8
 54a:	25 91       	lpm	r18, Z+
 54c:	35 91       	lpm	r19, Z+
		index++;
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	f7 cf       	rjmp	.-18     	; 0x540 <Menu_GetMenuItemsNo+0xa>
	}
	return index;
}
 552:	08 95       	ret

00000554 <Menu_GetMenuItem>:

const __flash struct _menuitem *Menu_GetMenuItem(uint8_t index)
{
 554:	28 2f       	mov	r18, r24
	const __flash struct _menuitem *tmpmenuitem=currMenuPtr;
 556:	80 91 00 01 	lds	r24, 0x0100
 55a:	90 91 01 01 	lds	r25, 0x0101

	while((tmpmenuitem) && (index>0))
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	41 f0       	breq	.+16     	; 0x572 <Menu_GetMenuItem+0x1e>
 562:	22 23       	and	r18, r18
 564:	31 f0       	breq	.+12     	; 0x572 <Menu_GetMenuItem+0x1e>
	{
	 tmpmenuitem=tmpmenuitem->next;
 566:	fc 01       	movw	r30, r24
 568:	38 96       	adiw	r30, 0x08	; 8
 56a:	85 91       	lpm	r24, Z+
 56c:	95 91       	lpm	r25, Z+
	 index--;
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	f6 cf       	rjmp	.-20     	; 0x55e <Menu_GetMenuItem+0xa>
	}
	return tmpmenuitem;
}
 572:	08 95       	ret

00000574 <Menu_Show>:
{
	return LCD_ROWS;
}

void Menu_Show()
{
 574:	2f 92       	push	r2
 576:	3f 92       	push	r3
 578:	4f 92       	push	r4
 57a:	6f 92       	push	r6
 57c:	7f 92       	push	r7
 57e:	8f 92       	push	r8
 580:	af 92       	push	r10
 582:	bf 92       	push	r11
 584:	cf 92       	push	r12
 586:	df 92       	push	r13
 588:	ef 92       	push	r14
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
	const __flash struct _menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
 592:	80 91 0a 01 	lds	r24, 0x010A
 596:	0e 94 aa 02 	call	0x554	; 0x554 <Menu_GetMenuItem>
 59a:	ec 01       	movw	r28, r24
	uint8_t menuitemsno=Menu_GetMenuItemsNo();
 59c:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
 5a0:	a8 2e       	mov	r10, r24

	lcd_cls(); //Wyczyæ LCD
 5a2:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
 5a6:	00 e0       	ldi	r16, 0x00	; 0
 5a8:	10 e0       	ldi	r17, 0x00	; 0

	for(uint8_t i=0; i < Menu_GetMenuRows(); i++)
	{
		//_Bool invert=menuindex == ((menufirstpos + i) % menuitemsno);              //Czy podwietliæ dan¹ pozycje menu
		lcd_goto(0, i);  //Wywietlany rz¹d
		if(menuindex == ((menufirstpos + i) % menuitemsno)) lcd_puttext(PSTR(">")); else lcd_puttext(PSTR(" "));  //Dana pozycja menu jest zaznaczona
 5aa:	b1 2c       	mov	r11, r1
 5ac:	8c e6       	ldi	r24, 0x6C	; 108
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	6c 01       	movw	r12, r24
 5b2:	e1 2c       	mov	r14, r1
 5b4:	8e e6       	ldi	r24, 0x6E	; 110
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	3c 01       	movw	r6, r24
 5ba:	81 2c       	mov	r8, r1
		lcd_puttext(tmpmenuitem->text); //Wywietl pozycjê menu
		if(tmpmenuitem->submenu)
		  lcd_puttext(PSTR(">>>")); //Zaznacz, ¿e mamy submenu
 5bc:	88 e6       	ldi	r24, 0x68	; 104
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	1c 01       	movw	r2, r24
 5c2:	41 2c       	mov	r4, r1
	lcd_cls(); //Wyczyæ LCD

	for(uint8_t i=0; i < Menu_GetMenuRows(); i++)
	{
		//_Bool invert=menuindex == ((menufirstpos + i) % menuitemsno);              //Czy podwietliæ dan¹ pozycje menu
		lcd_goto(0, i);  //Wywietlany rz¹d
 5c4:	60 2f       	mov	r22, r16
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <lcd_goto>
		if(menuindex == ((menufirstpos + i) % menuitemsno)) lcd_puttext(PSTR(">")); else lcd_puttext(PSTR(" "));  //Dana pozycja menu jest zaznaczona
 5cc:	20 91 0b 01 	lds	r18, 0x010B
 5d0:	33 27       	eor	r19, r19
 5d2:	27 fd       	sbrc	r18, 7
 5d4:	30 95       	com	r19
 5d6:	80 91 0a 01 	lds	r24, 0x010A
 5da:	a8 01       	movw	r20, r16
 5dc:	48 0f       	add	r20, r24
 5de:	51 1d       	adc	r21, r1
 5e0:	87 fd       	sbrc	r24, 7
 5e2:	5a 95       	dec	r21
 5e4:	ca 01       	movw	r24, r20
 5e6:	b5 01       	movw	r22, r10
 5e8:	0e 94 2c 04 	call	0x858	; 0x858 <__divmodhi4>
 5ec:	28 17       	cp	r18, r24
 5ee:	39 07       	cpc	r19, r25
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <Menu_Show+0x84>
 5f2:	88 2d       	mov	r24, r8
 5f4:	b3 01       	movw	r22, r6
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <Menu_Show+0x88>
 5f8:	8e 2d       	mov	r24, r14
 5fa:	b6 01       	movw	r22, r12
 5fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
		lcd_puttext(tmpmenuitem->text); //Wywietl pozycjê menu
 600:	fe 01       	movw	r30, r28
 602:	65 91       	lpm	r22, Z+
 604:	75 91       	lpm	r23, Z+
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
		if(tmpmenuitem->submenu)
 60c:	fe 01       	movw	r30, r28
 60e:	36 96       	adiw	r30, 0x06	; 6
 610:	85 91       	lpm	r24, Z+
 612:	95 91       	lpm	r25, Z+
 614:	89 2b       	or	r24, r25
 616:	21 f0       	breq	.+8      	; 0x620 <Menu_Show+0xac>
		  lcd_puttext(PSTR(">>>")); //Zaznacz, ¿e mamy submenu
 618:	84 2d       	mov	r24, r4
 61a:	b1 01       	movw	r22, r2
 61c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
		tmpmenuitem=tmpmenuitem->next;
 620:	fe 01       	movw	r30, r28
 622:	38 96       	adiw	r30, 0x08	; 8
 624:	c5 91       	lpm	r28, Z+
 626:	d5 91       	lpm	r29, Z+
		if(tmpmenuitem == NULL)  //Koniec listy
 628:	20 97       	sbiw	r28, 0x00	; 0
 62a:	41 f4       	brne	.+16     	; 0x63c <Menu_Show+0xc8>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()) tmpmenuitem=currMenuPtr; //Zawijamy listê jeli jest d³u¿sza ni¿ liczba wywietlanych pozycji
 62c:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
 630:	83 30       	cpi	r24, 0x03	; 3
 632:	50 f0       	brcs	.+20     	; 0x648 <Menu_Show+0xd4>
 634:	c0 91 00 01 	lds	r28, 0x0100
 638:	d0 91 01 01 	lds	r29, 0x0101
 63c:	0f 5f       	subi	r16, 0xFF	; 255
 63e:	1f 4f       	sbci	r17, 0xFF	; 255
	const __flash struct _menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
	uint8_t menuitemsno=Menu_GetMenuItemsNo();

	lcd_cls(); //Wyczyæ LCD

	for(uint8_t i=0; i < Menu_GetMenuRows(); i++)
 640:	02 30       	cpi	r16, 0x02	; 2
 642:	11 05       	cpc	r17, r1
 644:	09 f0       	breq	.+2      	; 0x648 <Menu_Show+0xd4>
 646:	be cf       	rjmp	.-132    	; 0x5c4 <Menu_Show+0x50>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()) tmpmenuitem=currMenuPtr; //Zawijamy listê jeli jest d³u¿sza ni¿ liczba wywietlanych pozycji
			   else break;   //lub koñczymy, ¿eby unikn¹æ powtarzania elementów
		}
	}
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ef 90       	pop	r14
 652:	df 90       	pop	r13
 654:	cf 90       	pop	r12
 656:	bf 90       	pop	r11
 658:	af 90       	pop	r10
 65a:	8f 90       	pop	r8
 65c:	7f 90       	pop	r7
 65e:	6f 90       	pop	r6
 660:	4f 90       	pop	r4
 662:	3f 90       	pop	r3
 664:	2f 90       	pop	r2
 666:	08 95       	ret

00000668 <Menu_SelectNext>:

void Menu_SelectNext()
{
	uint8_t no=Menu_GetMenuItemsNo();
 668:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
	menuindex++;
 66c:	90 91 0b 01 	lds	r25, 0x010B
 670:	9f 5f       	subi	r25, 0xFF	; 255
	if(no > Menu_GetMenuRows())        //Czy liczba pozycji menu jest wiêksza ni¿ liczba wywietlanych pozycji?
 672:	83 30       	cpi	r24, 0x03	; 3
 674:	60 f0       	brcs	.+24     	; 0x68e <Menu_SelectNext+0x26>
		{
			int8_t dist;               //Odleg³oæ pomiêdzy pierwsz¹ wywietlan¹ pozycj¹, a pozycj¹ podwietlon¹
			if(menuindex < menufirstpos) dist=no - menufirstpos + menuindex; //Jest zale¿na od tego, któa z pozycji jest wiêksza
 676:	20 91 0a 01 	lds	r18, 0x010A
 67a:	39 2f       	mov	r19, r25
 67c:	32 1b       	sub	r19, r18
 67e:	92 17       	cp	r25, r18
 680:	0c f4       	brge	.+2      	; 0x684 <Menu_SelectNext+0x1c>
 682:	38 0f       	add	r19, r24
			   else dist=menuindex-menufirstpos;
			if(dist >= Menu_GetMenuRows()) menufirstpos++;  //Koniec ekranu, trzeba przewijaæ
 684:	32 30       	cpi	r19, 0x02	; 2
 686:	1c f0       	brlt	.+6      	; 0x68e <Menu_SelectNext+0x26>
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	20 93 0a 01 	sts	0x010A, r18
		}
	menuindex%=no;     //Liczymy wszysko modulo liczba pozycji w menu
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	89 2f       	mov	r24, r25
 694:	99 27       	eor	r25, r25
 696:	87 fd       	sbrc	r24, 7
 698:	90 95       	com	r25
 69a:	b9 01       	movw	r22, r18
 69c:	0e 94 2c 04 	call	0x858	; 0x858 <__divmodhi4>
 6a0:	80 93 0b 01 	sts	0x010B, r24
	menufirstpos%=no;
 6a4:	80 91 0a 01 	lds	r24, 0x010A
 6a8:	99 27       	eor	r25, r25
 6aa:	87 fd       	sbrc	r24, 7
 6ac:	90 95       	com	r25
 6ae:	b9 01       	movw	r22, r18
 6b0:	0e 94 2c 04 	call	0x858	; 0x858 <__divmodhi4>
 6b4:	80 93 0a 01 	sts	0x010A, r24
	Menu_Show();      //Wywietl menu
 6b8:	0c 94 ba 02 	jmp	0x574	; 0x574 <Menu_Show>

000006bc <Menu_SelectPrev>:
}

void Menu_SelectPrev()
{
 6bc:	cf 93       	push	r28
	if(menuindex > 0)
 6be:	80 91 0b 01 	lds	r24, 0x010B
 6c2:	90 91 0a 01 	lds	r25, 0x010A
 6c6:	18 16       	cp	r1, r24
 6c8:	4c f4       	brge	.+18     	; 0x6dc <Menu_SelectPrev+0x20>
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
 6cc:	28 0f       	add	r18, r24
	{
		if(menuindex == menufirstpos) menufirstpos--;
 6ce:	89 13       	cpse	r24, r25
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <Menu_SelectPrev+0x1a>
 6d2:	20 93 0a 01 	sts	0x010A, r18
		menuindex--;               //Poprzedni element
 6d6:	20 93 0b 01 	sts	0x010B, r18
 6da:	14 c0       	rjmp	.+40     	; 0x704 <Menu_SelectPrev+0x48>
	}
	 else
	{
		if(menufirstpos == 0)
 6dc:	91 11       	cpse	r25, r1
 6de:	0d c0       	rjmp	.+26     	; 0x6fa <Menu_SelectPrev+0x3e>
		{
			menuindex=Menu_GetMenuItemsNo()-1;  //Zawijamy menu
 6e0:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
 6e4:	cf ef       	ldi	r28, 0xFF	; 255
 6e6:	c8 0f       	add	r28, r24
 6e8:	c0 93 0b 01 	sts	0x010B, r28
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos=menuindex;  //Jeli mamy mniej pozycji menu ni¿ linii na LCD to nie zmieniamy numeru pierwszej pozycji menu
 6ec:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	40 f0       	brcs	.+16     	; 0x704 <Menu_SelectPrev+0x48>
 6f4:	c0 93 0a 01 	sts	0x010A, r28
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <Menu_SelectPrev+0x48>
		} else menuindex=Menu_GetMenuItemsNo()-1;
 6fa:	0e 94 9b 02 	call	0x536	; 0x536 <Menu_GetMenuItemsNo>
 6fe:	81 50       	subi	r24, 0x01	; 1
 700:	80 93 0b 01 	sts	0x010B, r24
	}
	Menu_Show();     //Wywietl menu
}
 704:	cf 91       	pop	r28
		{
			menuindex=Menu_GetMenuItemsNo()-1;  //Zawijamy menu
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos=menuindex;  //Jeli mamy mniej pozycji menu ni¿ linii na LCD to nie zmieniamy numeru pierwszej pozycji menu
		} else menuindex=Menu_GetMenuItemsNo()-1;
	}
	Menu_Show();     //Wywietl menu
 706:	0c 94 ba 02 	jmp	0x574	; 0x574 <Menu_Show>

0000070a <Menu_Back>:
}

void Menu_Back()
{
	menufirstpos=0;
 70a:	10 92 0a 01 	sts	0x010A, r1
	menuindex=0;
 70e:	10 92 0b 01 	sts	0x010B, r1
	currMenuPtr=currMenuPtr->parent;
 712:	e0 91 00 01 	lds	r30, 0x0100
 716:	f0 91 01 01 	lds	r31, 0x0101
 71a:	34 96       	adiw	r30, 0x04	; 4
 71c:	85 91       	lpm	r24, Z+
 71e:	95 91       	lpm	r25, Z+
 720:	90 93 01 01 	sts	0x0101, r25
 724:	80 93 00 01 	sts	0x0100, r24
 728:	08 95       	ret

0000072a <Menu_Click>:
}

void Menu_Click()
{
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
	const __flash struct _menuitem *tmpmenuitem=Menu_GetMenuItem(menuindex);
 72e:	80 91 0b 01 	lds	r24, 0x010B
 732:	0e 94 aa 02 	call	0x554	; 0x554 <Menu_GetMenuItem>
	const __flash struct _menuitem *submenu=tmpmenuitem->submenu;
 736:	fc 01       	movw	r30, r24
 738:	36 96       	adiw	r30, 0x06	; 6
 73a:	c5 91       	lpm	r28, Z+
 73c:	d5 91       	lpm	r29, Z+
 73e:	32 97       	sbiw	r30, 0x02	; 2

    menuitemfuncptr mfptr=tmpmenuitem->menuitemfunc;
 740:	34 97       	sbiw	r30, 0x04	; 4
 742:	05 90       	lpm	r0, Z+
 744:	f4 91       	lpm	r31, Z
 746:	e0 2d       	mov	r30, r0
	if(mfptr) (*mfptr)();
 748:	30 97       	sbiw	r30, 0x00	; 0
 74a:	09 f0       	breq	.+2      	; 0x74e <Menu_Click+0x24>
 74c:	09 95       	icall
	if(submenu)
 74e:	20 97       	sbiw	r28, 0x00	; 0
 750:	41 f0       	breq	.+16     	; 0x762 <Menu_Click+0x38>
	 {
	  currMenuPtr=submenu;
 752:	d0 93 01 01 	sts	0x0101, r29
 756:	c0 93 00 01 	sts	0x0100, r28
	  menuindex=0;
 75a:	10 92 0b 01 	sts	0x010B, r1
	  menufirstpos=0;
 75e:	10 92 0a 01 	sts	0x010A, r1
     }
    Menu_Show();
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
	 {
	  currMenuPtr=submenu;
	  menuindex=0;
	  menufirstpos=0;
     }
    Menu_Show();
 766:	0c 94 ba 02 	jmp	0x574	; 0x574 <Menu_Show>

0000076a <menufunc1>:

const __flash struct _menuitem const __flash menu = {PGM_STR("Menu1"), menufunc1, 0, 0, &menu1};

void menufunc1()
{
	lcd_cls();
 76a:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Menu 1"));
 76e:	6a ea       	ldi	r22, 0xAA	; 170
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 778:	2f ef       	ldi	r18, 0xFF	; 255
 77a:	87 ea       	ldi	r24, 0xA7	; 167
 77c:	91 e6       	ldi	r25, 0x61	; 97
 77e:	21 50       	subi	r18, 0x01	; 1
 780:	80 40       	sbci	r24, 0x00	; 0
 782:	90 40       	sbci	r25, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <menufunc1+0x14>
 786:	00 c0       	rjmp	.+0      	; 0x788 <menufunc1+0x1e>
 788:	00 00       	nop
 78a:	08 95       	ret

0000078c <menufunc2>:
	_delay_ms(2000);
}

void menufunc2()
{
	lcd_cls();
 78c:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Menu 3"));
 790:	63 ea       	ldi	r22, 0xA3	; 163
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	87 ea       	ldi	r24, 0xA7	; 167
 79e:	91 e6       	ldi	r25, 0x61	; 97
 7a0:	21 50       	subi	r18, 0x01	; 1
 7a2:	80 40       	sbci	r24, 0x00	; 0
 7a4:	90 40       	sbci	r25, 0x00	; 0
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <menufunc2+0x14>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <menufunc2+0x1e>
 7aa:	00 00       	nop
 7ac:	08 95       	ret

000007ae <menufunc3>:
	_delay_ms(2000);
}

void menufunc3()
{
	lcd_cls();
 7ae:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Menu 4"));
 7b2:	6c e9       	ldi	r22, 0x9C	; 156
 7b4:	70 e0       	ldi	r23, 0x00	; 0
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 7bc:	2f ef       	ldi	r18, 0xFF	; 255
 7be:	87 ea       	ldi	r24, 0xA7	; 167
 7c0:	91 e6       	ldi	r25, 0x61	; 97
 7c2:	21 50       	subi	r18, 0x01	; 1
 7c4:	80 40       	sbci	r24, 0x00	; 0
 7c6:	90 40       	sbci	r25, 0x00	; 0
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <menufunc3+0x14>
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <menufunc3+0x1e>
 7cc:	00 00       	nop
 7ce:	08 95       	ret

000007d0 <menufunc4>:
	_delay_ms(2000);
}

void menufunc4()
{
	lcd_cls();
 7d0:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Podmenu A1"));
 7d4:	61 e9       	ldi	r22, 0x91	; 145
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	87 ea       	ldi	r24, 0xA7	; 167
 7e2:	91 e6       	ldi	r25, 0x61	; 97
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <menufunc4+0x14>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <menufunc4+0x1e>
 7ee:	00 00       	nop
 7f0:	08 95       	ret

000007f2 <menufunc5>:
	_delay_ms(2000);
}

void menufunc5()
{
	lcd_cls();
 7f2:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Podmenu A3"));
 7f6:	66 e8       	ldi	r22, 0x86	; 134
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 800:	2f ef       	ldi	r18, 0xFF	; 255
 802:	87 ea       	ldi	r24, 0xA7	; 167
 804:	91 e6       	ldi	r25, 0x61	; 97
 806:	21 50       	subi	r18, 0x01	; 1
 808:	80 40       	sbci	r24, 0x00	; 0
 80a:	90 40       	sbci	r25, 0x00	; 0
 80c:	e1 f7       	brne	.-8      	; 0x806 <menufunc5+0x14>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <menufunc5+0x1e>
 810:	00 00       	nop
 812:	08 95       	ret

00000814 <menufunc6>:
	_delay_ms(2000);
}

void menufunc6()
{
	lcd_cls();
 814:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Podmenu B1"));
 818:	6b e7       	ldi	r22, 0x7B	; 123
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 822:	2f ef       	ldi	r18, 0xFF	; 255
 824:	87 ea       	ldi	r24, 0xA7	; 167
 826:	91 e6       	ldi	r25, 0x61	; 97
 828:	21 50       	subi	r18, 0x01	; 1
 82a:	80 40       	sbci	r24, 0x00	; 0
 82c:	90 40       	sbci	r25, 0x00	; 0
 82e:	e1 f7       	brne	.-8      	; 0x828 <menufunc6+0x14>
 830:	00 c0       	rjmp	.+0      	; 0x832 <menufunc6+0x1e>
 832:	00 00       	nop
 834:	08 95       	ret

00000836 <menufunc7>:
	_delay_ms(2000);
}

void menufunc7()
{
	lcd_cls();
 836:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_cls>
	lcd_puttext(PSTR("Podmenu B2"));
 83a:	60 e7       	ldi	r22, 0x70	; 112
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	0e 94 54 02 	call	0x4a8	; 0x4a8 <lcd_puttext>
 844:	2f ef       	ldi	r18, 0xFF	; 255
 846:	87 ea       	ldi	r24, 0xA7	; 167
 848:	91 e6       	ldi	r25, 0x61	; 97
 84a:	21 50       	subi	r18, 0x01	; 1
 84c:	80 40       	sbci	r24, 0x00	; 0
 84e:	90 40       	sbci	r25, 0x00	; 0
 850:	e1 f7       	brne	.-8      	; 0x84a <menufunc7+0x14>
 852:	00 c0       	rjmp	.+0      	; 0x854 <menufunc7+0x1e>
 854:	00 00       	nop
 856:	08 95       	ret

00000858 <__divmodhi4>:
 858:	97 fb       	bst	r25, 7
 85a:	07 2e       	mov	r0, r23
 85c:	16 f4       	brtc	.+4      	; 0x862 <__divmodhi4+0xa>
 85e:	00 94       	com	r0
 860:	07 d0       	rcall	.+14     	; 0x870 <__divmodhi4_neg1>
 862:	77 fd       	sbrc	r23, 7
 864:	09 d0       	rcall	.+18     	; 0x878 <__divmodhi4_neg2>
 866:	0e 94 40 04 	call	0x880	; 0x880 <__udivmodhi4>
 86a:	07 fc       	sbrc	r0, 7
 86c:	05 d0       	rcall	.+10     	; 0x878 <__divmodhi4_neg2>
 86e:	3e f4       	brtc	.+14     	; 0x87e <__divmodhi4_exit>

00000870 <__divmodhi4_neg1>:
 870:	90 95       	com	r25
 872:	81 95       	neg	r24
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	08 95       	ret

00000878 <__divmodhi4_neg2>:
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255

0000087e <__divmodhi4_exit>:
 87e:	08 95       	ret

00000880 <__udivmodhi4>:
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	51 e1       	ldi	r21, 0x11	; 17
 886:	07 c0       	rjmp	.+14     	; 0x896 <__udivmodhi4_ep>

00000888 <__udivmodhi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	a6 17       	cp	r26, r22
 88e:	b7 07       	cpc	r27, r23
 890:	10 f0       	brcs	.+4      	; 0x896 <__udivmodhi4_ep>
 892:	a6 1b       	sub	r26, r22
 894:	b7 0b       	sbc	r27, r23

00000896 <__udivmodhi4_ep>:
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	5a 95       	dec	r21
 89c:	a9 f7       	brne	.-22     	; 0x888 <__udivmodhi4_loop>
 89e:	80 95       	com	r24
 8a0:	90 95       	com	r25
 8a2:	bc 01       	movw	r22, r24
 8a4:	cd 01       	movw	r24, r26
 8a6:	08 95       	ret

000008a8 <_exit>:
 8a8:	f8 94       	cli

000008aa <__stop_program>:
 8aa:	ff cf       	rjmp	.-2      	; 0x8aa <__stop_program>
