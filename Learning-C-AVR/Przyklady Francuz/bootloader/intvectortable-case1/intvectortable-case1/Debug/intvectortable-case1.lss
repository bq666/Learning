
intvectortable-case1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000211  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000165  00000000  00000000  000003ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ea  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b8  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000205  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000180  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <IntTable>:
	}

	boot_page_write_safe(strona);     //Zapisz bufor do pamiêci FLASH
	boot_rww_enable_safe();			  //Odblokuj dostêp do pamiêci RWW
	SREG = sreg;					  //Odtwórz stan przerwañ
}
   0:	2b c0       	rjmp	.+86     	; 0x58 <reset>
   2:	00 00       	nop
   4:	30 c0       	rjmp	.+96     	; 0x66 <__bad_interrupt>
   6:	00 00       	nop
   8:	2e c0       	rjmp	.+92     	; 0x66 <__bad_interrupt>
   a:	00 00       	nop
   c:	2c c0       	rjmp	.+88     	; 0x66 <__bad_interrupt>
   e:	00 00       	nop
  10:	2a c0       	rjmp	.+84     	; 0x66 <__bad_interrupt>
  12:	00 00       	nop
  14:	28 c0       	rjmp	.+80     	; 0x66 <__bad_interrupt>
  16:	00 00       	nop
  18:	26 c0       	rjmp	.+76     	; 0x66 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	24 c0       	rjmp	.+72     	; 0x66 <__bad_interrupt>
  1e:	00 00       	nop
  20:	22 c0       	rjmp	.+68     	; 0x66 <__bad_interrupt>
  22:	00 00       	nop
  24:	20 c0       	rjmp	.+64     	; 0x66 <__bad_interrupt>
  26:	00 00       	nop
  28:	1e c0       	rjmp	.+60     	; 0x66 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1c c0       	rjmp	.+56     	; 0x66 <__bad_interrupt>
  2e:	00 00       	nop
  30:	1a c0       	rjmp	.+52     	; 0x66 <__bad_interrupt>
  32:	00 00       	nop
  34:	18 c0       	rjmp	.+48     	; 0x66 <__bad_interrupt>
  36:	00 00       	nop
  38:	18 c0       	rjmp	.+48     	; 0x6a <__vector_14>
	...

0000003c <__ctors_end>:
  3c:	11 e0       	ldi	r17, 0x01	; 1
  3e:	a0 e0       	ldi	r26, 0x00	; 0
  40:	b1 e0       	ldi	r27, 0x01	; 1
  42:	e4 ea       	ldi	r30, 0xA4	; 164
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	00 e0       	ldi	r16, 0x00	; 0
  48:	0b bf       	out	0x3b, r16	; 59
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
  4c:	07 90       	elpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a2 30       	cpi	r26, 0x02	; 2
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__SREG__+0xd>

00000056 <jmp_main>:
  56:	14 c0       	rjmp	.+40     	; 0x80 <main>

00000058 <reset>:
  58:	11 24       	eor	r1, r1
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	90 e1       	ldi	r25, 0x10	; 16
  5e:	9e bf       	out	0x3e, r25	; 62
  60:	8d bf       	out	0x3d, r24	; 61
  62:	1f be       	out	0x3f, r1	; 63
  64:	eb cf       	rjmp	.-42     	; 0x3c <__ctors_end>

00000066 <__bad_interrupt>:
  66:	f8 94       	cli
  68:	ff cf       	rjmp	.-2      	; 0x68 <__bad_interrupt+0x2>

0000006a <__vector_14>:
  6a:	1f 92       	push	r1
  6c:	0f 92       	push	r0
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	0f 92       	push	r0
  72:	11 24       	eor	r1, r1
  74:	c0 9a       	sbi	0x18, 0	; 24
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8f e9       	ldi	r24, 0x9F	; 159
  82:	9f e0       	ldi	r25, 0x0F	; 15
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x4>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0xa>
  8a:	00 00       	nop

int main()
{
	volatile static int x=10;
	_delay_us(1000);
	x=x+1;
  8c:	80 91 00 01 	lds	r24, 0x0100
  90:	90 91 01 01 	lds	r25, 0x0101
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 01 01 	sts	0x0101, r25
  9a:	80 93 00 01 	sts	0x0100, r24
}
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret
