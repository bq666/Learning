
LEDMUXDim.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ba  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000028a  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c9  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a6  00000000  00000000  00000711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c7  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_14>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ea eb       	ldi	r30, 0xBA	; 186
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a5 30       	cpi	r26, 0x05	; 5
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  aa:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_16>:
#define LEDDISPNO	4          //Liczba wyúwietlaczy

volatile uint8_t LEDDIGITS[LEDDISPNO];  //Tablica zawierajπca dane do wyúwietlania

ISR(TIMER0_OVF_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	static uint8_t LEDNO;

	PORTC|=0x0F;		//Wy≥πcz wszystkie wyùwietlacze
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	88 b9       	out	0x08, r24	; 8
	LEDNO=(LEDNO+1)%LEDDISPNO;
  cc:	80 91 00 01 	lds	r24, 0x0100
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	83 70       	andi	r24, 0x03	; 3
  d6:	99 27       	eor	r25, r25
  d8:	80 93 00 01 	sts	0x0100, r24
	ShowOnLED(LEDDIGITS[LEDNO]);
  dc:	fc 01       	movw	r30, r24
  de:	ef 5f       	subi	r30, 0xFF	; 255
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	20 81       	ld	r18, Z
const uint8_t DP=0x80;

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  e4:	82 2f       	mov	r24, r18
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	8b 30       	cpi	r24, 0x0B	; 11
  ec:	91 05       	cpc	r25, r1
  ee:	2c f4       	brge	.+10     	; 0xfa <__vector_16+0x48>
  f0:	fc 01       	movw	r30, r24
  f2:	e8 59       	subi	r30, 0x98	; 152
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	84 91       	lpm	r24, Z
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_16+0x4a>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropkπ dziesiÍtnπ na LED
  fc:	27 fd       	sbrc	r18, 7
  fe:	8f 77       	andi	r24, 0x7F	; 127
	LEDPORT=tmp;
 100:	8b b9       	out	0x0b, r24	; 11
	static uint8_t LEDNO;

	PORTC|=0x0F;		//Wy≥πcz wszystkie wyùwietlacze
	LEDNO=(LEDNO+1)%LEDDISPNO;
	ShowOnLED(LEDDIGITS[LEDNO]);
	PORTC=(PORTC & 0xF0) | (~(1<<LEDNO) & 0x0F);	//Wybierz kolejny wyùwietlacz
 102:	28 b1       	in	r18, 0x08	; 8
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	00 90 00 01 	lds	r0, 0x0100
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_16+0x60>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_16+0x5c>
 116:	80 95       	com	r24
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	82 2b       	or	r24, r18
 11e:	88 b9       	out	0x08, r24	; 8
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_14>:
	PORTC|=0x0F;	//Wy≥πcz wszystkie wyùwietlacze
}*/

ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	PORTC|=0x01;	//Wy≥πcz wszystkie wyùwietlacze
 134:	40 9a       	sbi	0x08, 0	; 8
	PORTC|=0x02;
 136:	41 9a       	sbi	0x08, 1	; 8
	PORTC|=0x04;
 138:	42 9a       	sbi	0x08, 2	; 8
	PORTC|=0x08;
 13a:	43 9a       	sbi	0x08, 3	; 8
	asm volatile("RETI\n\t"::);
 13c:	18 95       	reti

0000013e <Timer0Init>:
}

void Timer0Init()
{
	TCCR0B=_BV(CS01);	//Preskaler CLKIO/8
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=_BV(TOIE0);	//Odblokuj przerwanie nadmiaru timera 0
 142:	ee e6       	ldi	r30, 0x6E	; 110
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <Timer0InitWithDimmer>:
}

void Timer0InitWithDimmer()
{
	TIMSK0|=_BV(OCIE0A);		//W≥πcz przerwanie Compare Match A
 14e:	ee e6       	ldi	r30, 0x6E	; 110
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
	OCR0A=255;
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	87 bd       	out	0x27, r24	; 39
	Timer0Init();
 15c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <Timer0Init>

00000160 <main>:
}

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu sπ wyjúciem
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	8a b9       	out	0x0a, r24	; 10
	DDRC|=0x0F;			//Piny PB0-PB3 jako wyjúcia
 164:	87 b1       	in	r24, 0x07	; 7
 166:	8f 60       	ori	r24, 0x0F	; 15
 168:	87 b9       	out	0x07, r24	; 7

	Timer0InitWithDimmer();
 16a:	0e 94 a7 00 	call	0x14e	; 0x14e <Timer0InitWithDimmer>
	sei();
 16e:	78 94       	sei

	LEDDIGITS[0]=1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 01 01 	sts	0x0101, r24
	LEDDIGITS[1]=2;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 02 01 	sts	0x0102, r24
	LEDDIGITS[2]=3;
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	80 93 03 01 	sts	0x0103, r24
	LEDDIGITS[3]=4;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 04 01 	sts	0x0104, r24
	
	while(1)
	{
	 OCR0A=200;
 188:	98 ec       	ldi	r25, 0xC8	; 200
	 _delay_ms(1000);
	 OCR0A=100;
 18a:	84 e6       	ldi	r24, 0x64	; 100
	LEDDIGITS[2]=3;
	LEDDIGITS[3]=4;
	
	while(1)
	{
	 OCR0A=200;
 18c:	97 bd       	out	0x27, r25	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	33 ed       	ldi	r19, 0xD3	; 211
 192:	40 e3       	ldi	r20, 0x30	; 48
 194:	21 50       	subi	r18, 0x01	; 1
 196:	30 40       	sbci	r19, 0x00	; 0
 198:	40 40       	sbci	r20, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x34>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x3e>
 19e:	00 00       	nop
	 _delay_ms(1000);
	 OCR0A=100;
 1a0:	87 bd       	out	0x27, r24	; 39
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	33 ed       	ldi	r19, 0xD3	; 211
 1a6:	40 e3       	ldi	r20, 0x30	; 48
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	30 40       	sbci	r19, 0x00	; 0
 1ac:	40 40       	sbci	r20, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x48>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x52>
 1b2:	00 00       	nop
 1b4:	eb cf       	rjmp	.-42     	; 0x18c <main+0x2c>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
