
Tracepoint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012d  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ab  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000066  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000143  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000100  00000000  00000000  0000056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000066f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

const char __flash tekst[] = "Tekst w FLASH";

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a e0       	ldi	r18, 0x0A	; 10
  8c:	30 e0       	ldi	r19, 0x00	; 0
	volatile int count;

	for(int x=0; x < 10; x++)
	{
		count+=11;
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	9a 81       	ldd	r25, Y+2	; 0x02
  92:	0b 96       	adiw	r24, 0x0b	; 11
  94:	9a 83       	std	Y+2, r25	; 0x02
  96:	89 83       	std	Y+1, r24	; 0x01
		for(int y=1; y < 10; y++)
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
		{
			count+=y;
  9c:	49 81       	ldd	r20, Y+1	; 0x01
  9e:	5a 81       	ldd	r21, Y+2	; 0x02
  a0:	48 0f       	add	r20, r24
  a2:	59 1f       	adc	r21, r25
  a4:	5a 83       	std	Y+2, r21	; 0x02
  a6:	49 83       	std	Y+1, r20	; 0x01
	volatile int count;

	for(int x=0; x < 10; x++)
	{
		count+=11;
		for(int y=1; y < 10; y++)
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	91 05       	cpc	r25, r1
  ae:	b1 f7       	brne	.-20     	; 0x9c <main+0x1c>
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	31 09       	sbc	r19, r1

int main(void)
{
	volatile int count;

	for(int x=0; x < 10; x++)
  b4:	21 15       	cp	r18, r1
  b6:	31 05       	cpc	r19, r1
  b8:	51 f7       	brne	.-44     	; 0x8e <main+0xe>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
			count+=y;
		}
	}

	for(int i=1; i < 10; i++)
	count+=i;
  be:	29 81       	ldd	r18, Y+1	; 0x01
  c0:	3a 81       	ldd	r19, Y+2	; 0x02
  c2:	28 0f       	add	r18, r24
  c4:	39 1f       	adc	r19, r25
  c6:	3a 83       	std	Y+2, r19	; 0x02
  c8:	29 83       	std	Y+1, r18	; 0x01
		{
			count+=y;
		}
	}

	for(int i=1; i < 10; i++)
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	8a 30       	cpi	r24, 0x0A	; 10
  ce:	91 05       	cpc	r25, r1
  d0:	b1 f7       	brne	.-20     	; 0xbe <main+0x3e>
  d2:	87 ee       	ldi	r24, 0xE7	; 231
  d4:	93 e0       	ldi	r25, 0x03	; 3
	count+=i;

	for(int i=1; i < 1000; i++)
	count++;
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	3a 83       	std	Y+2, r19	; 0x02
  e0:	29 83       	std	Y+1, r18	; 0x01
  e2:	01 97       	sbiw	r24, 0x01	; 1
	}

	for(int i=1; i < 10; i++)
	count+=i;

	for(int i=1; i < 1000; i++)
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	b9 f7       	brne	.-18     	; 0xd6 <main+0x56>
	count++;

	count=tekst[0];
  e8:	84 e5       	ldi	r24, 0x54	; 84
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x70>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
