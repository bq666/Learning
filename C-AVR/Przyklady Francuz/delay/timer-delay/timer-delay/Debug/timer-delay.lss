
timer-delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f8  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000de  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a0  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d9  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014e  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Wait_for>:

#include <avr/io.h>

void Wait_for(uint16_t delay)              //Realizuje opóŸnienie o zadanym czasie liczonym
{                                          //w odcinkach co 100 us
	TCCR1B=(1<<CS12) | (1<<CS10);          //Preskaler timera 1024
  80:	25 e0       	ldi	r18, 0x05	; 5
  82:	20 93 81 00 	sts	0x0081, r18
	TCNT1=0;                               //Pobierz aktualny stan licznika timera
  86:	10 92 85 00 	sts	0x0085, r1
  8a:	10 92 84 00 	sts	0x0084, r1
	uint16_t val=delay*(F_CPU/10000UL)/1024;   //Przelicz opóŸnienie
  8e:	9c 01       	movw	r18, r24
  90:	a0 e4       	ldi	r26, 0x40	; 64
  92:	b6 e0       	ldi	r27, 0x06	; 6
  94:	0e 94 6b 00 	call	0xd6	; 0xd6 <__umulhisi3>
  98:	dc 01       	movw	r26, r24
  9a:	cb 01       	movw	r24, r22
  9c:	07 2e       	mov	r0, r23
  9e:	7a e0       	ldi	r23, 0x0A	; 10
  a0:	b6 95       	lsr	r27
  a2:	a7 95       	ror	r26
  a4:	97 95       	ror	r25
  a6:	87 95       	ror	r24
  a8:	7a 95       	dec	r23
  aa:	d1 f7       	brne	.-12     	; 0xa0 <Wait_for+0x20>
  ac:	70 2d       	mov	r23, r0
  ae:	bc 01       	movw	r22, r24
	
	while(TCNT1 < val);                    //Czekaj
  b0:	e4 e8       	ldi	r30, 0x84	; 132
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	86 17       	cp	r24, r22
  ba:	97 07       	cpc	r25, r23
  bc:	d8 f3       	brcs	.-10     	; 0xb4 <Wait_for+0x34>
}
  be:	08 95       	ret

000000c0 <main>:


int main(void)
{
	DDRB=1<<PB5;  //Port steruj¹cy LEDem
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	84 b9       	out	0x04, r24	; 4
	while(1)
	{
		PORTB^=(1<<PB5);     //Zmieñ stan wyjœcia steruj¹cego LED na przeciwny
  c4:	c0 e2       	ldi	r28, 0x20	; 32
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8c 27       	eor	r24, r28
  ca:	85 b9       	out	0x05, r24	; 5
		Wait_for(10000);     //Odczekaj sekundê
  cc:	80 e1       	ldi	r24, 0x10	; 16
  ce:	97 e2       	ldi	r25, 0x27	; 39
  d0:	0e 94 40 00 	call	0x80	; 0x80 <Wait_for>
  d4:	f8 cf       	rjmp	.-16     	; 0xc6 <main+0x6>

000000d6 <__umulhisi3>:
  d6:	a2 9f       	mul	r26, r18
  d8:	b0 01       	movw	r22, r0
  da:	b3 9f       	mul	r27, r19
  dc:	c0 01       	movw	r24, r0
  de:	a3 9f       	mul	r26, r19
  e0:	70 0d       	add	r23, r0
  e2:	81 1d       	adc	r24, r1
  e4:	11 24       	eor	r1, r1
  e6:	91 1d       	adc	r25, r1
  e8:	b2 9f       	mul	r27, r18
  ea:	70 0d       	add	r23, r0
  ec:	81 1d       	adc	r24, r1
  ee:	11 24       	eor	r1, r1
  f0:	91 1d       	adc	r25, r1
  f2:	08 95       	ret

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
