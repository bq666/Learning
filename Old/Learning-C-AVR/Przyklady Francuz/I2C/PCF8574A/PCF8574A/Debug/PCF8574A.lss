
PCF8574A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004b8  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cc  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000274  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023b  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001387  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_WaitForComplete>:
void I2C_SetBusSpeed(uint16_t speed);	//Ustaw prêdkoœæ magistrali I2C (Prêdkoœæ wyniesie speed*100[Hz])
void I2C_SendAddr(uint8_t address);		//Wyœlij adres urz¹dzenia slave
void I2C_SendByte(uint8_t byte);		//Wyœlij bajt danych do slave
uint8_t I2C_ReceiveData_ACK();			//Odbierz bajt danych od slave, wysy³aj¹c ACK
uint8_t I2C_ReceiveData_NACK();			//Odbierz bajt danych od slave, nie wysy³aj ACK
static inline void I2C_WaitForComplete() {while (!(TWCR & _BV(TWINT)));};		//Zaczekaj na koniec bie¿¹cej operacji I2C
  90:	80 91 bc 00 	lds	r24, 0x00BC
  94:	87 ff       	sbrs	r24, 7
  96:	fc cf       	rjmp	.-8      	; 0x90 <I2C_WaitForComplete>
  98:	08 95       	ret

0000009a <I2C_Start>:
	I2C_SetBusSpeed(I2CBUSCLOCK/100);
}

void I2C_Start()
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
  9a:	84 ea       	ldi	r24, 0xA4	; 164
  9c:	80 93 bc 00 	sts	0x00BC, r24
	I2C_WaitForComplete();
  a0:	0e 94 48 00 	call	0x90	; 0x90 <I2C_WaitForComplete>
	if((TW_STATUS!=TW_START) && (TW_STATUS!=TW_REP_START)) I2C_SetError(I2C_STARTError);
  a4:	80 91 b9 00 	lds	r24, 0x00B9
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	41 f0       	breq	.+16     	; 0xbe <I2C_Start+0x24>
  ae:	80 91 b9 00 	lds	r24, 0x00B9
  b2:	88 7f       	andi	r24, 0xF8	; 248
  b4:	80 31       	cpi	r24, 0x10	; 16
  b6:	19 f0       	breq	.+6      	; 0xbe <I2C_Start+0x24>
#define I2C_STARTError	1
#define I2C_NoNACK		3
#define I2C_NoACK		4

extern uint8_t I2C_Error;
inline void I2C_SetError(uint8_t err) { I2C_Error=err;};
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 00 01 	sts	0x0100, r24
  be:	08 95       	ret

000000c0 <I2C_SendAddr>:
}

void I2C_SendAddr(uint8_t address)
{
  c0:	cf 93       	push	r28
   uint8_t Status;
   
   if((address & 0x01)==0) Status=TW_MT_SLA_ACK;
  c2:	80 fd       	sbrc	r24, 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <I2C_SendAddr+0xa>
  c6:	c8 e1       	ldi	r28, 0x18	; 24
  c8:	01 c0       	rjmp	.+2      	; 0xcc <I2C_SendAddr+0xc>
   else Status=TW_MR_SLA_ACK; 
  ca:	c0 e4       	ldi	r28, 0x40	; 64
   
   TWDR=address; 
  cc:	80 93 bb 00 	sts	0x00BB, r24
   TWCR=_BV(TWINT) | _BV(TWEN);
  d0:	84 e8       	ldi	r24, 0x84	; 132
  d2:	80 93 bc 00 	sts	0x00BC, r24
   I2C_WaitForComplete();
  d6:	0e 94 48 00 	call	0x90	; 0x90 <I2C_WaitForComplete>
   if(TW_STATUS!=Status) I2C_SetError(I2C_NoACK); else I2C_SetError(I2C_OK);
  da:	20 91 b9 00 	lds	r18, 0x00B9
  de:	28 7f       	andi	r18, 0xF8	; 248
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	21 f0       	breq	.+8      	; 0xf4 <I2C_SendAddr+0x34>
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	80 93 00 01 	sts	0x0100, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <I2C_SendAddr+0x38>
  f4:	10 92 00 01 	sts	0x0100, r1
}
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <I2C_SendByte>:

void I2C_SendByte(uint8_t byte)
{
   TWDR=byte; 
  fc:	80 93 bb 00 	sts	0x00BB, r24
   TWCR=_BV(TWINT) | _BV(TWEN);
 100:	84 e8       	ldi	r24, 0x84	; 132
 102:	80 93 bc 00 	sts	0x00BC, r24
   I2C_WaitForComplete();
 106:	0e 94 48 00 	call	0x90	; 0x90 <I2C_WaitForComplete>
   if(TW_STATUS!=TW_MT_DATA_ACK) I2C_SetError(I2C_NoACK);
 10a:	80 91 b9 00 	lds	r24, 0x00B9
 10e:	88 7f       	andi	r24, 0xF8	; 248
 110:	88 32       	cpi	r24, 0x28	; 40
 112:	19 f0       	breq	.+6      	; 0x11a <I2C_SendByte+0x1e>
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	80 93 00 01 	sts	0x0100, r24
 11a:	08 95       	ret

0000011c <I2C_SetBusSpeed>:
  return TWDR;
}

void I2C_SetBusSpeed(uint16_t speed)
{
	speed=(F_CPU/speed/100-16)/2;		//speed=TWBR*4^TWPS
 11c:	9c 01       	movw	r18, r24
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	71 e7       	ldi	r23, 0x71	; 113
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <__udivmodsi4>
 12e:	20 51       	subi	r18, 0x10	; 16
 130:	31 09       	sbc	r19, r1
 132:	41 09       	sbc	r20, r1
 134:	51 09       	sbc	r21, r1
 136:	56 95       	lsr	r21
 138:	47 95       	ror	r20
 13a:	37 95       	ror	r19
 13c:	27 95       	ror	r18
	uint8_t prescaler=0;
 13e:	90 e0       	ldi	r25, 0x00	; 0
	while(speed>255)				//Oblicz wartoœæ preskalera
 140:	2f 3f       	cpi	r18, 0xFF	; 255
 142:	31 05       	cpc	r19, r1
 144:	39 f0       	breq	.+14     	; 0x154 <I2C_SetBusSpeed+0x38>
 146:	30 f0       	brcs	.+12     	; 0x154 <I2C_SetBusSpeed+0x38>
	 {
		prescaler++;
 148:	9f 5f       	subi	r25, 0xFF	; 255
		speed=speed/4;
 14a:	36 95       	lsr	r19
 14c:	27 95       	ror	r18
 14e:	36 95       	lsr	r19
 150:	27 95       	ror	r18
 152:	f6 cf       	rjmp	.-20     	; 0x140 <I2C_SetBusSpeed+0x24>
	 };
	TWSR=(TWSR & (_BV(TWPS1)|_BV(TWPS0))) | prescaler;
 154:	80 91 b9 00 	lds	r24, 0x00B9
 158:	83 70       	andi	r24, 0x03	; 3
 15a:	89 2b       	or	r24, r25
 15c:	80 93 b9 00 	sts	0x00B9, r24
	TWBR=speed;
 160:	20 93 b8 00 	sts	0x00B8, r18
 164:	08 95       	ret

00000166 <I2C_Init>:

uint8_t I2C_Error;

void I2C_Init()
{
	TWCR =_BV(TWEA) | _BV(TWEN);		//W³¹cz interfejs I2C
 166:	84 e4       	ldi	r24, 0x44	; 68
 168:	80 93 bc 00 	sts	0x00BC, r24
	I2C_SetBusSpeed(I2CBUSCLOCK/100);
 16c:	84 ef       	ldi	r24, 0xF4	; 244
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0c 94 8e 00 	jmp	0x11c	; 0x11c <I2C_SetBusSpeed>

00000174 <I2C_SendStartAndSelect>:
	TWSR=(TWSR & (_BV(TWPS1)|_BV(TWPS0))) | prescaler;
	TWBR=speed;
}

void I2C_SendStartAndSelect(uint8_t addr)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
	I2C_Start();
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_SendAddr(addr);
 184:	89 81       	ldd	r24, Y+1	; 0x01
}
 186:	0f 90       	pop	r0
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
}

void I2C_SendStartAndSelect(uint8_t addr)
{
	I2C_Start();
	I2C_SendAddr(addr);
 18c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <I2C_SendAddr>

00000190 <I2C_StartSelectWait>:
#include "I2Cbase.h"

#define PCF8574ADDR 0x70

void I2C_StartSelectWait(uint8_t addr)
{
 190:	cf 93       	push	r28
 192:	c8 2f       	mov	r28, r24
	do
	{
		I2C_SendStartAndSelect(addr);
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 ba 00 	call	0x174	; 0x174 <I2C_SendStartAndSelect>
	} while(I2C_Error==I2C_NoACK);
 19a:	80 91 00 01 	lds	r24, 0x0100
 19e:	84 30       	cpi	r24, 0x04	; 4
 1a0:	c9 f3       	breq	.-14     	; 0x194 <I2C_StartSelectWait+0x4>
}
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <main>:

int main()
{
	uint8_t x=0xaa;
	I2C_Init();
 1a6:	0e 94 b3 00 	call	0x166	; 0x166 <I2C_Init>

	I2C_StartSelectWait(PCF8574ADDR);
 1aa:	80 e7       	ldi	r24, 0x70	; 112
 1ac:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_StartSelectWait>
	} while(I2C_Error==I2C_NoACK);
}

int main()
{
	uint8_t x=0xaa;
 1b0:	ca ea       	ldi	r28, 0xAA	; 170
	I2C_Init();

	I2C_StartSelectWait(PCF8574ADDR);
	while(1)
	{
		I2C_SendByte(x);
 1b2:	8c 2f       	mov	r24, r28
 1b4:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_SendByte>
		x^=0xff;
 1b8:	c0 95       	com	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	2f ef       	ldi	r18, 0xFF	; 255
 1bc:	83 ed       	ldi	r24, 0xD3	; 211
 1be:	90 e3       	ldi	r25, 0x30	; 48
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x1a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x24>
 1ca:	00 00       	nop
 1cc:	f2 cf       	rjmp	.-28     	; 0x1b2 <main+0xc>

000001ce <__udivmodsi4>:
 1ce:	a1 e2       	ldi	r26, 0x21	; 33
 1d0:	1a 2e       	mov	r1, r26
 1d2:	aa 1b       	sub	r26, r26
 1d4:	bb 1b       	sub	r27, r27
 1d6:	fd 01       	movw	r30, r26
 1d8:	0d c0       	rjmp	.+26     	; 0x1f4 <__udivmodsi4_ep>

000001da <__udivmodsi4_loop>:
 1da:	aa 1f       	adc	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	ee 1f       	adc	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	a2 17       	cp	r26, r18
 1e4:	b3 07       	cpc	r27, r19
 1e6:	e4 07       	cpc	r30, r20
 1e8:	f5 07       	cpc	r31, r21
 1ea:	20 f0       	brcs	.+8      	; 0x1f4 <__udivmodsi4_ep>
 1ec:	a2 1b       	sub	r26, r18
 1ee:	b3 0b       	sbc	r27, r19
 1f0:	e4 0b       	sbc	r30, r20
 1f2:	f5 0b       	sbc	r31, r21

000001f4 <__udivmodsi4_ep>:
 1f4:	66 1f       	adc	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	1a 94       	dec	r1
 1fe:	69 f7       	brne	.-38     	; 0x1da <__udivmodsi4_loop>
 200:	60 95       	com	r22
 202:	70 95       	com	r23
 204:	80 95       	com	r24
 206:	90 95       	com	r25
 208:	9b 01       	movw	r18, r22
 20a:	ac 01       	movw	r20, r24
 20c:	bd 01       	movw	r22, r26
 20e:	cf 01       	movw	r24, r30
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
