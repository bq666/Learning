
WS2812B-SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000027d  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c5  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001d9  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000006c  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e8  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012b  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  78:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <WS2812B_UDR.1607>:

void WS2812B_send(uint8_t byte)
{
	void WS2812B_UDR(uint8_t byte)
	{
		while(!(UCSR0A & _BV(UDRE0)));  //Zaczekaj na miejsce w buforze
  80:	90 91 c0 00 	lds	r25, 0x00C0
  84:	95 ff       	sbrs	r25, 5
  86:	fc cf       	rjmp	.-8      	; 0x80 <WS2812B_UDR.1607>
		UDR0 = byte;       //Umieœæ w nim dane do wys³ania
  88:	80 93 c6 00 	sts	0x00C6, r24
  8c:	08 95       	ret

0000008e <WS2812B_init>:
	UBRR0=2;    //Dla 16 MHz daje to czas wysy³ania bitu równy 375 ns
}

void WS2812B_init()
{
	DDRD|=_BV(PD4);     //Pin SCK jest wyjœciem - master mode
  8e:	54 9a       	sbi	0x0a, 4	; 10
	UCSR0C=_BV(UMSEL01) | _BV(UMSEL00) | _BV(UCPHA0); // | _BV(UCPOL0); //Tryb SPI
  90:	82 ec       	ldi	r24, 0xC2	; 194
  92:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B=_BV(TXEN0);  //Potrzebujemy tylko MOSI
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24
  9c:	08 95       	ret

0000009e <WS2812B_reset>:

#define LEDNO   30           //Liczba LED¡w

static inline void SPI_WS_Reset()   //Taktowanie SPI dla sygna³u RESET
{
	UBRR0=49;  //Dla 16 MHz daje to czas trwania bitu równy 6,25 us, a bajtu 50 us
  9e:	81 e3       	ldi	r24, 0x31	; 49
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 93 c5 00 	sts	0x00C5, r25
  a6:	80 93 c4 00 	sts	0x00C4, r24
}

void WS2812B_reset()
{
	SPI_WS_Reset();     //Dostosuj szybkoœæ SPI
	while(!(UCSR0A & _BV(UDRE0)));  //Zaczekaj na miejsce w buforze
  aa:	80 91 c0 00 	lds	r24, 0x00C0
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <WS2812B_reset+0xc>
	UCSR0A|=_BV(TXC0);  //Skasuj flagê sygnalizuj¹c¹ nadanie ramki
  b2:	80 91 c0 00 	lds	r24, 0x00C0
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 93 c0 00 	sts	0x00C0, r24
	UDR0=0;             //Wyœlij impuls ujemny o czasie trwania >50 us
  bc:	10 92 c6 00 	sts	0x00C6, r1
	while((UCSR0A & _BV(TXC0)) == 0);  //Zaczekaj na koniec sygna³u RESET
  c0:	80 91 c0 00 	lds	r24, 0x00C0
  c4:	86 ff       	sbrs	r24, 6
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <WS2812B_reset+0x22>
	UBRR0=49;  //Dla 16 MHz daje to czas trwania bitu równy 6,25 us, a bajtu 50 us
}

static inline void SPI_WS_Data()   //Taktowanie SPI dla transferu danych
{
	UBRR0=2;    //Dla 16 MHz daje to czas wysy³ania bitu równy 375 ns
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25
  d0:	80 93 c4 00 	sts	0x00C4, r24
  d4:	08 95       	ret

000000d6 <WS2812B_send>:
	while((UCSR0A & _BV(TXC0)) == 0);  //Zaczekaj na koniec sygna³u RESET
	SPI_WS_Data();      //Prze³¹cz szybkoœæ SPI do nadawania danych
}

void WS2812B_send(uint8_t byte)
{
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
		while(!(UCSR0A & _BV(UDRE0)));  //Zaczekaj na miejsce w buforze
		UDR0 = byte;       //Umieœæ w nim dane do wys³ania
	}
	
	uint8_t tmp=0x00;
	if(byte & 0x80) tmp=0b11100000; else tmp=0b10000000;
  da:	87 ff       	sbrs	r24, 7
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <WS2812B_send+0xc>
  de:	80 ee       	ldi	r24, 0xE0	; 224
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <WS2812B_send+0xe>
  e2:	80 e8       	ldi	r24, 0x80	; 128
	if(byte & 0x40) tmp|=0b00001110; else tmp|=0b00001000;
  e4:	c6 ff       	sbrs	r28, 6
  e6:	02 c0       	rjmp	.+4      	; 0xec <WS2812B_send+0x16>
  e8:	8e 60       	ori	r24, 0x0E	; 14
  ea:	01 c0       	rjmp	.+2      	; 0xee <WS2812B_send+0x18>
  ec:	88 60       	ori	r24, 0x08	; 8
	WS2812B_UDR(tmp);  //Wyœlij bity 7-6
  ee:	0e 94 40 00 	call	0x80	; 0x80 <WS2812B_UDR.1607>
	tmp=0x00;
	if(byte & 0x20) tmp=0b11100000; else tmp=0b10000000;
  f2:	c5 ff       	sbrs	r28, 5
  f4:	02 c0       	rjmp	.+4      	; 0xfa <WS2812B_send+0x24>
  f6:	80 ee       	ldi	r24, 0xE0	; 224
  f8:	01 c0       	rjmp	.+2      	; 0xfc <WS2812B_send+0x26>
  fa:	80 e8       	ldi	r24, 0x80	; 128
	if(byte & 0x10) tmp|=0b00001110; else tmp|=0b00001000;
  fc:	c4 ff       	sbrs	r28, 4
  fe:	02 c0       	rjmp	.+4      	; 0x104 <WS2812B_send+0x2e>
 100:	8e 60       	ori	r24, 0x0E	; 14
 102:	01 c0       	rjmp	.+2      	; 0x106 <WS2812B_send+0x30>
 104:	88 60       	ori	r24, 0x08	; 8
	WS2812B_UDR(tmp);  //Wyœlij bity 5-4
 106:	0e 94 40 00 	call	0x80	; 0x80 <WS2812B_UDR.1607>
	tmp=0x00;
	if(byte & 0x08) tmp=0b11100000; else tmp=0b10000000;
 10a:	c3 ff       	sbrs	r28, 3
 10c:	02 c0       	rjmp	.+4      	; 0x112 <WS2812B_send+0x3c>
 10e:	80 ee       	ldi	r24, 0xE0	; 224
 110:	01 c0       	rjmp	.+2      	; 0x114 <WS2812B_send+0x3e>
 112:	80 e8       	ldi	r24, 0x80	; 128
	if(byte & 0x04) tmp|=0b00001110; else tmp|=0b00001000;
 114:	c2 ff       	sbrs	r28, 2
 116:	02 c0       	rjmp	.+4      	; 0x11c <WS2812B_send+0x46>
 118:	8e 60       	ori	r24, 0x0E	; 14
 11a:	01 c0       	rjmp	.+2      	; 0x11e <WS2812B_send+0x48>
 11c:	88 60       	ori	r24, 0x08	; 8
	WS2812B_UDR(tmp);  //Wyœlij bity 3-2	
 11e:	0e 94 40 00 	call	0x80	; 0x80 <WS2812B_UDR.1607>
	tmp=0x00;
	if(byte & 0x02) tmp=0b11100000; else tmp=0b10000000;
 122:	c1 ff       	sbrs	r28, 1
 124:	02 c0       	rjmp	.+4      	; 0x12a <WS2812B_send+0x54>
 126:	80 ee       	ldi	r24, 0xE0	; 224
 128:	01 c0       	rjmp	.+2      	; 0x12c <WS2812B_send+0x56>
 12a:	80 e8       	ldi	r24, 0x80	; 128
	if(byte & 0x01) tmp|=0b00001110; else tmp|=0b00001000;
 12c:	c0 ff       	sbrs	r28, 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <WS2812B_send+0x5e>
 130:	8e 60       	ori	r24, 0x0E	; 14
 132:	01 c0       	rjmp	.+2      	; 0x136 <WS2812B_send+0x60>
 134:	88 60       	ori	r24, 0x08	; 8
	WS2812B_UDR(tmp);  //Wyœlij bity 1-0	
 136:	0e 94 40 00 	call	0x80	; 0x80 <WS2812B_UDR.1607>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:

int main(void)
{
	WS2812B_init();    //Zainicjuj interfejs
 13e:	0e 94 47 00 	call	0x8e	; 0x8e <WS2812B_init>
	WS2812B_send(255);
	WS2812B_send(0);
	WS2812B_send(0);
*/
	uint8_t cnt=LEDNO;
	uint8_t offset=0;
 142:	c0 e0       	ldi	r28, 0x00	; 0
	
	WS2812B_send(255);
	WS2812B_send(0);
	WS2812B_send(0);
*/
	uint8_t cnt=LEDNO;
 144:	de e1       	ldi	r29, 0x1E	; 30
	uint8_t offset=0;
	uint8_t delta=256/LEDNO;
	
	while(1)
	{
		WS2812B_reset();
 146:	0e 94 4f 00 	call	0x9e	; 0x9e <WS2812B_reset>
 14a:	0c 2f       	mov	r16, r28
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	d8 9f       	mul	r29, r24
 150:	00 0d       	add	r16, r0
 152:	11 24       	eor	r1, r1
		while(cnt--)
 154:	10 e0       	ldi	r17, 0x00	; 0
 156:	18 50       	subi	r17, 0x08	; 8
 158:	dd 23       	and	r29, r29
 15a:	61 f0       	breq	.+24     	; 0x174 <main+0x36>
		{
			WS2812B_send(0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <WS2812B_send>
			WS2812B_send(0);
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 6b 00 	call	0xd6	; 0xd6 <WS2812B_send>
			WS2812B_send(cnt*delta+offset);
 168:	80 2f       	mov	r24, r16
 16a:	81 0f       	add	r24, r17
 16c:	0e 94 6b 00 	call	0xd6	; 0xd6 <WS2812B_send>
 170:	d1 50       	subi	r29, 0x01	; 1
 172:	f1 cf       	rjmp	.-30     	; 0x156 <main+0x18>
		}
		offset+=delta;
 174:	c8 5f       	subi	r28, 0xF8	; 248
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	9c e9       	ldi	r25, 0x9C	; 156
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x3c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x42>
 180:	00 00       	nop
	uint8_t delta=256/LEDNO;
	
	while(1)
	{
		WS2812B_reset();
		while(cnt--)
 182:	df ef       	ldi	r29, 0xFF	; 255
 184:	e0 cf       	rjmp	.-64     	; 0x146 <main+0x8>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
