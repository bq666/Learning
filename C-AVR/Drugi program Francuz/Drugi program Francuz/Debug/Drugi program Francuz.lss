
Drugi program Francuz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068e  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ef  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	c0 f9       	bld	r28, 0
  56:	a4 b0       	in	r10, 0x04	; 4
  58:	99 92       	st	Y+, r9
  5a:	82 f8       	bld	r8, 2
  5c:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__data_end+0x5f>

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	ea ef       	ldi	r30, 0xFA	; 250
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 36       	cpi	r26, 0x60	; 96
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>
  82:	0e 94 57 00 	call	0xae	; 0xae <main>
  86:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  8e:	e8 2f       	mov	r30, r24
  90:	ef 77       	andi	r30, 0x7F	; 127
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	eb 30       	cpi	r30, 0x0B	; 11
  96:	f1 05       	cpc	r31, r1
  98:	24 f4       	brge	.+8      	; 0xa2 <ShowOnLED+0x14>
  9a:	ec 5a       	subi	r30, 0xAC	; 172
  9c:	ff 4f       	sbci	r31, 0xFF	; 255
  9e:	94 91       	lpm	r25, Z
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <ShowOnLED+0x16>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  a2:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  a4:	88 23       	and	r24, r24
  a6:	0c f4       	brge	.+2      	; 0xaa <ShowOnLED+0x1c>
  a8:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  aa:	9b bb       	out	0x1b, r25	; 27
  ac:	08 95       	ret

000000ae <main>:
}

int main()
{
	LEDDDR=0xFF;				//Wszystkie piny portu s¹ wyjœciem
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	PORTD|=((1<<PB0)|(1<<PB1));	//W³¹cz pull upy na pinach PB0 i PB7
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	82 bb       	out	0x12, r24	; 18
	uint8_t x=0;
  b8:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		ShowOnLED(x);
		if((PINB & _BV(PB0))==0) x--;
		if((PINB & _BV(PB7))==0) x++;
		x=x%10;
  ba:	dd ec       	ldi	r29, 0xCD	; 205
	LEDDDR=0xFF;				//Wszystkie piny portu s¹ wyjœciem
	PORTD|=((1<<PB0)|(1<<PB1));	//W³¹cz pull upy na pinach PB0 i PB7
	uint8_t x=0;
	while(1)
	{
		ShowOnLED(x);
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 47 00 	call	0x8e	; 0x8e <ShowOnLED>
		if((PINB & _BV(PB0))==0) x--;
  c2:	b0 9b       	sbis	0x16, 0	; 22
  c4:	c1 50       	subi	r28, 0x01	; 1
		if((PINB & _BV(PB7))==0) x++;
  c6:	b7 9b       	sbis	0x16, 7	; 22
  c8:	cf 5f       	subi	r28, 0xFF	; 255
		x=x%10;
  ca:	cd 9f       	mul	r28, r29
  cc:	91 2d       	mov	r25, r1
  ce:	11 24       	eor	r1, r1
  d0:	96 95       	lsr	r25
  d2:	96 95       	lsr	r25
  d4:	96 95       	lsr	r25
  d6:	99 0f       	add	r25, r25
  d8:	89 2f       	mov	r24, r25
  da:	88 0f       	add	r24, r24
  dc:	88 0f       	add	r24, r24
  de:	98 0f       	add	r25, r24
  e0:	c9 1b       	sub	r28, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8f e5       	ldi	r24, 0x5F	; 95
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x3a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x44>
  f2:	00 00       	nop
  f4:	e3 cf       	rjmp	.-58     	; 0xbc <main+0xe>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
