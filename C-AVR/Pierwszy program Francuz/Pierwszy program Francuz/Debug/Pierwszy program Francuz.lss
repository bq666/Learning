
Pierwszy program Francuz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068f  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f1  00000000  00000000  000008af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	c0 f9       	bld	r28, 0
  56:	a4 b0       	in	r10, 0x04	; 4
  58:	99 92       	st	Y+, r9
  5a:	82 f8       	bld	r8, 2
  5c:	80 90 bf 00 	lds	r8, 0x00BF	; 0x8000bf <__data_end+0x5f>

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d8 e0       	ldi	r29, 0x08	; 8
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e6 e3       	ldi	r30, 0x36	; 54
  74:	f1 e0       	ldi	r31, 0x01	; 1
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 36       	cpi	r26, 0x60	; 96
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>
  82:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  86:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <ShowOnLed>:


void ShowOnLed(uint8_t val)
{
	uint8_t tmp=0xFF;
	if ((val & 0x7f)<11) tmp=DIGITS[val&0x7F];				// odczytaj kod znaku
  8e:	e8 2f       	mov	r30, r24
  90:	ef 77       	andi	r30, 0x7F	; 127
  92:	eb 30       	cpi	r30, 0x0B	; 11
  94:	28 f4       	brcc	.+10     	; 0xa0 <ShowOnLed+0x12>
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	ec 5a       	subi	r30, 0xAC	; 172
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	94 91       	lpm	r25, Z
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <ShowOnLed+0x14>
const uint8_t DP=0x80;																							// definicja kropki


void ShowOnLed(uint8_t val)
{
	uint8_t tmp=0xFF;
  a0:	9f ef       	ldi	r25, 0xFF	; 255
	if ((val & 0x7f)<11) tmp=DIGITS[val&0x7F];				// odczytaj kod znaku
	if (val & DP) tmp&=~DP;
  a2:	87 fd       	sbrc	r24, 7
  a4:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  a6:	9b bb       	out	0x1b, r25	; 27
  a8:	08 95       	ret

000000aa <main>:


int main(void)
{
    /* Replace with your application code */
	DDRC=0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 bb       	out	0x14, r24	; 20
	PORTC=0b11111111;
  ae:	85 bb       	out	0x15, r24	; 21
	PORTC=PORTC&(~(1<<PC3));
  b0:	ab 98       	cbi	0x15, 3	; 21
	LEDDDR=0xFF;			// wszystkie piny s¹ wyjœciami 
  b2:	8a bb       	out	0x1a, r24	; 26
	uint8_t x=0;
  b4:	c0 e0       	ldi	r28, 0x00	; 0
    while (1) 
    {
		ShowOnLed(x);
		x=(x+1)%12;
  b6:	0c e0       	ldi	r16, 0x0C	; 12
  b8:	10 e0       	ldi	r17, 0x00	; 0
	PORTC=PORTC&(~(1<<PC3));
	LEDDDR=0xFF;			// wszystkie piny s¹ wyjœciami 
	uint8_t x=0;
    while (1) 
    {
		ShowOnLed(x);
  ba:	8c 2f       	mov	r24, r28
  bc:	0e 94 47 00 	call	0x8e	; 0x8e <ShowOnLed>
		x=(x+1)%12;
  c0:	8c 2f       	mov	r24, r28
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	b8 01       	movw	r22, r16
  c8:	0e 94 71 00 	call	0xe2	; 0xe2 <__divmodhi4>
  cc:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	8f eb       	ldi	r24, 0xBF	; 191
  d2:	91 e2       	ldi	r25, 0x21	; 33
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x2a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x34>
  de:	00 00       	nop
  e0:	ec cf       	rjmp	.-40     	; 0xba <main+0x10>

000000e2 <__divmodhi4>:
  e2:	97 fb       	bst	r25, 7
  e4:	07 2e       	mov	r0, r23
  e6:	16 f4       	brtc	.+4      	; 0xec <__divmodhi4+0xa>
  e8:	00 94       	com	r0
  ea:	07 d0       	rcall	.+14     	; 0xfa <__divmodhi4_neg1>
  ec:	77 fd       	sbrc	r23, 7
  ee:	09 d0       	rcall	.+18     	; 0x102 <__divmodhi4_neg2>
  f0:	0e 94 85 00 	call	0x10a	; 0x10a <__udivmodhi4>
  f4:	07 fc       	sbrc	r0, 7
  f6:	05 d0       	rcall	.+10     	; 0x102 <__divmodhi4_neg2>
  f8:	3e f4       	brtc	.+14     	; 0x108 <__divmodhi4_exit>

000000fa <__divmodhi4_neg1>:
  fa:	90 95       	com	r25
  fc:	81 95       	neg	r24
  fe:	9f 4f       	sbci	r25, 0xFF	; 255
 100:	08 95       	ret

00000102 <__divmodhi4_neg2>:
 102:	70 95       	com	r23
 104:	61 95       	neg	r22
 106:	7f 4f       	sbci	r23, 0xFF	; 255

00000108 <__divmodhi4_exit>:
 108:	08 95       	ret

0000010a <__udivmodhi4>:
 10a:	aa 1b       	sub	r26, r26
 10c:	bb 1b       	sub	r27, r27
 10e:	51 e1       	ldi	r21, 0x11	; 17
 110:	07 c0       	rjmp	.+14     	; 0x120 <__udivmodhi4_ep>

00000112 <__udivmodhi4_loop>:
 112:	aa 1f       	adc	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	a6 17       	cp	r26, r22
 118:	b7 07       	cpc	r27, r23
 11a:	10 f0       	brcs	.+4      	; 0x120 <__udivmodhi4_ep>
 11c:	a6 1b       	sub	r26, r22
 11e:	b7 0b       	sbc	r27, r23

00000120 <__udivmodhi4_ep>:
 120:	88 1f       	adc	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	5a 95       	dec	r21
 126:	a9 f7       	brne	.-22     	; 0x112 <__udivmodhi4_loop>
 128:	80 95       	com	r24
 12a:	90 95       	com	r25
 12c:	bc 01       	movw	r22, r24
 12e:	cd 01       	movw	r24, r26
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
