
Enkoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000235  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012f  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013a  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a2  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000be  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ec e4       	ldi	r30, 0x4C	; 76
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a2 30       	cpi	r26, 0x02	; 2
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  aa:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  b2:	28 2f       	mov	r18, r24
  b4:	2f 77       	andi	r18, 0x7F	; 127
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	2b 30       	cpi	r18, 0x0B	; 11
  ba:	31 05       	cpc	r19, r1
  bc:	2c f4       	brge	.+10     	; 0xc8 <ShowOnLED+0x16>
  be:	f9 01       	movw	r30, r18
  c0:	e8 59       	subi	r30, 0x98	; 152
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	94 91       	lpm	r25, Z
  c6:	01 c0       	rjmp	.+2      	; 0xca <ShowOnLED+0x18>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  c8:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  ca:	87 fd       	sbrc	r24, 7
  cc:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  ce:	9b b9       	out	0x0b, r25	; 11
  d0:	08 95       	ret

000000d2 <ReadEncoder>:
{
	static int8_t last;
	int8_t newpos, diff;

	newpos=0;
	if((PINB & _BV(PB0))==0) newpos=3;
  d2:	18 9b       	sbis	0x03, 0	; 3
  d4:	02 c0       	rjmp	.+4      	; 0xda <ReadEncoder+0x8>
void ReadEncoder()
{
	static int8_t last;
	int8_t newpos, diff;

	newpos=0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	01 c0       	rjmp	.+2      	; 0xdc <ReadEncoder+0xa>
	if((PINB & _BV(PB0))==0) newpos=3;
  da:	83 e0       	ldi	r24, 0x03	; 3
	if((PINB & _BV(PB7))==0) newpos^=1;  // konwersja kodu Graya na binarny
  dc:	1f 99       	sbic	0x03, 7	; 3
  de:	02 c0       	rjmp	.+4      	; 0xe4 <ReadEncoder+0x12>
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	89 27       	eor	r24, r25
	diff=last-newpos;
  e4:	90 91 00 01 	lds	r25, 0x0100
  e8:	98 1b       	sub	r25, r24
	if(diff & 1)
  ea:	90 ff       	sbrs	r25, 0
  ec:	09 c0       	rjmp	.+18     	; 0x100 <ReadEncoder+0x2e>
	{                              // bit 0 = krok
		last=newpos;
  ee:	80 93 00 01 	sts	0x0100, r24
		enc_delta+=(diff & 2)-1;      //bit 1 - kierunek
  f2:	80 91 01 01 	lds	r24, 0x0101
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	92 70       	andi	r25, 0x02	; 2
  fa:	89 0f       	add	r24, r25
  fc:	80 93 01 01 	sts	0x0101, r24
 100:	08 95       	ret

00000102 <Read4StepEncoder>:
	return val>>1;
}

int8_t Read4StepEncoder()
{
	ReadEncoder();
 102:	0e 94 69 00 	call	0xd2	; 0xd2 <ReadEncoder>
	int8_t val=enc_delta;
 106:	80 91 01 01 	lds	r24, 0x0101
	enc_delta=val & 3;
 10a:	98 2f       	mov	r25, r24
 10c:	93 70       	andi	r25, 0x03	; 3
 10e:	90 93 01 01 	sts	0x0101, r25
	return val>>2;
}
 112:	85 95       	asr	r24
 114:	85 95       	asr	r24
 116:	08 95       	ret

00000118 <main>:

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	8a b9       	out	0x0a, r24	; 10
	PORTB|=_BV(PB0) | _BV(PB7);	//W³¹cz pull up na pinie PB0 i PB7
 11c:	85 b1       	in	r24, 0x05	; 5
 11e:	81 68       	ori	r24, 0x81	; 129
 120:	85 b9       	out	0x05, r24	; 5
	uint8_t x=0;
 122:	c0 e0       	ldi	r28, 0x00	; 0


	while(1)
	{
		ShowOnLED(x);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 59 00 	call	0xb2	; 0xb2 <ShowOnLED>
		switch(Read4StepEncoder())
 12a:	0e 94 81 00 	call	0x102	; 0x102 <Read4StepEncoder>
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	19 f0       	breq	.+6      	; 0x138 <main+0x20>
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	29 f0       	breq	.+10     	; 0x140 <main+0x28>
 136:	f6 cf       	rjmp	.-20     	; 0x124 <main+0xc>
		{
			case -1 :	if(x>0) x-=1; break;
 138:	cc 23       	and	r28, r28
 13a:	a1 f3       	breq	.-24     	; 0x124 <main+0xc>
 13c:	c1 50       	subi	r28, 0x01	; 1
 13e:	f2 cf       	rjmp	.-28     	; 0x124 <main+0xc>
			case 0  :	break;
			case 1  :	if(x<9) x+=1; break;
 140:	c9 30       	cpi	r28, 0x09	; 9
 142:	80 f7       	brcc	.-32     	; 0x124 <main+0xc>
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	ee cf       	rjmp	.-36     	; 0x124 <main+0xc>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
