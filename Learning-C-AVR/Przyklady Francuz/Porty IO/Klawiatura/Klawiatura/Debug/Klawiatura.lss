
Klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000015e  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cf  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000102  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000159  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	ee e2       	ldi	r30, 0x2E	; 46
  88:	f1 e0       	ldi	r31, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a0 30       	cpi	r26, 0x00	; 0
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  9a:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <ShowOnLED>:
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  a2:	28 2f       	mov	r18, r24
  a4:	2f 77       	andi	r18, 0x7F	; 127
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	2b 30       	cpi	r18, 0x0B	; 11
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <ShowOnLED+0x16>
  ae:	f9 01       	movw	r30, r18
  b0:	e8 59       	subi	r30, 0x98	; 152
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	94 91       	lpm	r25, Z
  b6:	01 c0       	rjmp	.+2      	; 0xba <ShowOnLED+0x18>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  b8:	9f ef       	ldi	r25, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropk¹ dziesiêtn¹ na LED
  ba:	87 fd       	sbrc	r24, 7
  bc:	9f 77       	andi	r25, 0x7F	; 127
	LEDPORT=tmp;
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	08 95       	ret

000000c2 <scankbd>:
}

uint8_t scankbd()
{
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t y=0;
	uint8_t x;
	while(y<4)		//S? 4 rzêdy
	{
		x=PORTB;
		x=(x | 0x0F) ^ (1<<y);	//Wybierz aktywny rz¹d, nie zmieniaj¹c stanu innych pinów portu
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	78 2f       	mov	r23, r24
{
	uint8_t y=0;
	uint8_t x;
	while(y<4)		//S? 4 rzêdy
	{
		x=PORTB;
  cc:	65 b1       	in	r22, 0x05	; 5
		x=(x | 0x0F) ^ (1<<y);	//Wybierz aktywny rz¹d, nie zmieniaj¹c stanu innych pinów portu
  ce:	6f 60       	ori	r22, 0x0F	; 15
  d0:	a9 01       	movw	r20, r18
  d2:	08 2e       	mov	r0, r24
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <scankbd+0x16>
  d6:	44 0f       	add	r20, r20
  d8:	0a 94       	dec	r0
  da:	ea f7       	brpl	.-6      	; 0xd6 <scankbd+0x14>
  dc:	64 27       	eor	r22, r20
		PORTB=x;
  de:	65 b9       	out	0x05, r22	; 5
		asm volatile ("nop");	//Synchronizator
  e0:	00 00       	nop
		x=PINB;
  e2:	43 b1       	in	r20, 0x03	; 3
		if((x & 0x70)!=0x70)	//Jakiœ klawisz by³ wciœniêty?
  e4:	54 2f       	mov	r21, r20
  e6:	50 77       	andi	r21, 0x70	; 112
  e8:	50 37       	cpi	r21, 0x70	; 112
  ea:	71 f0       	breq	.+28     	; 0x108 <scankbd+0x46>
		{
			if((x & 0x10)==0) x=0;	//Jeœli tak, to z której kolumny?
  ec:	44 ff       	sbrs	r20, 4
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <scankbd+0x36>
			else if((x & 0x20)==0) x=1;
  f0:	45 ff       	sbrs	r20, 5
  f2:	04 c0       	rjmp	.+8      	; 0xfc <scankbd+0x3a>
			else x=2;
  f4:	92 e0       	ldi	r25, 0x02	; 2
  f6:	03 c0       	rjmp	.+6      	; 0xfe <scankbd+0x3c>
		PORTB=x;
		asm volatile ("nop");	//Synchronizator
		x=PINB;
		if((x & 0x70)!=0x70)	//Jakiœ klawisz by³ wciœniêty?
		{
			if((x & 0x10)==0) x=0;	//Jeœli tak, to z której kolumny?
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 c0       	rjmp	.+2      	; 0xfe <scankbd+0x3c>
			else if((x & 0x20)==0) x=1;
  fc:	91 e0       	ldi	r25, 0x01	; 1
			else x=2;
			x=x+y*3;			//Oblicz numer klawisza
  fe:	87 2f       	mov	r24, r23
 100:	88 0f       	add	r24, r24
 102:	87 0f       	add	r24, r23
 104:	89 0f       	add	r24, r25
			return x;
 106:	08 95       	ret
 108:	01 96       	adiw	r24, 0x01	; 1

uint8_t scankbd()
{
	uint8_t y=0;
	uint8_t x;
	while(y<4)		//S? 4 rzêdy
 10a:	84 30       	cpi	r24, 0x04	; 4
 10c:	91 05       	cpc	r25, r1
 10e:	e9 f6       	brne	.-70     	; 0xca <scankbd+0x8>
			x=x+y*3;			//Oblicz numer klawisza
			return x;
		}
		y++;
	}
	return 255;
 110:	8f ef       	ldi	r24, 0xFF	; 255
}
 112:	08 95       	ret

00000114 <main>:

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu s¹ wyjœciem
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x0F;	//4 rzêdy s¹ wyjœciami, 3 kolumny s¹ wejœciami
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	84 b9       	out	0x04, r24	; 4
	PORTB=0x7F;	//W³¹cz pull upy na kolumnach, ustaw rzêdy w stanie 1
 11c:	8f e7       	ldi	r24, 0x7F	; 127
 11e:	85 b9       	out	0x05, r24	; 5

	uint8_t kbd;
	while(1)
	{
		kbd=scankbd();
 120:	0e 94 61 00 	call	0xc2	; 0xc2 <scankbd>
		ShowOnLED(kbd);
 124:	0e 94 51 00 	call	0xa2	; 0xa2 <ShowOnLED>
 128:	fb cf       	rjmp	.-10     	; 0x120 <main+0xc>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
