
Klawiatura.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027f  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ca  00000000  00000000  0000059f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015a  00000000  00000000  00000769  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b3  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000167  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_14>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	c0 f9       	bld	r28, 0
  6a:	a4 b0       	in	r10, 0x04	; 4
  6c:	99 92       	st	Y+, r9
  6e:	82 f8       	bld	r8, 2
  70:	80 90 bf 00 	lds	r8, 0x00BF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e0       	ldi	r26, 0x00	; 0
  84:	b1 e0       	ldi	r27, 0x01	; 1
  86:	e2 e1       	ldi	r30, 0x12	; 18
  88:	f2 e0       	ldi	r31, 0x02	; 2
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 30       	cpi	r26, 0x02	; 2
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a2 e0       	ldi	r26, 0x02	; 2
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a9 30       	cpi	r26, 0x09	; 9
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  aa:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <__vector_16>:

volatile uint8_t LEDDIGITS[LEDDISPNO];  //Tablica zawierajπca dane do wyúwietlania
volatile uint8_t key=0xFF;

ISR(TIMER0_OVF_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	2f 93       	push	r18
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	static uint8_t LEDNO;
	static uint8_t Counter;		//Debouncing
	static uint8_t row;			//Rzπd w ktÛrym znajdowa≥ siÍ ostatnio odczytany klawisz

	PORTC|=0x0F;		//Wy≥πcz wszystkie wyùwietlacze
  c6:	88 b1       	in	r24, 0x08	; 8
  c8:	8f 60       	ori	r24, 0x0F	; 15
  ca:	88 b9       	out	0x08, r24	; 8
	LEDNO=(LEDNO+1)%LEDDISPNO;
  cc:	80 91 04 01 	lds	r24, 0x0104
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	83 70       	andi	r24, 0x03	; 3
  d6:	99 27       	eor	r25, r25
  d8:	80 93 04 01 	sts	0x0104, r24
	ShowOnLED(LEDDIGITS[LEDNO]);
  dc:	fc 01       	movw	r30, r24
  de:	eb 5f       	subi	r30, 0xFB	; 251
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
  e2:	20 81       	ld	r18, Z
const uint8_t DP=0x80;

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
  e4:	82 2f       	mov	r24, r18
  e6:	8f 77       	andi	r24, 0x7F	; 127
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	8b 30       	cpi	r24, 0x0B	; 11
  ec:	91 05       	cpc	r25, r1
  ee:	2c f4       	brge	.+10     	; 0xfa <__vector_16+0x48>
  f0:	fc 01       	movw	r30, r24
  f2:	e8 59       	subi	r30, 0x98	; 152
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	84 91       	lpm	r24, Z
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_16+0x4a>
static const uint8_t __flash DIGITS[11]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0xBF};
const uint8_t DP=0x80;

static inline void ShowOnLED(uint8_t val)
{
	uint8_t tmp=0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
	if((val & 0x7F)<11) tmp=DIGITS[val & 0x7F];  //Odczytaj kod znaku
	if(val & DP) tmp&=~DP;      //Sterowanie kropkπ dziesiÍtnπ na LED
  fc:	27 fd       	sbrc	r18, 7
  fe:	8f 77       	andi	r24, 0x7F	; 127
	LEDPORT=tmp;
 100:	8b b9       	out	0x0b, r24	; 11
	static uint8_t row;			//Rzπd w ktÛrym znajdowa≥ siÍ ostatnio odczytany klawisz

	PORTC|=0x0F;		//Wy≥πcz wszystkie wyùwietlacze
	LEDNO=(LEDNO+1)%LEDDISPNO;
	ShowOnLED(LEDDIGITS[LEDNO]);
	PORTC=(PORTC & 0xF0) | (~(1<<LEDNO) & 0x0F);	//Wybierz kolejny wyúwietlacz i kolumnÍ klawiatury
 102:	28 b1       	in	r18, 0x08	; 8
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	00 90 04 01 	lds	r0, 0x0104
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__vector_16+0x60>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <__vector_16+0x5c>
 116:	80 95       	com	r24
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	82 2b       	or	r24, r18
 11e:	88 b9       	out	0x08, r24	; 8
//Tu zaczynamy obs≥ugÍ klawiatury
	if(Counter==0)
 120:	80 91 03 01 	lds	r24, 0x0103
 124:	81 11       	cpse	r24, r1
 126:	22 c0       	rjmp	.+68     	; 0x16c <__vector_16+0xba>
	{
		uint8_t x=PINB;
 128:	83 b1       	in	r24, 0x03	; 3
		if((x & 0b1110)!=0b1110)	//Jakiú klawisz by≥ wciúniÍty?
 12a:	28 2f       	mov	r18, r24
 12c:	2e 70       	andi	r18, 0x0E	; 14
 12e:	90 91 04 01 	lds	r25, 0x0104
 132:	2e 30       	cpi	r18, 0x0E	; 14
 134:	99 f0       	breq	.+38     	; 0x15c <__vector_16+0xaa>
		{
			if((x & 0b0010)==0) x=0;	//Jeúli tak, to z ktÛrej kolumny?
 136:	81 ff       	sbrs	r24, 1
 138:	04 c0       	rjmp	.+8      	; 0x142 <__vector_16+0x90>
				else if((x & 0b0100)==0) x=1;
 13a:	82 ff       	sbrs	r24, 2
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_16+0x94>
					else x=2;
 13e:	22 e0       	ldi	r18, 0x02	; 2
 140:	03 c0       	rjmp	.+6      	; 0x148 <__vector_16+0x96>
	if(Counter==0)
	{
		uint8_t x=PINB;
		if((x & 0b1110)!=0b1110)	//Jakiú klawisz by≥ wciúniÍty?
		{
			if((x & 0b0010)==0) x=0;	//Jeúli tak, to z ktÛrej kolumny?
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	01 c0       	rjmp	.+2      	; 0x148 <__vector_16+0x96>
				else if((x & 0b0100)==0) x=1;
 146:	21 e0       	ldi	r18, 0x01	; 1
					else x=2;
			key=x+LEDNO*3;			//Oblicz numer klawisza
 148:	89 2f       	mov	r24, r25
 14a:	88 0f       	add	r24, r24
 14c:	89 0f       	add	r24, r25
 14e:	82 0f       	add	r24, r18
 150:	80 93 00 01 	sts	0x0100, r24
			row=LEDNO;
 154:	90 93 02 01 	sts	0x0102, r25
			Counter=100;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	09 c0       	rjmp	.+18     	; 0x16e <__vector_16+0xbc>
		} else if(row==LEDNO) key=0xFF;
 15c:	80 91 02 01 	lds	r24, 0x0102
 160:	89 13       	cpse	r24, r25
 162:	07 c0       	rjmp	.+14     	; 0x172 <__vector_16+0xc0>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 00 01 	sts	0x0100, r24
 16a:	03 c0       	rjmp	.+6      	; 0x172 <__vector_16+0xc0>
	} else Counter--;
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	80 93 03 01 	sts	0x0103, r24
}
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	2f 91       	pop	r18
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <__vector_14>:
	PORTC|=0x0F;	//Wy≥πcz wszystkie wyùwietlacze
}*/

ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	PORTC|=0x01;	//Wy≥πcz wszystkie wyùwietlacze
 186:	40 9a       	sbi	0x08, 0	; 8
	PORTC|=0x02;
 188:	41 9a       	sbi	0x08, 1	; 8
	PORTC|=0x04;
 18a:	42 9a       	sbi	0x08, 2	; 8
	PORTC|=0x08;
 18c:	43 9a       	sbi	0x08, 3	; 8
	asm volatile("RETI\n\t"::);
 18e:	18 95       	reti

00000190 <Timer0Init>:
}

void Timer0Init()
{
	TCCR0B=_BV(CS01);	//Preskaler CLKIO/8
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=_BV(TOIE0);	//Odblokuj przerwanie nadmiaru timera 0
 194:	ee e6       	ldi	r30, 0x6E	; 110
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <itoLED>:
	OCR0A=255;
	Timer0Init();
}

void itoLED(uint16_t l)
{
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<LEDDISPNO;i++)
	{
		LEDDIGITS[i]=l%10;
 1a4:	ea e0       	ldi	r30, 0x0A	; 10
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	bf 01       	movw	r22, r30
 1aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__udivmodhi4>
 1ae:	d9 01       	movw	r26, r18
 1b0:	ab 5f       	subi	r26, 0xFB	; 251
 1b2:	be 4f       	sbci	r27, 0xFE	; 254
 1b4:	8c 93       	st	X, r24
		l/=10;
 1b6:	cb 01       	movw	r24, r22
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
	Timer0Init();
}

void itoLED(uint16_t l)
{
	for(uint8_t i=0;i<LEDDISPNO;i++)
 1bc:	24 30       	cpi	r18, 0x04	; 4
 1be:	31 05       	cpc	r19, r1
 1c0:	99 f7       	brne	.-26     	; 0x1a8 <itoLED+0x8>
	{
		LEDDIGITS[i]=l%10;
		l/=10;
	}
}
 1c2:	08 95       	ret

000001c4 <main>:

int main()
{
	LEDDDR=0xFF;		//Wszystkie piny portu sπ wyjúciem
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	8a b9       	out	0x0a, r24	; 10
	PORTB|=_BV(PB1) | _BV(PB2) | _BV(PB3);	//W≥πcz pull up na pinie PB1, PB2 i PB3 - rzÍdach klawiatury
 1c8:	85 b1       	in	r24, 0x05	; 5
 1ca:	8e 60       	ori	r24, 0x0E	; 14
 1cc:	85 b9       	out	0x05, r24	; 5
	uint16_t liczba;
	DDRC|=0x0F;			//Piny PC0-PC3 jako wyjúcia
 1ce:	87 b1       	in	r24, 0x07	; 7
 1d0:	8f 60       	ori	r24, 0x0F	; 15
 1d2:	87 b9       	out	0x07, r24	; 7
	//Timer0InitWithDimmer();
	Timer0Init();
 1d4:	0e 94 c8 00 	call	0x190	; 0x190 <Timer0Init>
	sei();
 1d8:	78 94       	sei

	while(1)
	{
		liczba=key;
 1da:	80 91 00 01 	lds	r24, 0x0100
		itoLED(liczba);
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <itoLED>
 1e4:	fa cf       	rjmp	.-12     	; 0x1da <main+0x16>

000001e6 <__udivmodhi4>:
 1e6:	aa 1b       	sub	r26, r26
 1e8:	bb 1b       	sub	r27, r27
 1ea:	51 e1       	ldi	r21, 0x11	; 17
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <__udivmodhi4_ep>

000001ee <__udivmodhi4_loop>:
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	a6 17       	cp	r26, r22
 1f4:	b7 07       	cpc	r27, r23
 1f6:	10 f0       	brcs	.+4      	; 0x1fc <__udivmodhi4_ep>
 1f8:	a6 1b       	sub	r26, r22
 1fa:	b7 0b       	sbc	r27, r23

000001fc <__udivmodhi4_ep>:
 1fc:	88 1f       	adc	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	5a 95       	dec	r21
 202:	a9 f7       	brne	.-22     	; 0x1ee <__udivmodhi4_loop>
 204:	80 95       	com	r24
 206:	90 95       	com	r25
 208:	bc 01       	movw	r22, r24
 20a:	cd 01       	movw	r24, r26
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
