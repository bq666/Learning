
2 PUADP UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a25  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b3  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056c  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void) {
  char serialCharacter;

  // -------- Inicjalizacja --------- //
  LED_DDR = 0xff;                /* skonfiguruj diody LED jako wyjścia */
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
  initUSART();
  86:	0e 94 50 00 	call	0xa0	; 0xa0 <initUSART>
  printString("Witaj, świecie!\r\n");                 /* to tylko test */
  8a:	80 e6       	ldi	r24, 0x60	; 96
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 6b 00 	call	0xd6	; 0xd6 <printString>

  // ------ Pętla zdarzeń ------ //
  while (1) {

    serialCharacter = receiveByte();
  92:	0e 94 67 00 	call	0xce	; 0xce <receiveByte>
  96:	c8 2f       	mov	r28, r24
    transmitByte(serialCharacter);
  98:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmitByte>
    LED_PORT = serialCharacter;
  9c:	c5 bb       	out	0x15, r28	; 21
                      /* wyświetlanie wartości ASCII odebranych znaków */

  }                                            /* koniec pętli zdarzeń */
  9e:	f9 cf       	rjmp	.-14     	; 0x92 <main+0x10>

000000a0 <initUSART>:
#include <avr/io.h>
#include "USART.h"
#include <util/setbaud.h>

void initUSART(void) {                                /* requires BAUD */
  UBRRH = UBRRH_VALUE;                        /* defined in setbaud.h */
  a0:	10 bc       	out	0x20, r1	; 32
  UBRRL = UBRRL_VALUE;
  a2:	87 e4       	ldi	r24, 0x47	; 71
  a4:	89 b9       	out	0x09, r24	; 9
  
 #if USE_2X
 UCSRA |= (1 << U2X);
 #else
 UCSRA &= ~(1 << U2X);
  a6:	59 98       	cbi	0x0b, 1	; 11
 #endif
                                  /* Enable USART transmitter/receiver */
  UCSRB |= ((1 << TXEN) | (1 << RXEN));
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	88 61       	ori	r24, 0x18	; 24
  ac:	8a b9       	out	0x0a, r24	; 10
  UCSRC |= ((0 << UCSZ2) | (1 << UCSZ1) | (1 << UCSZ0));   /* 8 data bits, 1 stop bit */
  ae:	80 b5       	in	r24, 0x20	; 32
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 bd       	out	0x20, r24	; 32
  b4:	08 95       	ret

000000b6 <transmitByte>:
}


void transmitByte(uint8_t data) {
                                     /* Wait for empty transmit buffer */
  loop_until_bit_is_set(UCSRA, UDR);
  b6:	2b b1       	in	r18, 0x0b	; 11
  b8:	9c b1       	in	r25, 0x0c	; 12
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <transmitByte+0xc>
  be:	35 95       	asr	r19
  c0:	27 95       	ror	r18
  c2:	9a 95       	dec	r25
  c4:	e2 f7       	brpl	.-8      	; 0xbe <transmitByte+0x8>
  c6:	20 ff       	sbrs	r18, 0
  c8:	f6 cf       	rjmp	.-20     	; 0xb6 <transmitByte>
  UDR = data;                                            /* send data */
  ca:	8c b9       	out	0x0c, r24	; 12
  cc:	08 95       	ret

000000ce <receiveByte>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSRA, RXC);       /* Wait for incoming data */
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <receiveByte>
  return UDR;                                /* return register value */
  d2:	8c b1       	in	r24, 0x0c	; 12
}
  d4:	08 95       	ret

000000d6 <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	59 f0       	breq	.+22     	; 0xfa <printString+0x24>
  e4:	8f 01       	movw	r16, r30
  e6:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <transmitByte>
    i++;
  ec:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
  ee:	f8 01       	movw	r30, r16
  f0:	ec 0f       	add	r30, r28
  f2:	f1 1d       	adc	r31, r1
  f4:	80 81       	ld	r24, Z
  f6:	81 11       	cpse	r24, r1
  f8:	f7 cf       	rjmp	.-18     	; 0xe8 <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
