
LCDAlfa-transact.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000834  000008c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800110  00800110  000008d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001243  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000882  00000000  00000000  000024f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008cc  00000000  00000000  000033b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00003c81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9e:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <malloc_re>:
#include <stdlib.h>
#include <util/atomic.h>
#include "Alloc_safe.h"

void *malloc_re(size_t size)
{
  a6:	cf 93       	push	r28
	void *ptr;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  a8:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  aa:	f8 94       	cli
	{
		ptr=malloc(size);
  ac:	0e 94 b5 02 	call	0x56a	; 0x56a <malloc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  b0:	cf bf       	out	0x3f, r28	; 63
	}
	return ptr;
}
  b2:	cf 91       	pop	r28
  b4:	08 95       	ret

000000b6 <free_re>:

void free_re(void *ptr)
{
  b6:	cf 93       	push	r28
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  b8:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  ba:	f8 94       	cli
	{
		free(ptr);
  bc:	0e 94 4d 03 	call	0x69a	; 0x69a <free>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  c0:	cf bf       	out	0x3f, r28	; 63
	}
}
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <hd44780_outnibble>:
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
  CLR(PORT, HD44780_RW);
  c6:	5b 98       	cbi	0x0b, 3	; 11
  if (rs)
  c8:	66 23       	and	r22, r22
  ca:	11 f0       	breq	.+4      	; 0xd0 <hd44780_outnibble+0xa>
    SET(PORT, HD44780_RS);
  cc:	5c 9a       	sbi	0x0b, 4	; 11
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <hd44780_outnibble+0xc>
  else
    CLR(PORT, HD44780_RS);
  d0:	5c 98       	cbi	0x0b, 4	; 11
  ASSIGN(PORT, HD44780_D4, n);
  d2:	98 b1       	in	r25, 0x08	; 8
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	98 2b       	or	r25, r24
  d8:	98 b9       	out	0x08, r25	; 8
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  da:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <hd44780_outnibble+0x18>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <hd44780_outnibble+0x1e>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
  e4:	5a 98       	cbi	0x0b, 2	; 11
  e6:	08 95       	ret

000000e8 <hd44780_innibble>:
static uint8_t
hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
  e8:	5b 9a       	sbi	0x0b, 3	; 11
  ASSIGN(DDR, HD44780_D4, 0x00);
  ea:	97 b1       	in	r25, 0x07	; 7
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	97 b9       	out	0x07, r25	; 7
  if (rs)
  f0:	88 23       	and	r24, r24
  f2:	11 f0       	breq	.+4      	; 0xf8 <hd44780_innibble+0x10>
    SET(PORT, HD44780_RS);
  f4:	5c 9a       	sbi	0x0b, 4	; 11
  f6:	01 c0       	rjmp	.+2      	; 0xfa <hd44780_innibble+0x12>
  else
    CLR(PORT, HD44780_RS);
  f8:	5c 98       	cbi	0x0b, 4	; 11
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
  fa:	5a 9a       	sbi	0x0b, 2	; 11
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <hd44780_innibble+0x16>
 102:	00 c0       	rjmp	.+0      	; 0x104 <hd44780_innibble+0x1c>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
 104:	86 b1       	in	r24, 0x06	; 6
  else
    x = 0;
  CLR(PORT, HD44780_E);
 106:	5a 98       	cbi	0x0b, 2	; 11
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
 108:	97 b1       	in	r25, 0x07	; 7
 10a:	9f 60       	ori	r25, 0x0F	; 15
 10c:	97 b9       	out	0x07, r25	; 7
  CLR(PORT, HD44780_RW);
 10e:	5b 98       	cbi	0x0b, 3	; 11

  return x;
}
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	08 95       	ret

00000114 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	c8 2f       	mov	r28, r24
 11a:	d6 2f       	mov	r29, r22
  hd44780_outnibble(b >> 4, rs);
 11c:	82 95       	swap	r24
 11e:	8f 70       	andi	r24, 0x0F	; 15
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
 124:	6d 2f       	mov	r22, r29
 126:	8c 2f       	mov	r24, r28
 128:	8f 70       	andi	r24, 0x0F	; 15
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
  hd44780_outnibble(b >> 4, rs);
  hd44780_outnibble(b & 0xf, rs);
 12e:	0c 94 63 00 	jmp	0xc6	; 0xc6 <hd44780_outnibble>

00000132 <hd44780_outnibble_nowait>:
}

void hd44780_outnibble_nowait(uint8_t n, uint8_t rs)
{
	//CLR(OUT, HD44780_E);              //Wyzeruj sygna³ Enable i zatrzaœnij dane
	CLR(PORT, HD44780_RW);
 132:	5b 98       	cbi	0x0b, 3	; 11
	if (rs) SET(PORT, HD44780_RS);
 134:	66 23       	and	r22, r22
 136:	11 f0       	breq	.+4      	; 0x13c <hd44780_outnibble_nowait+0xa>
 138:	5c 9a       	sbi	0x0b, 4	; 11
 13a:	01 c0       	rjmp	.+2      	; 0x13e <hd44780_outnibble_nowait+0xc>
	else   CLR(PORT, HD44780_RS);
 13c:	5c 98       	cbi	0x0b, 4	; 11
	ASSIGN(PORT, HD44780_D4, n);
 13e:	98 b1       	in	r25, 0x08	; 8
 140:	90 7f       	andi	r25, 0xF0	; 240
 142:	98 2b       	or	r25, r24
 144:	98 b9       	out	0x08, r25	; 8
	SET(PORT, HD44780_E);         //Ustaw enable
 146:	5a 9a       	sbi	0x0b, 2	; 11
 148:	08 95       	ret

0000014a <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c8 2f       	mov	r28, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
 150:	0e 94 74 00 	call	0xe8	; 0xe8 <hd44780_innibble>
 154:	d8 2f       	mov	r29, r24
 156:	d2 95       	swap	r29
 158:	d0 7f       	andi	r29, 0xF0	; 240
  x |= hd44780_innibble(rs);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 74 00 	call	0xe8	; 0xe8 <hd44780_innibble>

  return x;
}
 160:	8d 2b       	or	r24, r29
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <hd44780_wait_ready>:
 */
void
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 a5 00 	call	0x14a	; 0x14a <hd44780_inbyte>
 16e:	87 fd       	sbrc	r24, 7
 170:	fb cf       	rjmp	.-10     	; 0x168 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
 172:	08 95       	ret

00000174 <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
 174:	54 9a       	sbi	0x0a, 4	; 10
  SET(DDR, HD44780_RW);
 176:	53 9a       	sbi	0x0a, 3	; 10
  SET(DDR, HD44780_E);
 178:	52 9a       	sbi	0x0a, 2	; 10
  ASSIGN(DDR, HD44780_D4, 0x0F);
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	8f 60       	ori	r24, 0x0F	; 15
 17e:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	8f e5       	ldi	r24, 0x5F	; 95
 182:	9a ee       	ldi	r25, 0xEA	; 234
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <hd44780_init+0x10>
 188:	00 c0       	rjmp	.+0      	; 0x18a <hd44780_init+0x16>
 18a:	00 00       	nop

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
 194:	8f e0       	ldi	r24, 0x0F	; 15
 196:	90 e4       	ldi	r25, 0x40	; 64
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <hd44780_init+0x24>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <hd44780_init+0x2a>
 19e:	00 00       	nop
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <hd44780_init+0x38>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <hd44780_init+0x3e>
 1b2:	00 00       	nop
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	95 ec       	ldi	r25, 0xC5	; 197
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <hd44780_init+0x4a>
 1c2:	00 00       	nop
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 63 00 	call	0xc6	; 0xc6 <hd44780_outnibble>
  hd44780_wait_ready(false);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
  hd44780_wait_ready(false);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0c 94 b4 00 	jmp	0x168	; 0x168 <hd44780_wait_ready>

000001ee <main>:
#include <avr/interrupt.h>
#include "Alloc_safe.h"
#include "LCD_trans.h"

int main(void)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <main+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0x8>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <main+0xa>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
 1fc:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_Init>
	LCD_Timer_init();
 200:	0e 94 04 02 	call	0x408	; 0x408 <LCD_Timer_init>
	sei();
 204:	78 94       	sei
	
	LCD_PutText(0,0, "Numer:");
 206:	46 e0       	ldi	r20, 0x06	; 6
 208:	51 e0       	ldi	r21, 0x01	; 1
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_PutText>
	
	uint16_t cnt=0;
	LCD_trans *buf=malloc_re(sizeof(LCD_trans) + 7);
 212:	89 e0       	ldi	r24, 0x09	; 9
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <malloc_re>
 21a:	6c 01       	movw	r12, r24
	LCD_Timer_init();
	sei();
	
	LCD_PutText(0,0, "Numer:");
	
	uint16_t cnt=0;
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 220:	9e 01       	movw	r18, r28
 222:	2f 5f       	subi	r18, 0xFF	; 255
 224:	3f 4f       	sbci	r19, 0xFF	; 255
 226:	79 01       	movw	r14, r18
	LCD_trans *buf=malloc_re(sizeof(LCD_trans) + 7);
	char bufstr[6];
	
	while(1)
	{
		utoa(cnt++, bufstr, 10);
 228:	5c 01       	movw	r10, r24
 22a:	3f ef       	ldi	r19, 0xFF	; 255
 22c:	a3 1a       	sub	r10, r19
 22e:	b3 0a       	sbc	r11, r19
 230:	4a e0       	ldi	r20, 0x0A	; 10
 232:	b7 01       	movw	r22, r14
 234:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__utoa_ncheck>
		while(strlen(bufstr)<6) strcat(bufstr, " ");
 238:	f7 01       	movw	r30, r14
 23a:	01 90       	ld	r0, Z+
 23c:	00 20       	and	r0, r0
 23e:	e9 f7       	brne	.-6      	; 0x23a <main+0x4c>
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	ee 19       	sub	r30, r14
 244:	ff 09       	sbc	r31, r15
 246:	36 97       	sbiw	r30, 0x06	; 6
 248:	30 f4       	brcc	.+12     	; 0x256 <main+0x68>
 24a:	6d e0       	ldi	r22, 0x0D	; 13
 24c:	71 e0       	ldi	r23, 0x01	; 1
 24e:	c7 01       	movw	r24, r14
 250:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <strcat>
 254:	f1 cf       	rjmp	.-30     	; 0x238 <main+0x4a>
		LCD_PutText_B(6,0, bufstr, buf, false);
 256:	00 e0       	ldi	r16, 0x00	; 0
 258:	96 01       	movw	r18, r12
 25a:	a7 01       	movw	r20, r14
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	0e 94 22 02 	call	0x444	; 0x444 <LCD_PutText_B>
bool LCD_PutText(uint8_t x, uint8_t y, char *txt); //Wyœwietl napis na LCD
bool LCD_PutText_B(uint8_t x, uint8_t y, char *txt, LCD_trans *buf, bool autodel);

static inline bool LCD_IsTransCompleted(LCD_trans *trans)  //Czy transakcja zakoñczona?
{
	return trans->Ready;
 264:	f6 01       	movw	r30, r12
 266:	80 81       	ld	r24, Z
		while(!LCD_IsTransCompleted(buf));
 268:	80 ff       	sbrs	r24, 0
 26a:	fc cf       	rjmp	.-8      	; 0x264 <main+0x76>
	LCD_trans *buf=malloc_re(sizeof(LCD_trans) + 7);
	char bufstr[6];
	
	while(1)
	{
		utoa(cnt++, bufstr, 10);
 26c:	c5 01       	movw	r24, r10
 26e:	dc cf       	rjmp	.-72     	; 0x228 <main+0x3a>

00000270 <cbAdd>:
{
	return cb->Count == 0;
}

bool cbAdd(CircBuffer *cb, LCD_trans *elem)
{
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	9b 01       	movw	r18, r22
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 27a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 27c:	f8 94       	cli
static inline bool cbIsEmpty(CircBuffer *cb)
{
	return cb->Count == 0;
}

bool cbAdd(CircBuffer *cb, LCD_trans *elem)
 27e:	4d 89       	ldd	r20, Y+21	; 0x15
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(cbIsFull(cb)) return false;         //Czy jest miejsce w kolejce?
 280:	4a 30       	cpi	r20, 0x0A	; 10
 282:	19 f4       	brne	.+6      	; 0x28a <cbAdd+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 284:	1f bf       	out	0x3f, r17	; 63
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	14 c0       	rjmp	.+40     	; 0x2b2 <cbAdd+0x42>
		uint8_t end = (cb->Beg + cb->Count) % LCD_MAXTRANS;
 28a:	5c 89       	ldd	r21, Y+20	; 0x14
 28c:	84 2f       	mov	r24, r20
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	85 0f       	add	r24, r21
 292:	91 1d       	adc	r25, r1
 294:	6a e0       	ldi	r22, 0x0A	; 10
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	0e 94 8d 02 	call	0x51a	; 0x51a <__divmodhi4>
		cb->elements[end] = elem;              //Dodaj transakcjê
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	8c 0f       	add	r24, r28
 2a2:	9d 1f       	adc	r25, r29
 2a4:	fc 01       	movw	r30, r24
 2a6:	31 83       	std	Z+1, r19	; 0x01
 2a8:	20 83       	st	Z, r18
		++cb->Count;                           //Liczba elementów w buforze
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	4d 8b       	std	Y+21, r20	; 0x15
 2ae:	1f bf       	out	0x3f, r17	; 63
	}
	return true;      //Wszystko ok
 2b0:	81 e0       	ldi	r24, 0x01	; 1
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <cbRead>:

LCD_trans *cbRead(CircBuffer *cb)
{
 2ba:	cf 93       	push	r28
 2bc:	fc 01       	movw	r30, r24
	LCD_trans *elem;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2c0:	f8 94       	cli
		++cb->Count;                           //Liczba elementów w buforze
	}
	return true;      //Wszystko ok
}

LCD_trans *cbRead(CircBuffer *cb)
 2c2:	35 89       	ldd	r19, Z+21	; 0x15
{
	LCD_trans *elem;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		if(cbIsEmpty(cb)) return NULL;       //Bufor pusty, nie mo¿na zwróciæ elementu
 2c4:	31 11       	cpse	r19, r1
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <cbRead+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2c8:	2f bf       	out	0x3f, r18	; 63
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	15 c0       	rjmp	.+42     	; 0x2fa <cbRead+0x40>
		elem = cb->elements[cb->Beg];
 2d0:	84 89       	ldd	r24, Z+20	; 0x14
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	dc 01       	movw	r26, r24
 2d6:	aa 0f       	add	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	ae 0f       	add	r26, r30
 2dc:	bf 1f       	adc	r27, r31
 2de:	cc 91       	ld	r28, X
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	4c 91       	ld	r20, X
		cb->Beg = (cb->Beg + 1) % LCD_MAXTRANS;
 2e4:	01 96       	adiw	r24, 0x01	; 1
 2e6:	6a e0       	ldi	r22, 0x0A	; 10
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	0e 94 8d 02 	call	0x51a	; 0x51a <__divmodhi4>
 2ee:	84 8b       	std	Z+20, r24	; 0x14
		-- cb->Count;                        //Zmniejszamy liczbê elementów pozosta³ych
 2f0:	31 50       	subi	r19, 0x01	; 1
 2f2:	35 8b       	std	Z+21, r19	; 0x15
 2f4:	2f bf       	out	0x3f, r18	; 63
	}		                                 //w buforze
	return elem;
 2f6:	8c 2f       	mov	r24, r28
 2f8:	94 2f       	mov	r25, r20
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	2f 93       	push	r18
 30a:	3f 93       	push	r19
 30c:	4f 93       	push	r20
 30e:	5f 93       	push	r21
 310:	6f 93       	push	r22
 312:	7f 93       	push	r23
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
 31c:	ef 93       	push	r30
 31e:	ff 93       	push	r31
		uint8_t pos    : 6;           //Pozycja w polu danych aktualnej transakcji
		uint8_t nibble : 1;           //Która tetrada jest wysy³ana
	} seq;
	static LCD_trans *trans;          //Bie¿¹co realizowana transakcja
	
	SET(PORT, HD44780_E);
 320:	5a 9a       	sbi	0x0b, 2	; 11
	
	if(trans == NULL)                 //Nic do zrobienia, sprawdŸmy czy jakaœ transakcja oczekuje
 322:	80 91 11 01 	lds	r24, 0x0111
 326:	90 91 12 01 	lds	r25, 0x0112
 32a:	89 2b       	or	r24, r25
 32c:	89 f4       	brne	.+34     	; 0x350 <__vector_14+0x52>
	{
		trans=cbRead(&LCD_TransBuffer); //Czy jest jakaœ oczekuj¹ca transakcja
 32e:	83 e1       	ldi	r24, 0x13	; 19
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 5d 01 	call	0x2ba	; 0x2ba <cbRead>
 336:	90 93 12 01 	sts	0x0112, r25
 33a:	80 93 11 01 	sts	0x0111, r24
		seq.pos=0;
 33e:	20 91 10 01 	lds	r18, 0x0110
		seq.nibble=0;
 342:	20 7c       	andi	r18, 0xC0	; 192
 344:	2f 7b       	andi	r18, 0xBF	; 191
 346:	20 93 10 01 	sts	0x0110, r18
		if(trans == NULL) TCCR0B=0;   //Nie ma ¿adnych transakcji - wy³¹cz timer
 34a:	89 2b       	or	r24, r25
 34c:	09 f4       	brne	.+2      	; 0x350 <__vector_14+0x52>
 34e:	15 bc       	out	0x25, r1	; 37
	}

	if(trans)
 350:	80 91 11 01 	lds	r24, 0x0111
 354:	90 91 12 01 	lds	r25, 0x0112
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	09 f4       	brne	.+2      	; 0x35e <__vector_14+0x60>
 35c:	44 c0       	rjmp	.+136    	; 0x3e6 <__vector_14+0xe8>
	{                                 //Jest transakcja do zrealizowania
		uint8_t dat=trans->data[seq.pos];
 35e:	30 91 10 01 	lds	r19, 0x0110
 362:	23 2f       	mov	r18, r19
 364:	2f 73       	andi	r18, 0x3F	; 63
 366:	fc 01       	movw	r30, r24
 368:	e2 0f       	add	r30, r18
 36a:	f1 1d       	adc	r31, r1
 36c:	82 81       	ldd	r24, Z+2	; 0x02
		if(seq.nibble == 0) dat>>=4;  //To trzeba zmieniæ jeœli linie danych nie s¹ po³¹czone
 36e:	36 fd       	sbrc	r19, 6
 370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_14+0x78>
 372:	82 95       	swap	r24
 374:	8f 70       	andi	r24, 0x0F	; 15
		                              // z pinami 0-3 portu IO
		hd44780_outnibble_nowait(dat & 0x0F, seq.pos != 0);    //Zapisujemy rejestr steruj¹cy lub dane
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	21 11       	cpse	r18, r1
 37a:	01 c0       	rjmp	.+2      	; 0x37e <__vector_14+0x80>
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	8f 70       	andi	r24, 0x0F	; 15
 380:	0e 94 99 00 	call	0x132	; 0x132 <hd44780_outnibble_nowait>
		++seq.nibble;
 384:	80 91 10 01 	lds	r24, 0x0110
 388:	90 e4       	ldi	r25, 0x40	; 64
 38a:	89 27       	eor	r24, r25
 38c:	80 93 10 01 	sts	0x0110, r24
		if(seq.nibble == 0) ++seq.pos; //Co drug¹ tetradê zwiêkszamy pozycjê bufora
 390:	86 fd       	sbrc	r24, 6
 392:	07 c0       	rjmp	.+14     	; 0x3a2 <__vector_14+0xa4>
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	98 0f       	add	r25, r24
 398:	9f 73       	andi	r25, 0x3F	; 63
 39a:	80 7c       	andi	r24, 0xC0	; 192
 39c:	89 2b       	or	r24, r25
 39e:	80 93 10 01 	sts	0x0110, r24
		if(seq.pos >= trans->len)
 3a2:	e0 91 11 01 	lds	r30, 0x0111
 3a6:	f0 91 12 01 	lds	r31, 0x0112
 3aa:	20 91 10 01 	lds	r18, 0x0110
 3ae:	2f 73       	andi	r18, 0x3F	; 63
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	90 81       	ld	r25, Z
 3b4:	92 95       	swap	r25
 3b6:	9f 70       	andi	r25, 0x0F	; 15
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	83 70       	andi	r24, 0x03	; 3
 3bc:	82 95       	swap	r24
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	89 2b       	or	r24, r25
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	6c f0       	brlt	.+26     	; 0x3e4 <__vector_14+0xe6>
		{
			trans->Ready=true;              //Koniec transakcji
 3ca:	80 81       	ld	r24, Z
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 83       	st	Z, r24
			if(trans->SelfDel) free_re(trans); //Zwolnij pamiêæ transakcji jeœli tak sobie ¿yczy³ programista
 3d0:	80 81       	ld	r24, Z
 3d2:	81 ff       	sbrs	r24, 1
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <__vector_14+0xde>
 3d6:	cf 01       	movw	r24, r30
 3d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <free_re>
			trans=NULL;                     //Koniec transakcji
 3dc:	10 92 12 01 	sts	0x0112, r1
 3e0:	10 92 11 01 	sts	0x0111, r1
		}
		CLR(PORT, HD44780_E);
 3e4:	5a 98       	cbi	0x0b, 2	; 11
	}
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <LCD_Timer_init>:

void LCD_Timer_init()
{
	TCCR0A=_BV(WGM01);                 //Tryb CTC timera
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	84 bd       	out	0x24, r24	; 36
	//TCCR0B=_BV(CS01);                  //Preskaler /8 - taktowanie timera 2MHz
	OCR0A=F_CPU*LCD_ACCESSTIME/8;      //Nadmiar co 4 us
 40c:	90 e5       	ldi	r25, 0x50	; 80
 40e:	97 bd       	out	0x27, r25	; 39
	TIMSK0=_BV(OCIE0A);                //Odblokuj przerwanie porównania timera
 410:	80 93 6e 00 	sts	0x006E, r24
 414:	08 95       	ret

00000416 <LCD_Init>:
}

void LCD_Init()
{
	hd44780_init();				            //Podstawowa inicjalizacja modu³u
 416:	0e 94 ba 00 	call	0x174	; 0x174 <hd44780_init>
	hd44780_outcmd(HD44780_CLR);	            //Wyczyœæ pamiêæ DDRAM
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_ENTMODE(1, 0));	//Tryb autoinkrementacji AC
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	86 e0       	ldi	r24, 0x06	; 6
 42c:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 b4 00 	call	0x168	; 0x168 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));	//W³¹cz wyœwietlacz, wy³¹cz kursor
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	0e 94 8a 00 	call	0x114	; 0x114 <hd44780_outbyte>
	hd44780_wait_ready(1000);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0c 94 b4 00 	jmp	0x168	; 0x168 <hd44780_wait_ready>

00000444 <LCD_PutText_B>:
    bool ret=LCD_PutText_B(x, y, txt, trans, true);
	return ret;
}

bool LCD_PutText_B(uint8_t x, uint8_t y, char *txt, LCD_trans *buf, bool autodel)
{
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	7a 01       	movw	r14, r20
 450:	e9 01       	movw	r28, r18
	buf->cmd=LCD_Text;
 452:	98 81       	ld	r25, Y
 454:	93 7f       	andi	r25, 0xF3	; 243
 456:	98 83       	st	Y, r25
	buf->Ready=false;
 458:	98 81       	ld	r25, Y
 45a:	9e 7f       	andi	r25, 0xFE	; 254
 45c:	98 83       	st	Y, r25
	buf->SelfDel=autodel;  //Czy zwolniæ pamiêæ po zakoñczeniu transakcji
 45e:	98 81       	ld	r25, Y
 460:	00 fb       	bst	r16, 0
 462:	91 f9       	bld	r25, 1
 464:	98 83       	st	Y, r25
	buf->data[0]=HD44780_DDADDR(x+y*0x40);   //Ustaw adres w DDRAM
 466:	90 e4       	ldi	r25, 0x40	; 64
 468:	69 9f       	mul	r22, r25
 46a:	80 0d       	add	r24, r0
 46c:	11 24       	eor	r1, r1
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	8a 83       	std	Y+2, r24	; 0x02
	strcpy((char*)&buf->data[1], txt);  //Skopiuj dane tekstowe + NULL
 472:	ba 01       	movw	r22, r20
 474:	c9 01       	movw	r24, r18
 476:	03 96       	adiw	r24, 0x03	; 3
 478:	0e 94 e7 03 	call	0x7ce	; 0x7ce <strcpy>
	buf->len=strlen(txt) + 1;    //D³ugoœæ tekstu + pozycji + NULL - 1
 47c:	f7 01       	movw	r30, r14
 47e:	01 90       	ld	r0, Z+
 480:	00 20       	and	r0, r0
 482:	e9 f7       	brne	.-6      	; 0x47e <LCD_PutText_B+0x3a>
 484:	ee 19       	sub	r30, r14
 486:	9e 2f       	mov	r25, r30
 488:	92 95       	swap	r25
 48a:	90 7f       	andi	r25, 0xF0	; 240
 48c:	88 81       	ld	r24, Y
 48e:	8f 70       	andi	r24, 0x0F	; 15
 490:	89 2b       	or	r24, r25
 492:	88 83       	st	Y, r24
 494:	e2 95       	swap	r30
 496:	e3 70       	andi	r30, 0x03	; 3
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	8c 7f       	andi	r24, 0xFC	; 252
 49c:	8e 2b       	or	r24, r30
 49e:	89 83       	std	Y+1, r24	; 0x01
	bool ret=cbAdd(&LCD_TransBuffer, buf);
 4a0:	be 01       	movw	r22, r28
 4a2:	83 e1       	ldi	r24, 0x13	; 19
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 38 01 	call	0x270	; 0x270 <cbAdd>
 4aa:	f8 2e       	mov	r15, r24
	if((ret==false) && (autodel)) free_re(buf);    //Brak miejsca w kolejce
 4ac:	81 11       	cpse	r24, r1
 4ae:	06 c0       	rjmp	.+12     	; 0x4bc <LCD_PutText_B+0x78>
 4b0:	00 23       	and	r16, r16
 4b2:	21 f0       	breq	.+8      	; 0x4bc <LCD_PutText_B+0x78>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 5b 00 	call	0xb6	; 0xb6 <free_re>
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <LCD_PutText_B+0x7c>
	        else TCCR0B=_BV(CS01);     //Preskaler /8 - odblokuj timer
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	85 bd       	out	0x25, r24	; 37
	return ret;
}
 4c0:	8f 2d       	mov	r24, r15
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <LCD_PutText>:
	hd44780_outcmd(HD44780_DISPCTL(1, 0, 0));	//W³¹cz wyœwietlacz, wy³¹cz kursor
	hd44780_wait_ready(1000);
}

bool LCD_PutText(uint8_t x, uint8_t y, char *txt)
{
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <LCD_PutText+0xa>
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	18 2f       	mov	r17, r24
	LCD_trans *trans=malloc_re(sizeof(LCD_trans) + strlen(txt) + 2);
 4e0:	fa 01       	movw	r30, r20
 4e2:	01 90       	ld	r0, Z+
 4e4:	00 20       	and	r0, r0
 4e6:	e9 f7       	brne	.-6      	; 0x4e2 <LCD_PutText+0x14>
 4e8:	e4 1b       	sub	r30, r20
 4ea:	f5 0b       	sbc	r31, r21
 4ec:	cf 01       	movw	r24, r30
 4ee:	03 96       	adiw	r24, 0x03	; 3
 4f0:	4a 83       	std	Y+2, r20	; 0x02
 4f2:	5b 83       	std	Y+3, r21	; 0x03
 4f4:	69 83       	std	Y+1, r22	; 0x01
 4f6:	0e 94 53 00 	call	0xa6	; 0xa6 <malloc_re>
 4fa:	9c 01       	movw	r18, r24
    bool ret=LCD_PutText_B(x, y, txt, trans, true);
 4fc:	01 e0       	ldi	r16, 0x01	; 1
 4fe:	4a 81       	ldd	r20, Y+2	; 0x02
 500:	5b 81       	ldd	r21, Y+3	; 0x03
 502:	69 81       	ldd	r22, Y+1	; 0x01
 504:	81 2f       	mov	r24, r17
 506:	0e 94 22 02 	call	0x444	; 0x444 <LCD_PutText_B>
	return ret;
}
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <__divmodhi4>:
 51a:	97 fb       	bst	r25, 7
 51c:	07 2e       	mov	r0, r23
 51e:	16 f4       	brtc	.+4      	; 0x524 <__divmodhi4+0xa>
 520:	00 94       	com	r0
 522:	07 d0       	rcall	.+14     	; 0x532 <__divmodhi4_neg1>
 524:	77 fd       	sbrc	r23, 7
 526:	09 d0       	rcall	.+18     	; 0x53a <__divmodhi4_neg2>
 528:	0e 94 a1 02 	call	0x542	; 0x542 <__udivmodhi4>
 52c:	07 fc       	sbrc	r0, 7
 52e:	05 d0       	rcall	.+10     	; 0x53a <__divmodhi4_neg2>
 530:	3e f4       	brtc	.+14     	; 0x540 <__divmodhi4_exit>

00000532 <__divmodhi4_neg1>:
 532:	90 95       	com	r25
 534:	81 95       	neg	r24
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__divmodhi4_neg2>:
 53a:	70 95       	com	r23
 53c:	61 95       	neg	r22
 53e:	7f 4f       	sbci	r23, 0xFF	; 255

00000540 <__divmodhi4_exit>:
 540:	08 95       	ret

00000542 <__udivmodhi4>:
 542:	aa 1b       	sub	r26, r26
 544:	bb 1b       	sub	r27, r27
 546:	51 e1       	ldi	r21, 0x11	; 17
 548:	07 c0       	rjmp	.+14     	; 0x558 <__udivmodhi4_ep>

0000054a <__udivmodhi4_loop>:
 54a:	aa 1f       	adc	r26, r26
 54c:	bb 1f       	adc	r27, r27
 54e:	a6 17       	cp	r26, r22
 550:	b7 07       	cpc	r27, r23
 552:	10 f0       	brcs	.+4      	; 0x558 <__udivmodhi4_ep>
 554:	a6 1b       	sub	r26, r22
 556:	b7 0b       	sbc	r27, r23

00000558 <__udivmodhi4_ep>:
 558:	88 1f       	adc	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	5a 95       	dec	r21
 55e:	a9 f7       	brne	.-22     	; 0x54a <__udivmodhi4_loop>
 560:	80 95       	com	r24
 562:	90 95       	com	r25
 564:	bc 01       	movw	r22, r24
 566:	cd 01       	movw	r24, r26
 568:	08 95       	ret

0000056a <malloc>:
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	82 30       	cpi	r24, 0x02	; 2
 570:	91 05       	cpc	r25, r1
 572:	10 f4       	brcc	.+4      	; 0x578 <malloc+0xe>
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	e0 91 2b 01 	lds	r30, 0x012B
 57c:	f0 91 2c 01 	lds	r31, 0x012C
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	a0 e0       	ldi	r26, 0x00	; 0
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	30 97       	sbiw	r30, 0x00	; 0
 58a:	39 f1       	breq	.+78     	; 0x5da <malloc+0x70>
 58c:	40 81       	ld	r20, Z
 58e:	51 81       	ldd	r21, Z+1	; 0x01
 590:	48 17       	cp	r20, r24
 592:	59 07       	cpc	r21, r25
 594:	b8 f0       	brcs	.+46     	; 0x5c4 <malloc+0x5a>
 596:	48 17       	cp	r20, r24
 598:	59 07       	cpc	r21, r25
 59a:	71 f4       	brne	.+28     	; 0x5b8 <malloc+0x4e>
 59c:	82 81       	ldd	r24, Z+2	; 0x02
 59e:	93 81       	ldd	r25, Z+3	; 0x03
 5a0:	10 97       	sbiw	r26, 0x00	; 0
 5a2:	29 f0       	breq	.+10     	; 0x5ae <malloc+0x44>
 5a4:	13 96       	adiw	r26, 0x03	; 3
 5a6:	9c 93       	st	X, r25
 5a8:	8e 93       	st	-X, r24
 5aa:	12 97       	sbiw	r26, 0x02	; 2
 5ac:	2c c0       	rjmp	.+88     	; 0x606 <malloc+0x9c>
 5ae:	90 93 2c 01 	sts	0x012C, r25
 5b2:	80 93 2b 01 	sts	0x012B, r24
 5b6:	27 c0       	rjmp	.+78     	; 0x606 <malloc+0x9c>
 5b8:	21 15       	cp	r18, r1
 5ba:	31 05       	cpc	r19, r1
 5bc:	31 f0       	breq	.+12     	; 0x5ca <malloc+0x60>
 5be:	42 17       	cp	r20, r18
 5c0:	53 07       	cpc	r21, r19
 5c2:	18 f0       	brcs	.+6      	; 0x5ca <malloc+0x60>
 5c4:	a9 01       	movw	r20, r18
 5c6:	db 01       	movw	r26, r22
 5c8:	01 c0       	rjmp	.+2      	; 0x5cc <malloc+0x62>
 5ca:	ef 01       	movw	r28, r30
 5cc:	9a 01       	movw	r18, r20
 5ce:	bd 01       	movw	r22, r26
 5d0:	df 01       	movw	r26, r30
 5d2:	02 80       	ldd	r0, Z+2	; 0x02
 5d4:	f3 81       	ldd	r31, Z+3	; 0x03
 5d6:	e0 2d       	mov	r30, r0
 5d8:	d7 cf       	rjmp	.-82     	; 0x588 <malloc+0x1e>
 5da:	21 15       	cp	r18, r1
 5dc:	31 05       	cpc	r19, r1
 5de:	f9 f0       	breq	.+62     	; 0x61e <malloc+0xb4>
 5e0:	28 1b       	sub	r18, r24
 5e2:	39 0b       	sbc	r19, r25
 5e4:	24 30       	cpi	r18, 0x04	; 4
 5e6:	31 05       	cpc	r19, r1
 5e8:	80 f4       	brcc	.+32     	; 0x60a <malloc+0xa0>
 5ea:	8a 81       	ldd	r24, Y+2	; 0x02
 5ec:	9b 81       	ldd	r25, Y+3	; 0x03
 5ee:	61 15       	cp	r22, r1
 5f0:	71 05       	cpc	r23, r1
 5f2:	21 f0       	breq	.+8      	; 0x5fc <malloc+0x92>
 5f4:	fb 01       	movw	r30, r22
 5f6:	93 83       	std	Z+3, r25	; 0x03
 5f8:	82 83       	std	Z+2, r24	; 0x02
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <malloc+0x9a>
 5fc:	90 93 2c 01 	sts	0x012C, r25
 600:	80 93 2b 01 	sts	0x012B, r24
 604:	fe 01       	movw	r30, r28
 606:	32 96       	adiw	r30, 0x02	; 2
 608:	44 c0       	rjmp	.+136    	; 0x692 <malloc+0x128>
 60a:	fe 01       	movw	r30, r28
 60c:	e2 0f       	add	r30, r18
 60e:	f3 1f       	adc	r31, r19
 610:	81 93       	st	Z+, r24
 612:	91 93       	st	Z+, r25
 614:	22 50       	subi	r18, 0x02	; 2
 616:	31 09       	sbc	r19, r1
 618:	39 83       	std	Y+1, r19	; 0x01
 61a:	28 83       	st	Y, r18
 61c:	3a c0       	rjmp	.+116    	; 0x692 <malloc+0x128>
 61e:	20 91 29 01 	lds	r18, 0x0129
 622:	30 91 2a 01 	lds	r19, 0x012A
 626:	23 2b       	or	r18, r19
 628:	41 f4       	brne	.+16     	; 0x63a <malloc+0xd0>
 62a:	20 91 02 01 	lds	r18, 0x0102
 62e:	30 91 03 01 	lds	r19, 0x0103
 632:	30 93 2a 01 	sts	0x012A, r19
 636:	20 93 29 01 	sts	0x0129, r18
 63a:	20 91 00 01 	lds	r18, 0x0100
 63e:	30 91 01 01 	lds	r19, 0x0101
 642:	21 15       	cp	r18, r1
 644:	31 05       	cpc	r19, r1
 646:	41 f4       	brne	.+16     	; 0x658 <malloc+0xee>
 648:	2d b7       	in	r18, 0x3d	; 61
 64a:	3e b7       	in	r19, 0x3e	; 62
 64c:	40 91 04 01 	lds	r20, 0x0104
 650:	50 91 05 01 	lds	r21, 0x0105
 654:	24 1b       	sub	r18, r20
 656:	35 0b       	sbc	r19, r21
 658:	e0 91 29 01 	lds	r30, 0x0129
 65c:	f0 91 2a 01 	lds	r31, 0x012A
 660:	e2 17       	cp	r30, r18
 662:	f3 07       	cpc	r31, r19
 664:	a0 f4       	brcc	.+40     	; 0x68e <malloc+0x124>
 666:	2e 1b       	sub	r18, r30
 668:	3f 0b       	sbc	r19, r31
 66a:	28 17       	cp	r18, r24
 66c:	39 07       	cpc	r19, r25
 66e:	78 f0       	brcs	.+30     	; 0x68e <malloc+0x124>
 670:	ac 01       	movw	r20, r24
 672:	4e 5f       	subi	r20, 0xFE	; 254
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	24 17       	cp	r18, r20
 678:	35 07       	cpc	r19, r21
 67a:	48 f0       	brcs	.+18     	; 0x68e <malloc+0x124>
 67c:	4e 0f       	add	r20, r30
 67e:	5f 1f       	adc	r21, r31
 680:	50 93 2a 01 	sts	0x012A, r21
 684:	40 93 29 01 	sts	0x0129, r20
 688:	81 93       	st	Z+, r24
 68a:	91 93       	st	Z+, r25
 68c:	02 c0       	rjmp	.+4      	; 0x692 <malloc+0x128>
 68e:	e0 e0       	ldi	r30, 0x00	; 0
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	cf 01       	movw	r24, r30
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <free>:
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	09 f4       	brne	.+2      	; 0x6a4 <free+0xa>
 6a2:	87 c0       	rjmp	.+270    	; 0x7b2 <free+0x118>
 6a4:	fc 01       	movw	r30, r24
 6a6:	32 97       	sbiw	r30, 0x02	; 2
 6a8:	13 82       	std	Z+3, r1	; 0x03
 6aa:	12 82       	std	Z+2, r1	; 0x02
 6ac:	c0 91 2b 01 	lds	r28, 0x012B
 6b0:	d0 91 2c 01 	lds	r29, 0x012C
 6b4:	20 97       	sbiw	r28, 0x00	; 0
 6b6:	81 f4       	brne	.+32     	; 0x6d8 <free+0x3e>
 6b8:	20 81       	ld	r18, Z
 6ba:	31 81       	ldd	r19, Z+1	; 0x01
 6bc:	28 0f       	add	r18, r24
 6be:	39 1f       	adc	r19, r25
 6c0:	80 91 29 01 	lds	r24, 0x0129
 6c4:	90 91 2a 01 	lds	r25, 0x012A
 6c8:	82 17       	cp	r24, r18
 6ca:	93 07       	cpc	r25, r19
 6cc:	79 f5       	brne	.+94     	; 0x72c <free+0x92>
 6ce:	f0 93 2a 01 	sts	0x012A, r31
 6d2:	e0 93 29 01 	sts	0x0129, r30
 6d6:	6d c0       	rjmp	.+218    	; 0x7b2 <free+0x118>
 6d8:	de 01       	movw	r26, r28
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	ae 17       	cp	r26, r30
 6e0:	bf 07       	cpc	r27, r31
 6e2:	50 f4       	brcc	.+20     	; 0x6f8 <free+0x5e>
 6e4:	12 96       	adiw	r26, 0x02	; 2
 6e6:	4d 91       	ld	r20, X+
 6e8:	5c 91       	ld	r21, X
 6ea:	13 97       	sbiw	r26, 0x03	; 3
 6ec:	9d 01       	movw	r18, r26
 6ee:	41 15       	cp	r20, r1
 6f0:	51 05       	cpc	r21, r1
 6f2:	09 f1       	breq	.+66     	; 0x736 <free+0x9c>
 6f4:	da 01       	movw	r26, r20
 6f6:	f3 cf       	rjmp	.-26     	; 0x6de <free+0x44>
 6f8:	b3 83       	std	Z+3, r27	; 0x03
 6fa:	a2 83       	std	Z+2, r26	; 0x02
 6fc:	40 81       	ld	r20, Z
 6fe:	51 81       	ldd	r21, Z+1	; 0x01
 700:	84 0f       	add	r24, r20
 702:	95 1f       	adc	r25, r21
 704:	8a 17       	cp	r24, r26
 706:	9b 07       	cpc	r25, r27
 708:	71 f4       	brne	.+28     	; 0x726 <free+0x8c>
 70a:	8d 91       	ld	r24, X+
 70c:	9c 91       	ld	r25, X
 70e:	11 97       	sbiw	r26, 0x01	; 1
 710:	84 0f       	add	r24, r20
 712:	95 1f       	adc	r25, r21
 714:	02 96       	adiw	r24, 0x02	; 2
 716:	91 83       	std	Z+1, r25	; 0x01
 718:	80 83       	st	Z, r24
 71a:	12 96       	adiw	r26, 0x02	; 2
 71c:	8d 91       	ld	r24, X+
 71e:	9c 91       	ld	r25, X
 720:	13 97       	sbiw	r26, 0x03	; 3
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <free+0x9c>
 72c:	f0 93 2c 01 	sts	0x012C, r31
 730:	e0 93 2b 01 	sts	0x012B, r30
 734:	3e c0       	rjmp	.+124    	; 0x7b2 <free+0x118>
 736:	d9 01       	movw	r26, r18
 738:	13 96       	adiw	r26, 0x03	; 3
 73a:	fc 93       	st	X, r31
 73c:	ee 93       	st	-X, r30
 73e:	12 97       	sbiw	r26, 0x02	; 2
 740:	4d 91       	ld	r20, X+
 742:	5d 91       	ld	r21, X+
 744:	a4 0f       	add	r26, r20
 746:	b5 1f       	adc	r27, r21
 748:	ea 17       	cp	r30, r26
 74a:	fb 07       	cpc	r31, r27
 74c:	79 f4       	brne	.+30     	; 0x76c <free+0xd2>
 74e:	80 81       	ld	r24, Z
 750:	91 81       	ldd	r25, Z+1	; 0x01
 752:	84 0f       	add	r24, r20
 754:	95 1f       	adc	r25, r21
 756:	02 96       	adiw	r24, 0x02	; 2
 758:	d9 01       	movw	r26, r18
 75a:	11 96       	adiw	r26, 0x01	; 1
 75c:	9c 93       	st	X, r25
 75e:	8e 93       	st	-X, r24
 760:	82 81       	ldd	r24, Z+2	; 0x02
 762:	93 81       	ldd	r25, Z+3	; 0x03
 764:	13 96       	adiw	r26, 0x03	; 3
 766:	9c 93       	st	X, r25
 768:	8e 93       	st	-X, r24
 76a:	12 97       	sbiw	r26, 0x02	; 2
 76c:	e0 e0       	ldi	r30, 0x00	; 0
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	9b 81       	ldd	r25, Y+3	; 0x03
 774:	00 97       	sbiw	r24, 0x00	; 0
 776:	19 f0       	breq	.+6      	; 0x77e <free+0xe4>
 778:	fe 01       	movw	r30, r28
 77a:	ec 01       	movw	r28, r24
 77c:	f9 cf       	rjmp	.-14     	; 0x770 <free+0xd6>
 77e:	ce 01       	movw	r24, r28
 780:	02 96       	adiw	r24, 0x02	; 2
 782:	28 81       	ld	r18, Y
 784:	39 81       	ldd	r19, Y+1	; 0x01
 786:	82 0f       	add	r24, r18
 788:	93 1f       	adc	r25, r19
 78a:	20 91 29 01 	lds	r18, 0x0129
 78e:	30 91 2a 01 	lds	r19, 0x012A
 792:	28 17       	cp	r18, r24
 794:	39 07       	cpc	r19, r25
 796:	69 f4       	brne	.+26     	; 0x7b2 <free+0x118>
 798:	30 97       	sbiw	r30, 0x00	; 0
 79a:	29 f4       	brne	.+10     	; 0x7a6 <free+0x10c>
 79c:	10 92 2c 01 	sts	0x012C, r1
 7a0:	10 92 2b 01 	sts	0x012B, r1
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <free+0x110>
 7a6:	13 82       	std	Z+3, r1	; 0x03
 7a8:	12 82       	std	Z+2, r1	; 0x02
 7aa:	d0 93 2a 01 	sts	0x012A, r29
 7ae:	c0 93 29 01 	sts	0x0129, r28
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <strcat>:
 7b8:	fb 01       	movw	r30, r22
 7ba:	dc 01       	movw	r26, r24
 7bc:	0d 90       	ld	r0, X+
 7be:	00 20       	and	r0, r0
 7c0:	e9 f7       	brne	.-6      	; 0x7bc <strcat+0x4>
 7c2:	11 97       	sbiw	r26, 0x01	; 1
 7c4:	01 90       	ld	r0, Z+
 7c6:	0d 92       	st	X+, r0
 7c8:	00 20       	and	r0, r0
 7ca:	e1 f7       	brne	.-8      	; 0x7c4 <strcat+0xc>
 7cc:	08 95       	ret

000007ce <strcpy>:
 7ce:	fb 01       	movw	r30, r22
 7d0:	dc 01       	movw	r26, r24
 7d2:	01 90       	ld	r0, Z+
 7d4:	0d 92       	st	X+, r0
 7d6:	00 20       	and	r0, r0
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <strcpy+0x4>
 7da:	08 95       	ret

000007dc <__utoa_ncheck>:
 7dc:	bb 27       	eor	r27, r27

000007de <__utoa_common>:
 7de:	fb 01       	movw	r30, r22
 7e0:	55 27       	eor	r21, r21
 7e2:	aa 27       	eor	r26, r26
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	aa 1f       	adc	r26, r26
 7ea:	a4 17       	cp	r26, r20
 7ec:	10 f0       	brcs	.+4      	; 0x7f2 <__utoa_common+0x14>
 7ee:	a4 1b       	sub	r26, r20
 7f0:	83 95       	inc	r24
 7f2:	50 51       	subi	r21, 0x10	; 16
 7f4:	b9 f7       	brne	.-18     	; 0x7e4 <__utoa_common+0x6>
 7f6:	a0 5d       	subi	r26, 0xD0	; 208
 7f8:	aa 33       	cpi	r26, 0x3A	; 58
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <__utoa_common+0x20>
 7fc:	a9 5d       	subi	r26, 0xD9	; 217
 7fe:	a1 93       	st	Z+, r26
 800:	00 97       	sbiw	r24, 0x00	; 0
 802:	79 f7       	brne	.-34     	; 0x7e2 <__utoa_common+0x4>
 804:	b1 11       	cpse	r27, r1
 806:	b1 93       	st	Z+, r27
 808:	11 92       	st	Z+, r1
 80a:	cb 01       	movw	r24, r22
 80c:	0c 94 08 04 	jmp	0x810	; 0x810 <strrev>

00000810 <strrev>:
 810:	dc 01       	movw	r26, r24
 812:	fc 01       	movw	r30, r24
 814:	67 2f       	mov	r22, r23
 816:	71 91       	ld	r23, Z+
 818:	77 23       	and	r23, r23
 81a:	e1 f7       	brne	.-8      	; 0x814 <strrev+0x4>
 81c:	32 97       	sbiw	r30, 0x02	; 2
 81e:	04 c0       	rjmp	.+8      	; 0x828 <strrev+0x18>
 820:	7c 91       	ld	r23, X
 822:	6d 93       	st	X+, r22
 824:	70 83       	st	Z, r23
 826:	62 91       	ld	r22, -Z
 828:	ae 17       	cp	r26, r30
 82a:	bf 07       	cpc	r27, r31
 82c:	c8 f3       	brcs	.-14     	; 0x820 <strrev+0x10>
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
