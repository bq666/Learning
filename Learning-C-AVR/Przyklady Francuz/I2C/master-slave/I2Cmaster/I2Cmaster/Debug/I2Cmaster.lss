
I2Cmaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009ac  00000a40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800118  00800118  00000a58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000834  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b2  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000462  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002de  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f6  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 01 	call	0x220	; 0x220 <main>
  9e:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_WaitForComplete>:
void I2C_SetBusSpeed(uint16_t speed);	//Ustaw prêdkoœæ magistrali I2C (Prêdkoœæ wyniesie speed*100[Hz])
void I2C_SendAddr(uint8_t address);		//Wyœlij adres urz¹dzenia slave
void I2C_SendByte(uint8_t byte);		//Wyœlij bajt danych do slave
uint8_t I2C_ReceiveData_ACK();			//Odbierz bajt danych od slave, wysy³aj¹c ACK
uint8_t I2C_ReceiveData_NACK();			//Odbierz bajt danych od slave, nie wysy³aj ACK
static inline void I2C_WaitForComplete() {while (!(TWCR & _BV(TWINT)));};		//Zaczekaj na koniec bie¿¹cej operacji I2C
  a6:	80 91 bc 00 	lds	r24, 0x00BC
  aa:	87 ff       	sbrs	r24, 7
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <I2C_WaitForComplete>
  ae:	08 95       	ret

000000b0 <I2C_Start>:
	I2C_SetBusSpeed(I2CBUSCLOCK/100);
}

void I2C_Start()
{
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
  b0:	84 ea       	ldi	r24, 0xA4	; 164
  b2:	80 93 bc 00 	sts	0x00BC, r24
	I2C_WaitForComplete();
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForComplete>
	if((TW_STATUS!=TW_START) && (TW_STATUS!=TW_REP_START)) I2C_SetError(I2C_STARTError);
  ba:	80 91 b9 00 	lds	r24, 0x00B9
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	88 30       	cpi	r24, 0x08	; 8
  c2:	41 f0       	breq	.+16     	; 0xd4 <I2C_Start+0x24>
  c4:	80 91 b9 00 	lds	r24, 0x00B9
  c8:	88 7f       	andi	r24, 0xF8	; 248
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	19 f0       	breq	.+6      	; 0xd4 <I2C_Start+0x24>
#define I2C_STARTError	1
#define I2C_NoNACK		3
#define I2C_NoACK		4

extern uint8_t I2C_Error;
inline void I2C_SetError(uint8_t err) { I2C_Error=err;};
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 18 01 	sts	0x0118, r24
  d4:	08 95       	ret

000000d6 <I2C_SendAddr>:
}

void I2C_SendAddr(uint8_t address)
{
  d6:	cf 93       	push	r28
   uint8_t Status;
   
   if((address & 0x01)==0) Status=TW_MT_SLA_ACK;
  d8:	80 fd       	sbrc	r24, 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <I2C_SendAddr+0xa>
  dc:	c8 e1       	ldi	r28, 0x18	; 24
  de:	01 c0       	rjmp	.+2      	; 0xe2 <I2C_SendAddr+0xc>
   else Status=TW_MR_SLA_ACK; 
  e0:	c0 e4       	ldi	r28, 0x40	; 64
   
   TWDR=address; 
  e2:	80 93 bb 00 	sts	0x00BB, r24
   TWCR=_BV(TWINT) | _BV(TWEN);
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24
   I2C_WaitForComplete();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForComplete>
   if(TW_STATUS!=Status) I2C_SetError(I2C_NoACK); else I2C_SetError(I2C_OK);
  f0:	20 91 b9 00 	lds	r18, 0x00B9
  f4:	28 7f       	andi	r18, 0xF8	; 248
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	8c 2f       	mov	r24, r28
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	28 17       	cp	r18, r24
  fe:	39 07       	cpc	r19, r25
 100:	21 f0       	breq	.+8      	; 0x10a <I2C_SendAddr+0x34>
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	80 93 18 01 	sts	0x0118, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <I2C_SendAddr+0x38>
 10a:	10 92 18 01 	sts	0x0118, r1
}
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <I2C_SendByte>:

void I2C_SendByte(uint8_t byte)
{
   TWDR=byte; 
 112:	80 93 bb 00 	sts	0x00BB, r24
   TWCR=_BV(TWINT) | _BV(TWEN);
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	80 93 bc 00 	sts	0x00BC, r24
   I2C_WaitForComplete();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForComplete>
   if(TW_STATUS!=TW_MT_DATA_ACK) I2C_SetError(I2C_NoACK);
 120:	80 91 b9 00 	lds	r24, 0x00B9
 124:	88 7f       	andi	r24, 0xF8	; 248
 126:	88 32       	cpi	r24, 0x28	; 40
 128:	19 f0       	breq	.+6      	; 0x130 <I2C_SendByte+0x1e>
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	80 93 18 01 	sts	0x0118, r24
 130:	08 95       	ret

00000132 <I2C_ReceiveData_ACK>:
}

uint8_t I2C_ReceiveData_ACK()
{
  TWCR=_BV(TWEA) | _BV(TWINT) | _BV(TWEN);
 132:	84 ec       	ldi	r24, 0xC4	; 196
 134:	80 93 bc 00 	sts	0x00BC, r24
  I2C_WaitForComplete();
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForComplete>
  if(TW_STATUS!=TW_MR_DATA_ACK) I2C_SetError(I2C_NoACK);
 13c:	80 91 b9 00 	lds	r24, 0x00B9
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	80 35       	cpi	r24, 0x50	; 80
 144:	19 f0       	breq	.+6      	; 0x14c <I2C_ReceiveData_ACK+0x1a>
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	80 93 18 01 	sts	0x0118, r24
  return TWDR;
 14c:	80 91 bb 00 	lds	r24, 0x00BB
}
 150:	08 95       	ret

00000152 <I2C_ReceiveData_NACK>:

uint8_t I2C_ReceiveData_NACK()
{
  TWCR=_BV(TWINT) | _BV(TWEN);
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24
  I2C_WaitForComplete();
 158:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_WaitForComplete>
  if (TW_STATUS!=TW_MR_DATA_NACK) I2C_SetError(I2C_NoNACK);
 15c:	80 91 b9 00 	lds	r24, 0x00B9
 160:	88 7f       	andi	r24, 0xF8	; 248
 162:	88 35       	cpi	r24, 0x58	; 88
 164:	19 f0       	breq	.+6      	; 0x16c <I2C_ReceiveData_NACK+0x1a>
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	80 93 18 01 	sts	0x0118, r24
  return TWDR;
 16c:	80 91 bb 00 	lds	r24, 0x00BB
}
 170:	08 95       	ret

00000172 <I2C_SetBusSpeed>:

void I2C_SetBusSpeed(uint16_t speed)
{
	speed=(F_CPU/speed/100-16)/2;		//speed=TWBR*4^TWPS
 172:	9c 01       	movw	r18, r24
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	71 e7       	ldi	r23, 0x71	; 113
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 c6 01 	call	0x38c	; 0x38c <__udivmodsi4>
 184:	20 51       	subi	r18, 0x10	; 16
 186:	31 09       	sbc	r19, r1
 188:	41 09       	sbc	r20, r1
 18a:	51 09       	sbc	r21, r1
 18c:	56 95       	lsr	r21
 18e:	47 95       	ror	r20
 190:	37 95       	ror	r19
 192:	27 95       	ror	r18
	uint8_t prescaler=0;
 194:	90 e0       	ldi	r25, 0x00	; 0
	while(speed>255)				//Oblicz wartoœæ preskalera
 196:	2f 3f       	cpi	r18, 0xFF	; 255
 198:	31 05       	cpc	r19, r1
 19a:	39 f0       	breq	.+14     	; 0x1aa <I2C_SetBusSpeed+0x38>
 19c:	30 f0       	brcs	.+12     	; 0x1aa <I2C_SetBusSpeed+0x38>
	 {
		prescaler++;
 19e:	9f 5f       	subi	r25, 0xFF	; 255
		speed=speed/4;
 1a0:	36 95       	lsr	r19
 1a2:	27 95       	ror	r18
 1a4:	36 95       	lsr	r19
 1a6:	27 95       	ror	r18
 1a8:	f6 cf       	rjmp	.-20     	; 0x196 <I2C_SetBusSpeed+0x24>
	 };
	TWSR=(TWSR & (_BV(TWPS1)|_BV(TWPS0))) | prescaler;
 1aa:	80 91 b9 00 	lds	r24, 0x00B9
 1ae:	83 70       	andi	r24, 0x03	; 3
 1b0:	89 2b       	or	r24, r25
 1b2:	80 93 b9 00 	sts	0x00B9, r24
	TWBR=speed;
 1b6:	20 93 b8 00 	sts	0x00B8, r18
 1ba:	08 95       	ret

000001bc <I2C_Init>:

uint8_t I2C_Error;

void I2C_Init()
{
	TWCR =_BV(TWEA) | _BV(TWEN);		//W³¹cz interfejs I2C
 1bc:	84 e4       	ldi	r24, 0x44	; 68
 1be:	80 93 bc 00 	sts	0x00BC, r24
	I2C_SetBusSpeed(I2CBUSCLOCK/100);
 1c2:	84 ef       	ldi	r24, 0xF4	; 244
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0c 94 b9 00 	jmp	0x172	; 0x172 <I2C_SetBusSpeed>

000001ca <I2C_SendStartAndSelect>:
	TWSR=(TWSR & (_BV(TWPS1)|_BV(TWPS0))) | prescaler;
	TWBR=speed;
}

void I2C_SendStartAndSelect(uint8_t addr)
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	I2C_Start();
 1d4:	89 83       	std	Y+1, r24	; 0x01
 1d6:	0e 94 58 00 	call	0xb0	; 0xb0 <I2C_Start>
	I2C_SendAddr(addr);
 1da:	89 81       	ldd	r24, Y+1	; 0x01
}
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
}

void I2C_SendStartAndSelect(uint8_t addr)
{
	I2C_Start();
	I2C_SendAddr(addr);
 1e2:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <I2C_SendAddr>

000001e6 <I2C_WaitTillStopWasSent>:
void I2C_SendAddr(uint8_t address);		//Wyœlij adres urz¹dzenia slave
void I2C_SendByte(uint8_t byte);		//Wyœlij bajt danych do slave
uint8_t I2C_ReceiveData_ACK();			//Odbierz bajt danych od slave, wysy³aj¹c ACK
uint8_t I2C_ReceiveData_NACK();			//Odbierz bajt danych od slave, nie wysy³aj ACK
static inline void I2C_WaitForComplete() {while (!(TWCR & _BV(TWINT)));};		//Zaczekaj na koniec bie¿¹cej operacji I2C
static inline void I2C_WaitTillStopWasSent() {while (TWCR & _BV(TWSTO));};	//Zaczekaj na koniec nadawania sygna³u STOP
 1e6:	80 91 bc 00 	lds	r24, 0x00BC
 1ea:	84 fd       	sbrc	r24, 4
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <I2C_WaitTillStopWasSent>
 1ee:	08 95       	ret

000001f0 <I2C_SendTxt>:
#include <stdio.h>

#define DEVADDR 190

void I2C_SendTxt(char *txt)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
	while(*txt) I2C_SendByte(*txt++);
 1f6:	89 91       	ld	r24, Y+
 1f8:	88 23       	and	r24, r24
 1fa:	19 f0       	breq	.+6      	; 0x202 <I2C_SendTxt+0x12>
 1fc:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <I2C_SendTxt+0x6>
	I2C_SendByte(0);	//Wyœlij znak koñca ³añcucha
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
#define DEVADDR 190

void I2C_SendTxt(char *txt)
{
	while(*txt) I2C_SendByte(*txt++);
	I2C_SendByte(0);	//Wyœlij znak koñca ³añcucha
 206:	0c 94 89 00 	jmp	0x112	; 0x112 <I2C_SendByte>

0000020a <I2C_StartSelectWait>:
}

void I2C_StartSelectWait(uint8_t addr)
{
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
	do
	{
		I2C_SendStartAndSelect(addr);
 20e:	8c 2f       	mov	r24, r28
 210:	0e 94 e5 00 	call	0x1ca	; 0x1ca <I2C_SendStartAndSelect>
	}while(I2C_Error==I2C_NoACK);
 214:	80 91 18 01 	lds	r24, 0x0118
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	c9 f3       	breq	.-14     	; 0x20e <I2C_StartSelectWait+0x4>
}
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <main>:

volatile uint16_t temper;

int main()
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	27 97       	sbiw	r28, 0x07	; 7
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	83 ed       	ldi	r24, 0xD3	; 211
 238:	90 e3       	ldi	r25, 0x30	; 48
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <main+0x1a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <main+0x24>
 244:	00 00       	nop
	char wynik[7];

	_delay_ms(1000);
	I2C_Init();	//Zainicjuj TWI z domyœln¹ szybkoœci¹ 100kHz
 246:	0e 94 de 00 	call	0x1bc	; 0x1bc <I2C_Init>
	I2C_StartSelectWait(DEVADDR);
 24a:	8e eb       	ldi	r24, 0xBE	; 190
 24c:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
	I2C_SendByte('c');
 250:	83 e6       	ldi	r24, 0x63	; 99
 252:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
extern uint8_t I2C_Error;
inline void I2C_SetError(uint8_t err) { I2C_Error=err;};

void I2C_Init();
void I2C_Start();
static inline void I2C_Stop() {TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);};	//Nadaj sygna³ STOP
 256:	14 e9       	ldi	r17, 0x94	; 148
 258:	10 93 bc 00 	sts	0x00BC, r17
	I2C_Stop();
	I2C_WaitTillStopWasSent();
 25c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_WaitTillStopWasSent>

	I2C_StartSelectWait(DEVADDR);
 260:	8e eb       	ldi	r24, 0xBE	; 190
 262:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
	I2C_SendByte('g'); I2C_SendByte(0); I2C_SendByte(0);
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 278:	10 93 bc 00 	sts	0x00BC, r17
	I2C_Stop();
	I2C_WaitTillStopWasSent();
 27c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_WaitTillStopWasSent>

	I2C_StartSelectWait(DEVADDR);
 280:	8e eb       	ldi	r24, 0xBE	; 190
 282:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
	I2C_SendByte('t'); I2C_SendTxt("Temperatura po I2C");
 286:	84 e7       	ldi	r24, 0x74	; 116
 288:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_SendTxt>
 294:	10 93 bc 00 	sts	0x00BC, r17
	I2C_Stop();
	I2C_WaitTillStopWasSent();
 298:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_WaitTillStopWasSent>
 29c:	34 e9       	ldi	r19, 0x94	; 148
 29e:	b3 2e       	mov	r11, r19
		I2C_StartSelectWait(DEVADDR);
		I2C_SendByte('g'); I2C_SendByte(0); I2C_SendByte(1);
		I2C_Stop();
		I2C_WaitTillStopWasSent();

		sprintf(wynik, "%5d", temper);
 2a0:	43 e1       	ldi	r20, 0x13	; 19
 2a2:	c4 2e       	mov	r12, r20
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	d4 2e       	mov	r13, r20
 2a8:	8e 01       	movw	r16, r28
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t len=strlen(wynik);
		memmove(&wynik[len-1], &wynik[len-2], 3);
		wynik[len-2]=',';
 2ae:	5c e2       	ldi	r21, 0x2C	; 44
 2b0:	a5 2e       	mov	r10, r21
	I2C_SendByte('t'); I2C_SendTxt("Temperatura po I2C");
	I2C_Stop();
	I2C_WaitTillStopWasSent();
	while(1)
	{
		I2C_StartSelectWait(DEVADDR | TW_READ);
 2b2:	8f eb       	ldi	r24, 0xBF	; 191
 2b4:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
		temper=I2C_ReceiveData_ACK();
 2b8:	0e 94 99 00 	call	0x132	; 0x132 <I2C_ReceiveData_ACK>
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	90 93 1a 01 	sts	0x011A, r25
 2c2:	80 93 19 01 	sts	0x0119, r24
		temper+=256*I2C_ReceiveData_NACK();
 2c6:	e0 90 19 01 	lds	r14, 0x0119
 2ca:	f0 90 1a 01 	lds	r15, 0x011A
 2ce:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_ReceiveData_NACK>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	98 2f       	mov	r25, r24
 2d6:	88 27       	eor	r24, r24
 2d8:	8e 0d       	add	r24, r14
 2da:	9f 1d       	adc	r25, r15
 2dc:	90 93 1a 01 	sts	0x011A, r25
 2e0:	80 93 19 01 	sts	0x0119, r24
 2e4:	b0 92 bc 00 	sts	0x00BC, r11
		I2C_Stop();
		
		I2C_StartSelectWait(DEVADDR);
 2e8:	8e eb       	ldi	r24, 0xBE	; 190
 2ea:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
		I2C_SendByte('g'); I2C_SendByte(0); I2C_SendByte(1);
 2ee:	87 e6       	ldi	r24, 0x67	; 103
 2f0:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 300:	b0 92 bc 00 	sts	0x00BC, r11
		I2C_Stop();
		I2C_WaitTillStopWasSent();
 304:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_WaitTillStopWasSent>

		sprintf(wynik, "%5d", temper);
 308:	80 91 19 01 	lds	r24, 0x0119
 30c:	90 91 1a 01 	lds	r25, 0x011A
 310:	9f 93       	push	r25
 312:	8f 93       	push	r24
 314:	df 92       	push	r13
 316:	cf 92       	push	r12
 318:	1f 93       	push	r17
 31a:	0f 93       	push	r16
 31c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sprintf>
		uint8_t len=strlen(wynik);
 320:	f8 01       	movw	r30, r16
 322:	01 90       	ld	r0, Z+
 324:	00 20       	and	r0, r0
 326:	e9 f7       	brne	.-6      	; 0x322 <main+0x102>
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	e0 1b       	sub	r30, r16
 32c:	f1 0b       	sbc	r31, r17
 32e:	ff 27       	eor	r31, r31
		memmove(&wynik[len-1], &wynik[len-2], 3);
 330:	7f 01       	movw	r14, r30
 332:	22 e0       	ldi	r18, 0x02	; 2
 334:	e2 1a       	sub	r14, r18
 336:	f1 08       	sbc	r15, r1
 338:	e0 0e       	add	r14, r16
 33a:	f1 1e       	adc	r15, r17
 33c:	cf 01       	movw	r24, r30
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	43 e0       	ldi	r20, 0x03	; 3
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	b7 01       	movw	r22, r14
 346:	80 0f       	add	r24, r16
 348:	91 1f       	adc	r25, r17
 34a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <memmove>
		wynik[len-2]=',';
 34e:	f7 01       	movw	r30, r14
 350:	a0 82       	st	Z, r10

		I2C_StartSelectWait(DEVADDR);
 352:	8e eb       	ldi	r24, 0xBE	; 190
 354:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_StartSelectWait>
		I2C_SendByte('t'); I2C_SendTxt(wynik);
 358:	84 e7       	ldi	r24, 0x74	; 116
 35a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_SendByte>
 35e:	c8 01       	movw	r24, r16
 360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_SendTxt>
 364:	b0 92 bc 00 	sts	0x00BC, r11
		I2C_Stop();
		I2C_WaitTillStopWasSent();
 368:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <I2C_WaitTillStopWasSent>
 36c:	ff ef       	ldi	r31, 0xFF	; 255
 36e:	21 ee       	ldi	r18, 0xE1	; 225
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	f1 50       	subi	r31, 0x01	; 1
 374:	20 40       	sbci	r18, 0x00	; 0
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x152>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <main+0x15c>
 37c:	00 00       	nop
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	93 cf       	rjmp	.-218    	; 0x2b2 <main+0x92>

0000038c <__udivmodsi4>:
 38c:	a1 e2       	ldi	r26, 0x21	; 33
 38e:	1a 2e       	mov	r1, r26
 390:	aa 1b       	sub	r26, r26
 392:	bb 1b       	sub	r27, r27
 394:	fd 01       	movw	r30, r26
 396:	0d c0       	rjmp	.+26     	; 0x3b2 <__udivmodsi4_ep>

00000398 <__udivmodsi4_loop>:
 398:	aa 1f       	adc	r26, r26
 39a:	bb 1f       	adc	r27, r27
 39c:	ee 1f       	adc	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	a2 17       	cp	r26, r18
 3a2:	b3 07       	cpc	r27, r19
 3a4:	e4 07       	cpc	r30, r20
 3a6:	f5 07       	cpc	r31, r21
 3a8:	20 f0       	brcs	.+8      	; 0x3b2 <__udivmodsi4_ep>
 3aa:	a2 1b       	sub	r26, r18
 3ac:	b3 0b       	sbc	r27, r19
 3ae:	e4 0b       	sbc	r30, r20
 3b0:	f5 0b       	sbc	r31, r21

000003b2 <__udivmodsi4_ep>:
 3b2:	66 1f       	adc	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	1a 94       	dec	r1
 3bc:	69 f7       	brne	.-38     	; 0x398 <__udivmodsi4_loop>
 3be:	60 95       	com	r22
 3c0:	70 95       	com	r23
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	9b 01       	movw	r18, r22
 3c8:	ac 01       	movw	r20, r24
 3ca:	bd 01       	movw	r22, r26
 3cc:	cf 01       	movw	r24, r30
 3ce:	08 95       	ret

000003d0 <memmove>:
 3d0:	68 17       	cp	r22, r24
 3d2:	79 07       	cpc	r23, r25
 3d4:	68 f4       	brcc	.+26     	; 0x3f0 <memmove+0x20>
 3d6:	fb 01       	movw	r30, r22
 3d8:	dc 01       	movw	r26, r24
 3da:	e4 0f       	add	r30, r20
 3dc:	f5 1f       	adc	r31, r21
 3de:	a4 0f       	add	r26, r20
 3e0:	b5 1f       	adc	r27, r21
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <memmove+0x18>
 3e4:	02 90       	ld	r0, -Z
 3e6:	0e 92       	st	-X, r0
 3e8:	41 50       	subi	r20, 0x01	; 1
 3ea:	50 40       	sbci	r21, 0x00	; 0
 3ec:	d8 f7       	brcc	.-10     	; 0x3e4 <memmove+0x14>
 3ee:	08 95       	ret
 3f0:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <memcpy>

000003f4 <sprintf>:
 3f4:	ae e0       	ldi	r26, 0x0E	; 14
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	0c 94 ab 04 	jmp	0x956	; 0x956 <__prologue_saves__+0x1c>
 400:	0d 89       	ldd	r16, Y+21	; 0x15
 402:	1e 89       	ldd	r17, Y+22	; 0x16
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	8c 83       	std	Y+4, r24	; 0x04
 408:	1a 83       	std	Y+2, r17	; 0x02
 40a:	09 83       	std	Y+1, r16	; 0x01
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	9f e7       	ldi	r25, 0x7F	; 127
 410:	9e 83       	std	Y+6, r25	; 0x06
 412:	8d 83       	std	Y+5, r24	; 0x05
 414:	ae 01       	movw	r20, r28
 416:	47 5e       	subi	r20, 0xE7	; 231
 418:	5f 4f       	sbci	r21, 0xFF	; 255
 41a:	6f 89       	ldd	r22, Y+23	; 0x17
 41c:	78 8d       	ldd	r23, Y+24	; 0x18
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	0e 94 1c 02 	call	0x438	; 0x438 <vfprintf>
 426:	ef 81       	ldd	r30, Y+7	; 0x07
 428:	f8 85       	ldd	r31, Y+8	; 0x08
 42a:	e0 0f       	add	r30, r16
 42c:	f1 1f       	adc	r31, r17
 42e:	10 82       	st	Z, r1
 430:	2e 96       	adiw	r28, 0x0e	; 14
 432:	e4 e0       	ldi	r30, 0x04	; 4
 434:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__epilogue_restores__+0x1c>

00000438 <vfprintf>:
 438:	ac e0       	ldi	r26, 0x0C	; 12
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e2       	ldi	r30, 0x22	; 34
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__prologue_saves__>
 444:	7c 01       	movw	r14, r24
 446:	6b 01       	movw	r12, r22
 448:	8a 01       	movw	r16, r20
 44a:	fc 01       	movw	r30, r24
 44c:	17 82       	std	Z+7, r1	; 0x07
 44e:	16 82       	std	Z+6, r1	; 0x06
 450:	83 81       	ldd	r24, Z+3	; 0x03
 452:	81 ff       	sbrs	r24, 1
 454:	bd c1       	rjmp	.+890    	; 0x7d0 <vfprintf+0x398>
 456:	ce 01       	movw	r24, r28
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	4c 01       	movw	r8, r24
 45c:	f7 01       	movw	r30, r14
 45e:	93 81       	ldd	r25, Z+3	; 0x03
 460:	f6 01       	movw	r30, r12
 462:	93 fd       	sbrc	r25, 3
 464:	85 91       	lpm	r24, Z+
 466:	93 ff       	sbrs	r25, 3
 468:	81 91       	ld	r24, Z+
 46a:	6f 01       	movw	r12, r30
 46c:	88 23       	and	r24, r24
 46e:	09 f4       	brne	.+2      	; 0x472 <vfprintf+0x3a>
 470:	ab c1       	rjmp	.+854    	; 0x7c8 <vfprintf+0x390>
 472:	85 32       	cpi	r24, 0x25	; 37
 474:	39 f4       	brne	.+14     	; 0x484 <vfprintf+0x4c>
 476:	93 fd       	sbrc	r25, 3
 478:	85 91       	lpm	r24, Z+
 47a:	93 ff       	sbrs	r25, 3
 47c:	81 91       	ld	r24, Z+
 47e:	6f 01       	movw	r12, r30
 480:	85 32       	cpi	r24, 0x25	; 37
 482:	29 f4       	brne	.+10     	; 0x48e <vfprintf+0x56>
 484:	b7 01       	movw	r22, r14
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 48c:	e7 cf       	rjmp	.-50     	; 0x45c <vfprintf+0x24>
 48e:	51 2c       	mov	r5, r1
 490:	31 2c       	mov	r3, r1
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	20 32       	cpi	r18, 0x20	; 32
 496:	a0 f4       	brcc	.+40     	; 0x4c0 <vfprintf+0x88>
 498:	8b 32       	cpi	r24, 0x2B	; 43
 49a:	69 f0       	breq	.+26     	; 0x4b6 <vfprintf+0x7e>
 49c:	30 f4       	brcc	.+12     	; 0x4aa <vfprintf+0x72>
 49e:	80 32       	cpi	r24, 0x20	; 32
 4a0:	59 f0       	breq	.+22     	; 0x4b8 <vfprintf+0x80>
 4a2:	83 32       	cpi	r24, 0x23	; 35
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <vfprintf+0x88>
 4a6:	20 61       	ori	r18, 0x10	; 16
 4a8:	2c c0       	rjmp	.+88     	; 0x502 <vfprintf+0xca>
 4aa:	8d 32       	cpi	r24, 0x2D	; 45
 4ac:	39 f0       	breq	.+14     	; 0x4bc <vfprintf+0x84>
 4ae:	80 33       	cpi	r24, 0x30	; 48
 4b0:	39 f4       	brne	.+14     	; 0x4c0 <vfprintf+0x88>
 4b2:	21 60       	ori	r18, 0x01	; 1
 4b4:	26 c0       	rjmp	.+76     	; 0x502 <vfprintf+0xca>
 4b6:	22 60       	ori	r18, 0x02	; 2
 4b8:	24 60       	ori	r18, 0x04	; 4
 4ba:	23 c0       	rjmp	.+70     	; 0x502 <vfprintf+0xca>
 4bc:	28 60       	ori	r18, 0x08	; 8
 4be:	21 c0       	rjmp	.+66     	; 0x502 <vfprintf+0xca>
 4c0:	27 fd       	sbrc	r18, 7
 4c2:	27 c0       	rjmp	.+78     	; 0x512 <vfprintf+0xda>
 4c4:	30 ed       	ldi	r19, 0xD0	; 208
 4c6:	38 0f       	add	r19, r24
 4c8:	3a 30       	cpi	r19, 0x0A	; 10
 4ca:	78 f4       	brcc	.+30     	; 0x4ea <vfprintf+0xb2>
 4cc:	26 ff       	sbrs	r18, 6
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <vfprintf+0xa4>
 4d0:	fa e0       	ldi	r31, 0x0A	; 10
 4d2:	5f 9e       	mul	r5, r31
 4d4:	30 0d       	add	r19, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	53 2e       	mov	r5, r19
 4da:	13 c0       	rjmp	.+38     	; 0x502 <vfprintf+0xca>
 4dc:	8a e0       	ldi	r24, 0x0A	; 10
 4de:	38 9e       	mul	r3, r24
 4e0:	30 0d       	add	r19, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	33 2e       	mov	r3, r19
 4e6:	20 62       	ori	r18, 0x20	; 32
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <vfprintf+0xca>
 4ea:	8e 32       	cpi	r24, 0x2E	; 46
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <vfprintf+0xbe>
 4ee:	26 fd       	sbrc	r18, 6
 4f0:	6b c1       	rjmp	.+726    	; 0x7c8 <vfprintf+0x390>
 4f2:	20 64       	ori	r18, 0x40	; 64
 4f4:	06 c0       	rjmp	.+12     	; 0x502 <vfprintf+0xca>
 4f6:	8c 36       	cpi	r24, 0x6C	; 108
 4f8:	11 f4       	brne	.+4      	; 0x4fe <vfprintf+0xc6>
 4fa:	20 68       	ori	r18, 0x80	; 128
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <vfprintf+0xca>
 4fe:	88 36       	cpi	r24, 0x68	; 104
 500:	41 f4       	brne	.+16     	; 0x512 <vfprintf+0xda>
 502:	f6 01       	movw	r30, r12
 504:	93 fd       	sbrc	r25, 3
 506:	85 91       	lpm	r24, Z+
 508:	93 ff       	sbrs	r25, 3
 50a:	81 91       	ld	r24, Z+
 50c:	6f 01       	movw	r12, r30
 50e:	81 11       	cpse	r24, r1
 510:	c1 cf       	rjmp	.-126    	; 0x494 <vfprintf+0x5c>
 512:	98 2f       	mov	r25, r24
 514:	9f 7d       	andi	r25, 0xDF	; 223
 516:	95 54       	subi	r25, 0x45	; 69
 518:	93 30       	cpi	r25, 0x03	; 3
 51a:	28 f4       	brcc	.+10     	; 0x526 <vfprintf+0xee>
 51c:	0c 5f       	subi	r16, 0xFC	; 252
 51e:	1f 4f       	sbci	r17, 0xFF	; 255
 520:	ff e3       	ldi	r31, 0x3F	; 63
 522:	f9 83       	std	Y+1, r31	; 0x01
 524:	0d c0       	rjmp	.+26     	; 0x540 <vfprintf+0x108>
 526:	83 36       	cpi	r24, 0x63	; 99
 528:	31 f0       	breq	.+12     	; 0x536 <vfprintf+0xfe>
 52a:	83 37       	cpi	r24, 0x73	; 115
 52c:	71 f0       	breq	.+28     	; 0x54a <vfprintf+0x112>
 52e:	83 35       	cpi	r24, 0x53	; 83
 530:	09 f0       	breq	.+2      	; 0x534 <vfprintf+0xfc>
 532:	5b c0       	rjmp	.+182    	; 0x5ea <vfprintf+0x1b2>
 534:	22 c0       	rjmp	.+68     	; 0x57a <vfprintf+0x142>
 536:	f8 01       	movw	r30, r16
 538:	80 81       	ld	r24, Z
 53a:	89 83       	std	Y+1, r24	; 0x01
 53c:	0e 5f       	subi	r16, 0xFE	; 254
 53e:	1f 4f       	sbci	r17, 0xFF	; 255
 540:	44 24       	eor	r4, r4
 542:	43 94       	inc	r4
 544:	51 2c       	mov	r5, r1
 546:	54 01       	movw	r10, r8
 548:	15 c0       	rjmp	.+42     	; 0x574 <vfprintf+0x13c>
 54a:	38 01       	movw	r6, r16
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	6f 0e       	add	r6, r31
 550:	71 1c       	adc	r7, r1
 552:	f8 01       	movw	r30, r16
 554:	a0 80       	ld	r10, Z
 556:	b1 80       	ldd	r11, Z+1	; 0x01
 558:	26 ff       	sbrs	r18, 6
 55a:	03 c0       	rjmp	.+6      	; 0x562 <vfprintf+0x12a>
 55c:	65 2d       	mov	r22, r5
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <vfprintf+0x12e>
 562:	6f ef       	ldi	r22, 0xFF	; 255
 564:	7f ef       	ldi	r23, 0xFF	; 255
 566:	c5 01       	movw	r24, r10
 568:	2c 87       	std	Y+12, r18	; 0x0c
 56a:	0e 94 02 04 	call	0x804	; 0x804 <strnlen>
 56e:	2c 01       	movw	r4, r24
 570:	83 01       	movw	r16, r6
 572:	2c 85       	ldd	r18, Y+12	; 0x0c
 574:	2f 77       	andi	r18, 0x7F	; 127
 576:	22 2e       	mov	r2, r18
 578:	17 c0       	rjmp	.+46     	; 0x5a8 <vfprintf+0x170>
 57a:	38 01       	movw	r6, r16
 57c:	f2 e0       	ldi	r31, 0x02	; 2
 57e:	6f 0e       	add	r6, r31
 580:	71 1c       	adc	r7, r1
 582:	f8 01       	movw	r30, r16
 584:	a0 80       	ld	r10, Z
 586:	b1 80       	ldd	r11, Z+1	; 0x01
 588:	26 ff       	sbrs	r18, 6
 58a:	03 c0       	rjmp	.+6      	; 0x592 <vfprintf+0x15a>
 58c:	65 2d       	mov	r22, r5
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <vfprintf+0x15e>
 592:	6f ef       	ldi	r22, 0xFF	; 255
 594:	7f ef       	ldi	r23, 0xFF	; 255
 596:	c5 01       	movw	r24, r10
 598:	2c 87       	std	Y+12, r18	; 0x0c
 59a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <strnlen_P>
 59e:	2c 01       	movw	r4, r24
 5a0:	2c 85       	ldd	r18, Y+12	; 0x0c
 5a2:	20 68       	ori	r18, 0x80	; 128
 5a4:	22 2e       	mov	r2, r18
 5a6:	83 01       	movw	r16, r6
 5a8:	23 fc       	sbrc	r2, 3
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <vfprintf+0x1aa>
 5ac:	83 2d       	mov	r24, r3
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	48 16       	cp	r4, r24
 5b2:	59 06       	cpc	r5, r25
 5b4:	b0 f4       	brcc	.+44     	; 0x5e2 <vfprintf+0x1aa>
 5b6:	b7 01       	movw	r22, r14
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 5c0:	3a 94       	dec	r3
 5c2:	f4 cf       	rjmp	.-24     	; 0x5ac <vfprintf+0x174>
 5c4:	f5 01       	movw	r30, r10
 5c6:	27 fc       	sbrc	r2, 7
 5c8:	85 91       	lpm	r24, Z+
 5ca:	27 fe       	sbrs	r2, 7
 5cc:	81 91       	ld	r24, Z+
 5ce:	5f 01       	movw	r10, r30
 5d0:	b7 01       	movw	r22, r14
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 5d8:	31 10       	cpse	r3, r1
 5da:	3a 94       	dec	r3
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	4f 1a       	sub	r4, r31
 5e0:	51 08       	sbc	r5, r1
 5e2:	41 14       	cp	r4, r1
 5e4:	51 04       	cpc	r5, r1
 5e6:	71 f7       	brne	.-36     	; 0x5c4 <vfprintf+0x18c>
 5e8:	e5 c0       	rjmp	.+458    	; 0x7b4 <vfprintf+0x37c>
 5ea:	84 36       	cpi	r24, 0x64	; 100
 5ec:	11 f0       	breq	.+4      	; 0x5f2 <vfprintf+0x1ba>
 5ee:	89 36       	cpi	r24, 0x69	; 105
 5f0:	39 f5       	brne	.+78     	; 0x640 <vfprintf+0x208>
 5f2:	f8 01       	movw	r30, r16
 5f4:	27 ff       	sbrs	r18, 7
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <vfprintf+0x1ce>
 5f8:	60 81       	ld	r22, Z
 5fa:	71 81       	ldd	r23, Z+1	; 0x01
 5fc:	82 81       	ldd	r24, Z+2	; 0x02
 5fe:	93 81       	ldd	r25, Z+3	; 0x03
 600:	0c 5f       	subi	r16, 0xFC	; 252
 602:	1f 4f       	sbci	r17, 0xFF	; 255
 604:	08 c0       	rjmp	.+16     	; 0x616 <vfprintf+0x1de>
 606:	60 81       	ld	r22, Z
 608:	71 81       	ldd	r23, Z+1	; 0x01
 60a:	88 27       	eor	r24, r24
 60c:	77 fd       	sbrc	r23, 7
 60e:	80 95       	com	r24
 610:	98 2f       	mov	r25, r24
 612:	0e 5f       	subi	r16, 0xFE	; 254
 614:	1f 4f       	sbci	r17, 0xFF	; 255
 616:	2f 76       	andi	r18, 0x6F	; 111
 618:	b2 2e       	mov	r11, r18
 61a:	97 ff       	sbrs	r25, 7
 61c:	09 c0       	rjmp	.+18     	; 0x630 <vfprintf+0x1f8>
 61e:	90 95       	com	r25
 620:	80 95       	com	r24
 622:	70 95       	com	r23
 624:	61 95       	neg	r22
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	20 68       	ori	r18, 0x80	; 128
 62e:	b2 2e       	mov	r11, r18
 630:	2a e0       	ldi	r18, 0x0A	; 10
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	a4 01       	movw	r20, r8
 636:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 63a:	a8 2e       	mov	r10, r24
 63c:	a8 18       	sub	r10, r8
 63e:	44 c0       	rjmp	.+136    	; 0x6c8 <vfprintf+0x290>
 640:	85 37       	cpi	r24, 0x75	; 117
 642:	29 f4       	brne	.+10     	; 0x64e <vfprintf+0x216>
 644:	2f 7e       	andi	r18, 0xEF	; 239
 646:	b2 2e       	mov	r11, r18
 648:	2a e0       	ldi	r18, 0x0A	; 10
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	25 c0       	rjmp	.+74     	; 0x698 <vfprintf+0x260>
 64e:	f2 2f       	mov	r31, r18
 650:	f9 7f       	andi	r31, 0xF9	; 249
 652:	bf 2e       	mov	r11, r31
 654:	8f 36       	cpi	r24, 0x6F	; 111
 656:	c1 f0       	breq	.+48     	; 0x688 <vfprintf+0x250>
 658:	18 f4       	brcc	.+6      	; 0x660 <vfprintf+0x228>
 65a:	88 35       	cpi	r24, 0x58	; 88
 65c:	79 f0       	breq	.+30     	; 0x67c <vfprintf+0x244>
 65e:	b4 c0       	rjmp	.+360    	; 0x7c8 <vfprintf+0x390>
 660:	80 37       	cpi	r24, 0x70	; 112
 662:	19 f0       	breq	.+6      	; 0x66a <vfprintf+0x232>
 664:	88 37       	cpi	r24, 0x78	; 120
 666:	21 f0       	breq	.+8      	; 0x670 <vfprintf+0x238>
 668:	af c0       	rjmp	.+350    	; 0x7c8 <vfprintf+0x390>
 66a:	2f 2f       	mov	r18, r31
 66c:	20 61       	ori	r18, 0x10	; 16
 66e:	b2 2e       	mov	r11, r18
 670:	b4 fe       	sbrs	r11, 4
 672:	0d c0       	rjmp	.+26     	; 0x68e <vfprintf+0x256>
 674:	8b 2d       	mov	r24, r11
 676:	84 60       	ori	r24, 0x04	; 4
 678:	b8 2e       	mov	r11, r24
 67a:	09 c0       	rjmp	.+18     	; 0x68e <vfprintf+0x256>
 67c:	24 ff       	sbrs	r18, 4
 67e:	0a c0       	rjmp	.+20     	; 0x694 <vfprintf+0x25c>
 680:	9f 2f       	mov	r25, r31
 682:	96 60       	ori	r25, 0x06	; 6
 684:	b9 2e       	mov	r11, r25
 686:	06 c0       	rjmp	.+12     	; 0x694 <vfprintf+0x25c>
 688:	28 e0       	ldi	r18, 0x08	; 8
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	05 c0       	rjmp	.+10     	; 0x698 <vfprintf+0x260>
 68e:	20 e1       	ldi	r18, 0x10	; 16
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <vfprintf+0x260>
 694:	20 e1       	ldi	r18, 0x10	; 16
 696:	32 e0       	ldi	r19, 0x02	; 2
 698:	f8 01       	movw	r30, r16
 69a:	b7 fe       	sbrs	r11, 7
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <vfprintf+0x274>
 69e:	60 81       	ld	r22, Z
 6a0:	71 81       	ldd	r23, Z+1	; 0x01
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <vfprintf+0x280>
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 5f       	subi	r16, 0xFE	; 254
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	a4 01       	movw	r20, r8
 6ba:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 6be:	a8 2e       	mov	r10, r24
 6c0:	a8 18       	sub	r10, r8
 6c2:	fb 2d       	mov	r31, r11
 6c4:	ff 77       	andi	r31, 0x7F	; 127
 6c6:	bf 2e       	mov	r11, r31
 6c8:	b6 fe       	sbrs	r11, 6
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <vfprintf+0x2aa>
 6cc:	2b 2d       	mov	r18, r11
 6ce:	2e 7f       	andi	r18, 0xFE	; 254
 6d0:	a5 14       	cp	r10, r5
 6d2:	50 f4       	brcc	.+20     	; 0x6e8 <vfprintf+0x2b0>
 6d4:	b4 fe       	sbrs	r11, 4
 6d6:	0a c0       	rjmp	.+20     	; 0x6ec <vfprintf+0x2b4>
 6d8:	b2 fc       	sbrc	r11, 2
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <vfprintf+0x2b4>
 6dc:	2b 2d       	mov	r18, r11
 6de:	2e 7e       	andi	r18, 0xEE	; 238
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <vfprintf+0x2b4>
 6e2:	7a 2c       	mov	r7, r10
 6e4:	2b 2d       	mov	r18, r11
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <vfprintf+0x2b6>
 6e8:	7a 2c       	mov	r7, r10
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <vfprintf+0x2b6>
 6ec:	75 2c       	mov	r7, r5
 6ee:	24 ff       	sbrs	r18, 4
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <vfprintf+0x2d4>
 6f2:	fe 01       	movw	r30, r28
 6f4:	ea 0d       	add	r30, r10
 6f6:	f1 1d       	adc	r31, r1
 6f8:	80 81       	ld	r24, Z
 6fa:	80 33       	cpi	r24, 0x30	; 48
 6fc:	11 f4       	brne	.+4      	; 0x702 <vfprintf+0x2ca>
 6fe:	29 7e       	andi	r18, 0xE9	; 233
 700:	09 c0       	rjmp	.+18     	; 0x714 <vfprintf+0x2dc>
 702:	22 ff       	sbrs	r18, 2
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0x2da>
 706:	73 94       	inc	r7
 708:	73 94       	inc	r7
 70a:	04 c0       	rjmp	.+8      	; 0x714 <vfprintf+0x2dc>
 70c:	82 2f       	mov	r24, r18
 70e:	86 78       	andi	r24, 0x86	; 134
 710:	09 f0       	breq	.+2      	; 0x714 <vfprintf+0x2dc>
 712:	73 94       	inc	r7
 714:	23 fd       	sbrc	r18, 3
 716:	13 c0       	rjmp	.+38     	; 0x73e <vfprintf+0x306>
 718:	20 ff       	sbrs	r18, 0
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0x2f0>
 71c:	5a 2c       	mov	r5, r10
 71e:	73 14       	cp	r7, r3
 720:	18 f4       	brcc	.+6      	; 0x728 <vfprintf+0x2f0>
 722:	53 0c       	add	r5, r3
 724:	57 18       	sub	r5, r7
 726:	73 2c       	mov	r7, r3
 728:	73 14       	cp	r7, r3
 72a:	68 f4       	brcc	.+26     	; 0x746 <vfprintf+0x30e>
 72c:	b7 01       	movw	r22, r14
 72e:	80 e2       	ldi	r24, 0x20	; 32
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	2c 87       	std	Y+12, r18	; 0x0c
 734:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 738:	73 94       	inc	r7
 73a:	2c 85       	ldd	r18, Y+12	; 0x0c
 73c:	f5 cf       	rjmp	.-22     	; 0x728 <vfprintf+0x2f0>
 73e:	73 14       	cp	r7, r3
 740:	10 f4       	brcc	.+4      	; 0x746 <vfprintf+0x30e>
 742:	37 18       	sub	r3, r7
 744:	01 c0       	rjmp	.+2      	; 0x748 <vfprintf+0x310>
 746:	31 2c       	mov	r3, r1
 748:	24 ff       	sbrs	r18, 4
 74a:	12 c0       	rjmp	.+36     	; 0x770 <vfprintf+0x338>
 74c:	b7 01       	movw	r22, r14
 74e:	80 e3       	ldi	r24, 0x30	; 48
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	2c 87       	std	Y+12, r18	; 0x0c
 754:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 758:	2c 85       	ldd	r18, Y+12	; 0x0c
 75a:	22 ff       	sbrs	r18, 2
 75c:	17 c0       	rjmp	.+46     	; 0x78c <vfprintf+0x354>
 75e:	21 ff       	sbrs	r18, 1
 760:	03 c0       	rjmp	.+6      	; 0x768 <vfprintf+0x330>
 762:	88 e5       	ldi	r24, 0x58	; 88
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0x334>
 768:	88 e7       	ldi	r24, 0x78	; 120
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	b7 01       	movw	r22, r14
 76e:	0c c0       	rjmp	.+24     	; 0x788 <vfprintf+0x350>
 770:	82 2f       	mov	r24, r18
 772:	86 78       	andi	r24, 0x86	; 134
 774:	59 f0       	breq	.+22     	; 0x78c <vfprintf+0x354>
 776:	21 fd       	sbrc	r18, 1
 778:	02 c0       	rjmp	.+4      	; 0x77e <vfprintf+0x346>
 77a:	80 e2       	ldi	r24, 0x20	; 32
 77c:	01 c0       	rjmp	.+2      	; 0x780 <vfprintf+0x348>
 77e:	8b e2       	ldi	r24, 0x2B	; 43
 780:	27 fd       	sbrc	r18, 7
 782:	8d e2       	ldi	r24, 0x2D	; 45
 784:	b7 01       	movw	r22, r14
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 78c:	a5 14       	cp	r10, r5
 78e:	38 f4       	brcc	.+14     	; 0x79e <vfprintf+0x366>
 790:	b7 01       	movw	r22, r14
 792:	80 e3       	ldi	r24, 0x30	; 48
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 79a:	5a 94       	dec	r5
 79c:	f7 cf       	rjmp	.-18     	; 0x78c <vfprintf+0x354>
 79e:	aa 94       	dec	r10
 7a0:	f4 01       	movw	r30, r8
 7a2:	ea 0d       	add	r30, r10
 7a4:	f1 1d       	adc	r31, r1
 7a6:	80 81       	ld	r24, Z
 7a8:	b7 01       	movw	r22, r14
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 7b0:	a1 10       	cpse	r10, r1
 7b2:	f5 cf       	rjmp	.-22     	; 0x79e <vfprintf+0x366>
 7b4:	33 20       	and	r3, r3
 7b6:	09 f4       	brne	.+2      	; 0x7ba <vfprintf+0x382>
 7b8:	51 ce       	rjmp	.-862    	; 0x45c <vfprintf+0x24>
 7ba:	b7 01       	movw	r22, r14
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 0d 04 	call	0x81a	; 0x81a <fputc>
 7c4:	3a 94       	dec	r3
 7c6:	f6 cf       	rjmp	.-20     	; 0x7b4 <vfprintf+0x37c>
 7c8:	f7 01       	movw	r30, r14
 7ca:	86 81       	ldd	r24, Z+6	; 0x06
 7cc:	97 81       	ldd	r25, Z+7	; 0x07
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <vfprintf+0x39c>
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	9f ef       	ldi	r25, 0xFF	; 255
 7d4:	2c 96       	adiw	r28, 0x0c	; 12
 7d6:	e2 e1       	ldi	r30, 0x12	; 18
 7d8:	0c 94 b9 04 	jmp	0x972	; 0x972 <__epilogue_restores__>

000007dc <strnlen_P>:
 7dc:	fc 01       	movw	r30, r24
 7de:	05 90       	lpm	r0, Z+
 7e0:	61 50       	subi	r22, 0x01	; 1
 7e2:	70 40       	sbci	r23, 0x00	; 0
 7e4:	01 10       	cpse	r0, r1
 7e6:	d8 f7       	brcc	.-10     	; 0x7de <strnlen_P+0x2>
 7e8:	80 95       	com	r24
 7ea:	90 95       	com	r25
 7ec:	8e 0f       	add	r24, r30
 7ee:	9f 1f       	adc	r25, r31
 7f0:	08 95       	ret

000007f2 <memcpy>:
 7f2:	fb 01       	movw	r30, r22
 7f4:	dc 01       	movw	r26, r24
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <memcpy+0xa>
 7f8:	01 90       	ld	r0, Z+
 7fa:	0d 92       	st	X+, r0
 7fc:	41 50       	subi	r20, 0x01	; 1
 7fe:	50 40       	sbci	r21, 0x00	; 0
 800:	d8 f7       	brcc	.-10     	; 0x7f8 <memcpy+0x6>
 802:	08 95       	ret

00000804 <strnlen>:
 804:	fc 01       	movw	r30, r24
 806:	61 50       	subi	r22, 0x01	; 1
 808:	70 40       	sbci	r23, 0x00	; 0
 80a:	01 90       	ld	r0, Z+
 80c:	01 10       	cpse	r0, r1
 80e:	d8 f7       	brcc	.-10     	; 0x806 <strnlen+0x2>
 810:	80 95       	com	r24
 812:	90 95       	com	r25
 814:	8e 0f       	add	r24, r30
 816:	9f 1f       	adc	r25, r31
 818:	08 95       	ret

0000081a <fputc>:
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	cf 93       	push	r28
 820:	df 93       	push	r29
 822:	18 2f       	mov	r17, r24
 824:	09 2f       	mov	r16, r25
 826:	eb 01       	movw	r28, r22
 828:	8b 81       	ldd	r24, Y+3	; 0x03
 82a:	81 fd       	sbrc	r24, 1
 82c:	03 c0       	rjmp	.+6      	; 0x834 <fputc+0x1a>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	20 c0       	rjmp	.+64     	; 0x874 <fputc+0x5a>
 834:	82 ff       	sbrs	r24, 2
 836:	10 c0       	rjmp	.+32     	; 0x858 <fputc+0x3e>
 838:	4e 81       	ldd	r20, Y+6	; 0x06
 83a:	5f 81       	ldd	r21, Y+7	; 0x07
 83c:	2c 81       	ldd	r18, Y+4	; 0x04
 83e:	3d 81       	ldd	r19, Y+5	; 0x05
 840:	42 17       	cp	r20, r18
 842:	53 07       	cpc	r21, r19
 844:	7c f4       	brge	.+30     	; 0x864 <fputc+0x4a>
 846:	e8 81       	ld	r30, Y
 848:	f9 81       	ldd	r31, Y+1	; 0x01
 84a:	9f 01       	movw	r18, r30
 84c:	2f 5f       	subi	r18, 0xFF	; 255
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	39 83       	std	Y+1, r19	; 0x01
 852:	28 83       	st	Y, r18
 854:	10 83       	st	Z, r17
 856:	06 c0       	rjmp	.+12     	; 0x864 <fputc+0x4a>
 858:	e8 85       	ldd	r30, Y+8	; 0x08
 85a:	f9 85       	ldd	r31, Y+9	; 0x09
 85c:	81 2f       	mov	r24, r17
 85e:	09 95       	icall
 860:	89 2b       	or	r24, r25
 862:	29 f7       	brne	.-54     	; 0x82e <fputc+0x14>
 864:	2e 81       	ldd	r18, Y+6	; 0x06
 866:	3f 81       	ldd	r19, Y+7	; 0x07
 868:	2f 5f       	subi	r18, 0xFF	; 255
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	3f 83       	std	Y+7, r19	; 0x07
 86e:	2e 83       	std	Y+6, r18	; 0x06
 870:	81 2f       	mov	r24, r17
 872:	90 2f       	mov	r25, r16
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	08 95       	ret

0000087e <__ultoa_invert>:
 87e:	fa 01       	movw	r30, r20
 880:	aa 27       	eor	r26, r26
 882:	28 30       	cpi	r18, 0x08	; 8
 884:	51 f1       	breq	.+84     	; 0x8da <__ultoa_invert+0x5c>
 886:	20 31       	cpi	r18, 0x10	; 16
 888:	81 f1       	breq	.+96     	; 0x8ea <__ultoa_invert+0x6c>
 88a:	e8 94       	clt
 88c:	6f 93       	push	r22
 88e:	6e 7f       	andi	r22, 0xFE	; 254
 890:	6e 5f       	subi	r22, 0xFE	; 254
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	af 4f       	sbci	r26, 0xFF	; 255
 89a:	b1 e0       	ldi	r27, 0x01	; 1
 89c:	3e d0       	rcall	.+124    	; 0x91a <__stack+0x1b>
 89e:	b4 e0       	ldi	r27, 0x04	; 4
 8a0:	3c d0       	rcall	.+120    	; 0x91a <__stack+0x1b>
 8a2:	67 0f       	add	r22, r23
 8a4:	78 1f       	adc	r23, r24
 8a6:	89 1f       	adc	r24, r25
 8a8:	9a 1f       	adc	r25, r26
 8aa:	a1 1d       	adc	r26, r1
 8ac:	68 0f       	add	r22, r24
 8ae:	79 1f       	adc	r23, r25
 8b0:	8a 1f       	adc	r24, r26
 8b2:	91 1d       	adc	r25, r1
 8b4:	a1 1d       	adc	r26, r1
 8b6:	6a 0f       	add	r22, r26
 8b8:	71 1d       	adc	r23, r1
 8ba:	81 1d       	adc	r24, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	a1 1d       	adc	r26, r1
 8c0:	20 d0       	rcall	.+64     	; 0x902 <__stack+0x3>
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <__ultoa_invert+0x48>
 8c4:	68 94       	set
 8c6:	3f 91       	pop	r19
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	26 9f       	mul	r18, r22
 8cc:	11 24       	eor	r1, r1
 8ce:	30 19       	sub	r19, r0
 8d0:	30 5d       	subi	r19, 0xD0	; 208
 8d2:	31 93       	st	Z+, r19
 8d4:	de f6       	brtc	.-74     	; 0x88c <__ultoa_invert+0xe>
 8d6:	cf 01       	movw	r24, r30
 8d8:	08 95       	ret
 8da:	46 2f       	mov	r20, r22
 8dc:	47 70       	andi	r20, 0x07	; 7
 8de:	40 5d       	subi	r20, 0xD0	; 208
 8e0:	41 93       	st	Z+, r20
 8e2:	b3 e0       	ldi	r27, 0x03	; 3
 8e4:	0f d0       	rcall	.+30     	; 0x904 <__stack+0x5>
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0x5c>
 8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <__ultoa_invert+0x58>
 8ea:	46 2f       	mov	r20, r22
 8ec:	4f 70       	andi	r20, 0x0F	; 15
 8ee:	40 5d       	subi	r20, 0xD0	; 208
 8f0:	4a 33       	cpi	r20, 0x3A	; 58
 8f2:	18 f0       	brcs	.+6      	; 0x8fa <__ultoa_invert+0x7c>
 8f4:	49 5d       	subi	r20, 0xD9	; 217
 8f6:	31 fd       	sbrc	r19, 1
 8f8:	40 52       	subi	r20, 0x20	; 32
 8fa:	41 93       	st	Z+, r20
 8fc:	02 d0       	rcall	.+4      	; 0x902 <__stack+0x3>
 8fe:	a9 f7       	brne	.-22     	; 0x8ea <__ultoa_invert+0x6c>
 900:	ea cf       	rjmp	.-44     	; 0x8d6 <__ultoa_invert+0x58>
 902:	b4 e0       	ldi	r27, 0x04	; 4
 904:	a6 95       	lsr	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	ba 95       	dec	r27
 910:	c9 f7       	brne	.-14     	; 0x904 <__stack+0x5>
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	61 05       	cpc	r22, r1
 916:	71 05       	cpc	r23, r1
 918:	08 95       	ret
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	0a 2e       	mov	r0, r26
 920:	06 94       	lsr	r0
 922:	57 95       	ror	r21
 924:	47 95       	ror	r20
 926:	37 95       	ror	r19
 928:	27 95       	ror	r18
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__stack+0x21>
 92e:	62 0f       	add	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	95 1f       	adc	r25, r21
 936:	a0 1d       	adc	r26, r0
 938:	08 95       	ret

0000093a <__prologue_saves__>:
 93a:	2f 92       	push	r2
 93c:	3f 92       	push	r3
 93e:	4f 92       	push	r4
 940:	5f 92       	push	r5
 942:	6f 92       	push	r6
 944:	7f 92       	push	r7
 946:	8f 92       	push	r8
 948:	9f 92       	push	r9
 94a:	af 92       	push	r10
 94c:	bf 92       	push	r11
 94e:	cf 92       	push	r12
 950:	df 92       	push	r13
 952:	ef 92       	push	r14
 954:	ff 92       	push	r15
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	ca 1b       	sub	r28, r26
 964:	db 0b       	sbc	r29, r27
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	de bf       	out	0x3e, r29	; 62
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	09 94       	ijmp

00000972 <__epilogue_restores__>:
 972:	2a 88       	ldd	r2, Y+18	; 0x12
 974:	39 88       	ldd	r3, Y+17	; 0x11
 976:	48 88       	ldd	r4, Y+16	; 0x10
 978:	5f 84       	ldd	r5, Y+15	; 0x0f
 97a:	6e 84       	ldd	r6, Y+14	; 0x0e
 97c:	7d 84       	ldd	r7, Y+13	; 0x0d
 97e:	8c 84       	ldd	r8, Y+12	; 0x0c
 980:	9b 84       	ldd	r9, Y+11	; 0x0b
 982:	aa 84       	ldd	r10, Y+10	; 0x0a
 984:	b9 84       	ldd	r11, Y+9	; 0x09
 986:	c8 84       	ldd	r12, Y+8	; 0x08
 988:	df 80       	ldd	r13, Y+7	; 0x07
 98a:	ee 80       	ldd	r14, Y+6	; 0x06
 98c:	fd 80       	ldd	r15, Y+5	; 0x05
 98e:	0c 81       	ldd	r16, Y+4	; 0x04
 990:	1b 81       	ldd	r17, Y+3	; 0x03
 992:	aa 81       	ldd	r26, Y+2	; 0x02
 994:	b9 81       	ldd	r27, Y+1	; 0x01
 996:	ce 0f       	add	r28, r30
 998:	d1 1d       	adc	r29, r1
 99a:	0f b6       	in	r0, 0x3f	; 63
 99c:	f8 94       	cli
 99e:	de bf       	out	0x3e, r29	; 62
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	cd bf       	out	0x3d, r28	; 61
 9a4:	ed 01       	movw	r28, r26
 9a6:	08 95       	ret

000009a8 <_exit>:
 9a8:	f8 94       	cli

000009aa <__stop_program>:
 9aa:	ff cf       	rjmp	.-2      	; 0x9aa <__stop_program>
