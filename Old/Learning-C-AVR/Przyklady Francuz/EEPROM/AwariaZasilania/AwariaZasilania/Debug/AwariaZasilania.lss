
AwariaZasilania.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000144  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001f8  2**0
                  ALLOC
  3 .eeprom       00000006  00810000  00810000  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001f8  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012c  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001df  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c2  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_23>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_23>:
{
    //Wy³¹cz zbêdne generatory i zmniejsz FCLK
	//Dodatkowo warto wszystkie piny ustawiæ jako wejœcia
	//Rozpoczynamy zapis zmiennych do EEPROM

	eeprom_write_block(&DaneSRAM, &DaneEEPROM, sizeof(DaneStrona)); //Skopiuj dane do EEPROM
  90:	46 e0       	ldi	r20, 0x06	; 6
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	0e 94 88 00 	call	0x110	; 0x110 <__eewr_block_m168>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__vector_23+0x10>

000000a2 <AC_init>:
	while(1); //Ju¿ nic wiêcej nie robimy
}

void AC_init()
{
	DIDR1=_BV(AIN1D) | _BV(AIN0D);   //Wy³¹cz porty cyfrowe zwi¹zane z wejœciami komparatora
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	80 93 7f 00 	sts	0x007F, r24
	ACSR=_BV(ACIE) | _BV(ACIS1);   //W³¹cz komparator i przerwanie komparatora zwi¹zane ze zboczem opadaj¹cym
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	80 bf       	out	0x30, r24	; 48
  ac:	08 95       	ret

000000ae <Data_init>:
}

void Data_init()
{
	eeprom_read_block(&DaneSRAM, &DaneEEPROM, sizeof(DaneStrona));  //Skopiuj dane z EEPROM do SRAM
  ae:	46 e0       	ldi	r20, 0x06	; 6
  b0:	50 e0       	ldi	r21, 0x00	; 0
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 78 00 	call	0xf0	; 0xf0 <__eerd_block_m168>
  be:	08 95       	ret

000000c0 <main>:
}

int main(void)
{
	Data_init();
  c0:	0e 94 57 00 	call	0xae	; 0xae <Data_init>
	AC_init();
  c4:	0e 94 51 00 	call	0xa2	; 0xa2 <AC_init>
	sei(); //Odblokuj przerwania
  c8:	78 94       	sei
	
	DaneSRAM.Dane=0x4BCD;  //Modyfikujemy odtworzon¹ kopiê danych
  ca:	8d ec       	ldi	r24, 0xCD	; 205
  cc:	9b e4       	ldi	r25, 0x4B	; 75
  ce:	90 93 01 01 	sts	0x0101, r25
  d2:	80 93 00 01 	sts	0x0100, r24
	DaneSRAM.PID_P=0x0211; //Zostan¹ one automatycznie zapisane po od³¹czeniu zasilania
  d6:	81 e1       	ldi	r24, 0x11	; 17
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	90 93 05 01 	sts	0x0105, r25
  de:	80 93 04 01 	sts	0x0104, r24
	DaneSRAM.Temperatura=0x1234;
  e2:	84 e3       	ldi	r24, 0x34	; 52
  e4:	92 e1       	ldi	r25, 0x12	; 18
  e6:	90 93 03 01 	sts	0x0103, r25
  ea:	80 93 02 01 	sts	0x0102, r24
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x2e>

000000f0 <__eerd_block_m168>:
  f0:	dc 01       	movw	r26, r24
  f2:	cb 01       	movw	r24, r22

000000f4 <__eerd_blraw_m168>:
  f4:	fc 01       	movw	r30, r24
  f6:	f9 99       	sbic	0x1f, 1	; 31
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <__eerd_blraw_m168+0x2>
  fa:	06 c0       	rjmp	.+12     	; 0x108 <__eerd_blraw_m168+0x14>
  fc:	f2 bd       	out	0x22, r31	; 34
  fe:	e1 bd       	out	0x21, r30	; 33
 100:	f8 9a       	sbi	0x1f, 0	; 31
 102:	31 96       	adiw	r30, 0x01	; 1
 104:	00 b4       	in	r0, 0x20	; 32
 106:	0d 92       	st	X+, r0
 108:	41 50       	subi	r20, 0x01	; 1
 10a:	50 40       	sbci	r21, 0x00	; 0
 10c:	b8 f7       	brcc	.-18     	; 0xfc <__eerd_blraw_m168+0x8>
 10e:	08 95       	ret

00000110 <__eewr_block_m168>:
 110:	dc 01       	movw	r26, r24
 112:	cb 01       	movw	r24, r22
 114:	03 c0       	rjmp	.+6      	; 0x11c <__eewr_block_m168+0xc>
 116:	2d 91       	ld	r18, X+
 118:	0e 94 93 00 	call	0x126	; 0x126 <__eewr_r18_m168>
 11c:	41 50       	subi	r20, 0x01	; 1
 11e:	50 40       	sbci	r21, 0x00	; 0
 120:	d0 f7       	brcc	.-12     	; 0x116 <__eewr_block_m168+0x6>
 122:	08 95       	ret

00000124 <__eewr_byte_m168>:
 124:	26 2f       	mov	r18, r22

00000126 <__eewr_r18_m168>:
 126:	f9 99       	sbic	0x1f, 1	; 31
 128:	fe cf       	rjmp	.-4      	; 0x126 <__eewr_r18_m168>
 12a:	1f ba       	out	0x1f, r1	; 31
 12c:	92 bd       	out	0x22, r25	; 34
 12e:	81 bd       	out	0x21, r24	; 33
 130:	20 bd       	out	0x20, r18	; 32
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	fa 9a       	sbi	0x1f, 2	; 31
 138:	f9 9a       	sbi	0x1f, 1	; 31
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
