
ciasm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000170  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800102  00800102  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000238  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d3  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000108  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000010e  00000000  00000000  0000055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000161  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000801  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 00 	call	0xea	; 0xea <main>
  9e:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_13>:

 .extern x

 .global TIMER1_OVF_vect
 TIMER1_OVF_vect:
  push	r16
  a6:	0f 93       	push	r16
  in	r16, _SFR_IO_ADDR(SREG)	; 63
  a8:	0f b7       	in	r16, 0x3f	; 63
  push	r16
  aa:	0f 93       	push	r16
  lds	r16, x
  ac:	00 91 06 01 	lds	r16, 0x0106
  subi	r16, 0xFF	; 255
  b0:	0f 5f       	subi	r16, 0xFF	; 255
  sts	x, r16
  b2:	00 93 06 01 	sts	0x0106, r16
  pop r16
  b6:	0f 91       	pop	r16
  out _SFR_IO_ADDR(SREG), r16
  b8:	0f bf       	out	0x3f, r16	; 63
  pop r16
  ba:	0f 91       	pop	r16
  reti
  bc:	18 95       	reti

000000be <asm_inc>:

  .global asm_inc
  asm_inc:
   inc r22
  be:	63 95       	inc	r22
   adc r23, 0
  c0:	70 1d       	adc	r23, r0
   adc r24, 0
  c2:	80 1d       	adc	r24, r0
   adc r25, 0
  c4:	90 1d       	adc	r25, r0
   ret
  c6:	08 95       	ret

000000c8 <asm_read_byte>:

  .extern asm_txt

  .global asm_read_byte
  asm_read_byte:
   ldi r30, lo8(asm_txt)
  c8:	e0 e0       	ldi	r30, 0x00	; 0
   ldi r31, hi8(asm_txt)
  ca:	f1 e0       	ldi	r31, 0x01	; 1
   ld r24, Z
  cc:	80 81       	ld	r24, Z
   ret
  ce:	08 95       	ret

000000d0 <asm_zero>:

.extern c_zero
.global asm_zero
asm_zero:
   ldi r30, pm_lo8(c_zero)
  d0:	ec e6       	ldi	r30, 0x6C	; 108
   ldi r31, pm_hi8(c_zero)
  d2:	f0 e0       	ldi	r31, 0x00	; 0
   icall
  d4:	09 95       	icall
  d6:	08 95       	ret

000000d8 <c_zero>:
uint32_t asm_add;
uint8_t asm_txt='a';

void c_zero()
{
	asm_add=0;
  d8:	10 92 02 01 	sts	0x0102, r1
  dc:	10 92 03 01 	sts	0x0103, r1
  e0:	10 92 04 01 	sts	0x0104, r1
  e4:	10 92 05 01 	sts	0x0105, r1
  e8:	08 95       	ret

000000ea <main>:
extern void asm_zero();

int main(void)
{

	asm_add=1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	80 93 02 01 	sts	0x0102, r24
  f6:	90 93 03 01 	sts	0x0103, r25
  fa:	a0 93 04 01 	sts	0x0104, r26
  fe:	b0 93 05 01 	sts	0x0105, r27
	asm_add=asm_inc(asm_add);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 5f 00 	call	0xbe	; 0xbe <asm_inc>
 10e:	60 93 02 01 	sts	0x0102, r22
 112:	70 93 03 01 	sts	0x0103, r23
 116:	80 93 04 01 	sts	0x0104, r24
 11a:	90 93 05 01 	sts	0x0105, r25
	asm_add=asm_inc(asm_add);
 11e:	0e 94 5f 00 	call	0xbe	; 0xbe <asm_inc>
 122:	60 93 02 01 	sts	0x0102, r22
 126:	70 93 03 01 	sts	0x0103, r23
 12a:	80 93 04 01 	sts	0x0104, r24
 12e:	90 93 05 01 	sts	0x0105, r25
	asm_add=asm_inc(asm_add);
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <asm_inc>
 136:	60 93 02 01 	sts	0x0102, r22
 13a:	70 93 03 01 	sts	0x0103, r23
 13e:	80 93 04 01 	sts	0x0104, r24
 142:	90 93 05 01 	sts	0x0105, r25
	asm_zero();
 146:	0e 94 68 00 	call	0xd0	; 0xd0 <asm_zero>
	asm_add=asm_read_byte();
 14a:	0e 94 64 00 	call	0xc8	; 0xc8 <asm_read_byte>
 14e:	68 2f       	mov	r22, r24
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	60 93 02 01 	sts	0x0102, r22
 15a:	70 93 03 01 	sts	0x0103, r23
 15e:	80 93 04 01 	sts	0x0104, r24
 162:	90 93 05 01 	sts	0x0105, r25
	asm_add=asm_inc(asm_add);
 166:	0e 94 5f 00 	call	0xbe	; 0xbe <asm_inc>
 16a:	ff cf       	rjmp	.-2      	; 0x16a <main+0x80>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
